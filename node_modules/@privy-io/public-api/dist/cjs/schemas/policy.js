"use strict";var e=require("zod"),r=require("@privy-io/api-base"),t=require("./wallet-api/wallets.js");require("./api.js"),require("./core.js"),require("bs58"),require("libphonenumber-js/max"),require("viem"),require("./transaction.js"),require("./wallet-api/export.js");const i=e.z.enum(["ALLOW","DENY"]);let a=e.z.union([e.z.string(),e.z.number(),e.z.boolean(),e.z.null()]),n=e.z.lazy((()=>e.z.union([a,e.z.array(n),e.z.record(n)])));const o=e.z.union([e.z.literal("eq"),e.z.literal("gt"),e.z.literal("gte"),e.z.literal("lt"),e.z.literal("lte"),e.z.literal("in")]),s=e.z.object({operator:o,value:e.z.union([e.z.string(),e.z.array(e.z.string())])}),l=e.z.object({field_source:e.z.literal("ethereum_transaction"),field:e.z.union([e.z.literal("to"),e.z.literal("value")])}).strict().merge(s),c=e.z.object({field_source:e.z.literal("ethereum_calldata"),field:e.z.string(),abi:n}).strict().merge(s),u=e.z.object({field_source:e.z.literal("ethereum_typed_data_domain"),field:e.z.union([e.z.literal("chainId"),e.z.literal("verifyingContract"),e.z.literal("chain_id"),e.z.literal("verifying_contract")])}).strict().merge(s),d=e.z.object({field_source:e.z.literal("ethereum_typed_data_message"),field:e.z.string(),typed_data:e.z.object({types:t.TypedDataTypesInputParams,primary_type:e.z.string()})}).strict().merge(s),m=e.z.object({field_source:e.z.literal("solana_program_instruction"),field:e.z.literal("programId")}).strict().merge(s),z=e.z.object({field_source:e.z.literal("solana_system_program_instruction"),field:e.z.union([e.z.literal("instructionName"),e.z.literal("Transfer.from"),e.z.literal("Transfer.to"),e.z.literal("Transfer.lamports")])}).strict().merge(s),p=e.z.object({field_source:e.z.literal("solana_token_program_instruction"),field:e.z.union([e.z.literal("instructionName"),e.z.literal("TransferChecked.source"),e.z.literal("TransferChecked.destination"),e.z.literal("TransferChecked.authority"),e.z.literal("TransferChecked.amount"),e.z.literal("TransferChecked.mint")])}).strict().merge(s),_=e.z.discriminatedUnion("field_source",[l,c,u,d,m,z,p]),h=e.z.object({name:e.z.string().max(50,"Rule name must be fewer than 50 characters"),conditions:e.z.array(_),action:i}).strict();let y=e.z.union([e.z.literal("eth_sendTransaction"),e.z.literal("eth_signTransaction"),e.z.literal("eth_signTypedData_v4"),e.z.literal("signTransaction"),e.z.literal("signAndSendTransaction"),e.z.literal("exportPrivateKey"),e.z.literal("*")]),f=e.z.object({method:y,rules:e.z.array(h)}).strict().transform((e=>{let r=[];for(let t of e.rules){let i=g.parse({name:t.name,method:e.method,conditions:t.conditions,action:t.action});r.push(i)}return r}));const g=e.z.object({name:e.z.string().max(50,"Rule name must be fewer than 50 characters"),method:y,conditions:e.z.array(_),action:i}).strict();let b=e.z.object({version:e.z.literal("1.0"),name:e.z.string().max(50,"Policy name must be fewer than 50 characters"),chain_type:t.ChainType,method_rules:e.z.array(f),default_action:i,...t.OwnerInputFields}).strict(),x=e.z.object({version:e.z.literal("1.0"),name:e.z.string().max(50,"Policy name must be fewer than 50 characters"),chain_type:t.ChainType,rules:e.z.array(g),...t.OwnerInputFields}).strict();const j=e.z.union([b,x]).transform((e=>{if(!("method_rules"in e))return e;{let r={version:e.version,name:e.name,chain_type:e.chain_type,rules:e.method_rules.flat(),owner:e.owner,owner_id:e.owner_id};return"ALLOW"===e.default_action&&r.rules.push(g.parse({name:"Default Action",method:"*",conditions:[],action:i.enum.ALLOW})),x.parse(r)}})).refine((e=>!e.owner||!e.owner_id),{message:"Only one of owner or owner_id can be provided."}),v=x.omit({owner:!0,owner_id:!0}).extend({id:e.z.string(),created_at:e.z.number(),owner_id:t.KeyQuorumId.nullable()}),w=e.z.object({policy_id:e.z.string({required_error:"Policy ID must be provided",invalid_type_error:"Policy ID is not a valid string"}).min(1)}).catch((({error:e})=>{throw new r.InvalidInputError(e.message,r.PrivyErrorCode.INVALID_DATA)}));let T=e.z.object({name:e.z.string().trim().min(1,"Name is required").max(50,"Policy name must be fewer than 50 characters").optional(),method_rules:e.z.array(f).optional()}).strict().superRefine(((e,r)=>{Object.values(e).every((e=>null==e))&&r.addIssue({code:"custom",message:"At least one field must be provided"})})),I=e.z.object({name:e.z.string().trim().min(1,"Name is required").max(50,"Policy name must be fewer than 50 characters").optional(),rules:e.z.array(g).optional()}).strict().superRefine(((e,r)=>{Object.values(e).every((e=>null==e))&&r.addIssue({code:"custom",message:"At least one field must be provided"})}));const P=e.z.union([T,I]).transform((e=>"method_rules"in e?I.parse({name:e.name,rules:e.method_rules?.flat()??[]}):I.parse(e)));exports.BaseCondition=s,exports.Condition=_,exports.ConditionOperator=o,exports.EthereumCalldataCondition=c,exports.EthereumTransactionCondition=l,exports.EthereumTypedDataDomainCondition=u,exports.EthereumTypedDataMessageCondition=d,exports.LegacyRule=h,exports.PolicyAction=i,exports.PolicyIdFromPath=w,exports.PolicyResponse=v,exports.PolicyWithoutValidation=j,exports.Rule=g,exports.SolanaProgramInstruction=m,exports.SolanaSystemProgramInstruction=z,exports.SolanaTokenProgramInstruction=p,exports.UpdatePolicyInput=P;
