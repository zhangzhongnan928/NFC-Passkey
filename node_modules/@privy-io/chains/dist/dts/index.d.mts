/**
 * These types are fully compatible with WAGMI chain types, in case
 * we need interop in the future.
 */
type RpcUrls = {
    http: readonly string[];
    webSocket?: readonly string[];
};
type NativeCurrency = {
    name: string;
    /** 2-6 characters long */
    symbol: string;
    decimals: number;
};
type BlockExplorer = {
    name: string;
    url: string;
};
type Unit = 'ether' | 'gwei' | 'wei' | number;
/** A subset of WAGMI's chain type
 * https://github.com/wagmi-dev/references/blob/6aea7ee9c65cfac24f33173ab3c98176b8366f05/packages/chains/src/types.ts#L8
 *
 * @example
 *
 * override the RPC URL for a chain
 *
 * ```ts
 * import { mainnet } from 'viem/chains';
 *
 * const mainnetOverride: Chain = {
 *  ...mainnet,
 *  rpcUrls: {
 *    ...mainnet.rpcUrls,
 *    privyWalletOverride: {
 *      http: [INSERT_MAINNET_OVERRIDE_URL],
 *    },
 *  },
 * };
 *
 * ```
 * or
 * ```ts
 * import { mainnet } from 'viem/chains';
 * import { addRpcUrlOverrideToChain } from '@privy-io/react-auth';
 *
 * const mainnetOverride = addRpcUrlOverrideToChain(mainnet, INSERT_MAINNET_OVERRIDE_URL);
 * ```
 *
 */
type Chain = {
    /** Id in number form */
    id: number;
    /** Human readable name */
    name: string;
    /** Internal network name */
    network?: string;
    /** Currency used by chain */
    nativeCurrency: NativeCurrency;
    /** Collection of block explorers */
    blockExplorers?: {
        [key: string]: BlockExplorer;
        default: BlockExplorer;
    };
    /** Collection of RPC endpoints */
    rpcUrls: {
        [key: string]: RpcUrls;
        default: RpcUrls;
    } | {
        [key: string]: RpcUrls;
        default: RpcUrls;
        /** @optional Allows you to override the RPC url for this chain */
        privyWalletOverride: RpcUrls;
    };
    /** Flag for test networks */
    testnet?: boolean;
};
type ChainLikeWithId = {
    id: number;
};
/**
 * RPC configuration for wallets.
 */
type RpcConfig = {
    /**
     * Mapping of chainId to RPC URL. Overrides Privy default RPC URLs that are shared across projects. Set your own RPC URLs
     * to avoid rate limits or other throughput bottlenecks.
     *
     * Do not provide an RPC URL that can serve multiple networks. You should only provide RPC URLs that are speciifc to the
     * chain ID you'd like to override.
     */
    rpcUrls?: {
        [key: number]: string;
    };
    /**
     * Mapping between `walletClientType`s to the length of time after which RPC requests will timeout for that
     * `walletClientType`.
     *
     * By default, all RPC requests through Privy will timeout after 2 mins (120000 ms). Use this object to
     * override the RPC timeout in ms for specific` walletClientType`s, e.g. 'safe', in order to extend or
     * shorten the timeout duration.
     */
    rpcTimeouts?: {
        [key in string]?: number;
    };
};

declare function addPrivyRpcToChain(chain: Chain, rpcUrl: string): Chain;

/**
 * Helper function that combines our SDK's default supported chains with any chains passed into this
 * method. Typically, we will the app's configured `supportedChains` here to get a total list of all
 * possible supported chains (for funding and fetching token price flows).
 *
 * @param additionalChains {Chain[]} array of chains to add to default list
 * @returns array of all possible supported chains
 */
declare function addToDefaultChains(additionalChains: Chain[]): Chain[];

/**
 * A List of the privy default supported chains, in alphabetical order, except
 * with mainnet + L1 testnets first.
 */
declare const DEFAULT_SUPPORTED_CHAINS: Chain[];
/**
 * A set of the supported chain ids
 */
declare const DEFAULT_SUPPORTED_CHAIN_IDS: Set<number>;

/**
 * Allows you to override the RPC url for the given chain
 *
 * @param chain {@link Chain} chain you want to modify
 * @param rpcUrl {@type string} rpc url you want to use for this chain
 * @returns modified chain object
 *
 * @example
 *
 * ```ts
 * import { mainnet } from 'viem/chains';
 * import { addRpcUrlOverrideToChain } from '@privy-io/react-auth';
 *
 * const mainnetOverride = addRpcUrlOverrideToChain(mainnet, INSERT_MAINNET_OVERRIDE_URL);
 * ```
 */
declare function addRpcUrlOverrideToChain(chain: Chain, rpcUrl: string): Chain;

declare const dedupeSupportedChains: (chains: Chain[]) => Chain[];

declare const getSupportedChainById: (id: number) => Chain | undefined;

declare const arbitrum: Chain;

declare const arbitrumSepolia: Chain;

/**
 * These have been modified from the original WAGMI chain definition
 */
declare const avalanche: Chain;

/**
 * These have been modified from the original WAGMI chain definition
 */
declare const avalancheFuji: Chain;

declare const base: Chain;

/**
 * These have been modified from the original WAGMI chain definition
 */
declare const baseSepolia: Chain;

declare const celo: Chain;

declare const linea: Chain;

declare const mainnet: Chain;

declare const optimism: Chain;

declare const optimismSepolia: Chain;

declare const polygon: Chain;

declare const polygonAmoy: Chain;

declare const sepolia: Chain;

declare const zora: Chain;

declare const zoraSepolia: Chain;

declare const zoraTestnet: Chain;

declare const VERSION = "__VERSION__";

export { type Chain, type ChainLikeWithId, DEFAULT_SUPPORTED_CHAINS, DEFAULT_SUPPORTED_CHAIN_IDS, type RpcConfig, type Unit, VERSION, addPrivyRpcToChain, addRpcUrlOverrideToChain, addToDefaultChains, arbitrum, arbitrumSepolia, avalanche, avalancheFuji, base, baseSepolia, celo, dedupeSupportedChains, getSupportedChainById, linea, mainnet, optimism, optimismSepolia, polygon, polygonAmoy, sepolia, zora, zoraSepolia, zoraTestnet };
