import{z as t}from"zod";import{WalletAddress as i}from"./core.mjs";import"bs58";import"libphonenumber-js/max";import"viem";const n=t.enum(["bridge","bridge-sandbox"]),r=t.object({provider:n}),e=t.union([t.object({status:t.literal("completed")}),t.object({status:t.literal("incomplete"),url:t.string()})]),a=t.enum(["not_found","active","awaiting_questionnaire","awaiting_ubo","incomplete","not_started","offboarded","paused","rejected","under_review"]),o=t.object({provider:n}),s=t.object({user_id:t.string(),provider_user_id:t.string().optional(),status:a}),m=t.object({street_line_1:t.string().trim().min(1),street_line_2:t.string().trim().min(1).optional(),city:t.string().trim().min(1),subdivision:t.string().trim().min(1).max(3),postal_code:t.string().trim().min(1).optional(),country:t.string().trim().min(3).max(3)}),p=t.object({type:t.string(),issuing_country:t.string().trim().min(3).max(3),number:t.string().optional(),description:t.string().optional(),expiration:t.string().optional(),image_front:t.string().optional(),image_back:t.string().optional()}),c=t.object({purposes:t.array(t.string().trim().min(1)).min(1),file:t.string().trim().min(1),description:t.string().trim().min(1).optional()}),d=t.object({regulated_activities_description:t.string().trim().min(1),primary_regulatory_authority_country:t.string().trim().min(1),primary_regulatory_authority_name:t.string().trim().min(1),license_number:t.string().trim().min(1)}),g=t.object({first_name:t.string().trim().min(1).max(1024),last_name:t.string().trim().min(1).max(1024),email:t.string().trim().min(1).max(1024).email(),residential_address:m.passthrough(),birth_date:t.string().trim().min(10).max(10),has_ownership:t.boolean(),has_control:t.boolean(),is_signer:t.boolean(),identifying_information:t.array(p.passthrough()).min(1),middle_name:t.string().trim().min(1).max(1024).optional(),transliterated_first_name:t.string().trim().min(1).max(256).optional(),transliterated_middle_name:t.string().trim().min(1).max(256).optional(),transliterated_last_name:t.string().trim().min(1).max(256).optional(),phone:t.string().trim().min(2).max(18).startsWith("+").optional(),transliterated_residential_address:m.passthrough().optional(),is_director:t.boolean().optional(),title:t.string().trim().min(1).max(1024).optional(),ownership_percentage:t.number().int().optional(),relationship_established_at:t.string().trim().min(10).max(10).optional(),nationality:t.string().min(3).max(3).optional(),verified_selfie_at:t.string().optional(),completed_customer_safety_check_at:t.string().optional(),documents:t.array(c.passthrough()).optional()}),_=t.object({market_identifier_code:t.string().trim().min(1),stock_number:t.string().trim(),ticket:t.string().trim()}),l=t.object({type:t.literal("individual"),first_name:t.string().trim().min(1).max(1024),last_name:t.string().trim().min(1).max(1024),email:t.string().trim().min(1).max(1024).email(),residential_address:m.passthrough(),birth_date:t.string().trim().min(10).max(10),identifying_information:t.array(p.passthrough()).min(1),ofac_screen:t.object({screened_at:t.string().regex(/^\d{4}-\d{2}-\d{2}$/,"Invalid date format (YYYY-MM-DD)"),result:t.enum(["passed"])}).optional(),kyc_screen:t.object({screened_at:t.string().regex(/^\d{4}-\d{2}-\d{2}$/,"Invalid date format (YYYY-MM-DD)"),result:t.enum(["passed"])}).optional(),signed_agreement_id:t.string().trim().min(1).max(1024).optional(),middle_name:t.string().trim().min(1).max(1024).optional(),transliterated_first_name:t.string().trim().min(1).max(256).optional(),transliterated_middle_name:t.string().trim().min(1).max(256).optional(),transliterated_last_name:t.string().trim().min(1).max(256).optional(),phone:t.string().trim().min(2).max(18).startsWith("+").optional(),transliterated_residential_address:m.passthrough().optional(),endorsements:t.array(t.string()).optional(),account_purpose:t.string().optional(),account_purpose_other:t.string().optional(),employment_status:t.string().optional(),expected_monthly_payments_usd:t.string().optional(),acting_as_intermediary:t.string().optional(),most_recent_occupation:t.string().optional(),source_of_funds:t.string().optional(),nationality:t.string().min(3).max(3).optional(),verified_selfie_at:t.string().optional(),completed_customer_safety_check_at:t.string().optional(),documents:t.array(c.passthrough()).optional(),has_signed_terms_of_service:t.boolean().optional()}),u=t.discriminatedUnion("provider",[t.object({provider:t.literal("bridge"),data:l.passthrough()}),t.object({provider:t.literal("bridge-sandbox"),data:l.passthrough()})]),b=t.object({user_id:t.string(),provider_user_id:t.string().optional(),status:a}),h=t.object({provider:n,full_name:t.string().optional(),email:t.string().email(),type:t.enum(["individual","business"]).optional(),endorsements:t.array(t.enum(["sepa"])).optional(),redirect_uri:t.string().optional()}).passthrough(),y=t.object({id:t.string(),customer_id:t.string(),full_name:t.string(),email:t.string(),kyc_link:t.string(),kyc_status:t.enum(["not_started","pending","incomplete","awaiting_ubo","manual_review","under_review","approved","rejected"]),rejection_reasons:t.array(t.object({developer_reason:t.string(),reason:t.string(),created_at:t.string()})),tos_link:t.string(),tos_status:t.enum(["pending","approved"]),persona_inquiry_type:t.string().optional(),created_at:t.string()}),f=t.enum(["usd","eur"]),j=t.object({provider:n}),x=t.object({accounts:t.array(t.object({id:t.string(),bank_name:t.string().optional(),currency:t.string(),account_type:t.string(),last_4:t.string().optional()}))}),v=t.object({street_line_1:t.string().trim().min(1),street_line_2:t.string().trim().min(1).optional(),city:t.string().trim().min(1),postal_code:t.string().trim().min(1).optional(),country:t.string().trim().min(3).max(3),state:t.string().trim().min(1).max(3).optional()}),k=t.object({account_number:t.string().trim().min(1),routing_number:t.string().trim().min(9).max(9),checking_or_savings:t.enum(["checking","savings"]).optional()}),w=t.object({account_number:t.string().trim().min(1),bic:t.string().trim().min(1),country:t.string().trim().min(3).max(3)}),Y=t.object({address:v,category:t.enum(["client","parent_company","subsidiary","supplier"]),purpose_of_funds:t.array(t.enum(["intra_group_transfer","invoice_for_goods_and_services"])).min(1),short_business_description:t.string().trim().min(1),account:w}),I=t.object({provider:n,account_owner_name:t.string().trim().min(3).max(256),bank_name:t.string().trim().min(3).max(256).optional(),currency:f,iban:w.passthrough().optional(),account:k.passthrough().optional(),swift:Y.passthrough().optional(),address:v.passthrough().optional(),first_name:t.string().trim().min(1).max(1024).optional(),last_name:t.string().trim().min(1).max(1024).optional()}).passthrough().superRefine(((i,n)=>{i.account||i.iban||i.swift||n.addIssue({code:t.ZodIssueCode.custom,message:"At least one of account, iban, or swift is required"}),!i.iban||i.first_name&&i.last_name||n.addIssue({code:t.ZodIssueCode.custom,message:"first_name and last_name are required when iban is provided"})})),q=t.object({id:t.string(),bank_name:t.string().optional(),currency:t.string(),account_type:t.string(),last_4:t.string().optional()}),D=t.enum(["sepa","ach_push","wire"]),M=t.enum(["ethereum","base","arbitrum","polygon","optimism"]),C=t.enum(["usdc"]),U=t.enum(["awaiting_funds","in_review","funds_received","payment_submitted","payment_processed","canceled","error","undeliverable","returned","refunded"]),W=t.object({amount:t.string().trim().min(1),provider:n,source:t.object({payment_rail:D,currency:f}).passthrough(),destination:t.object({chain:M,currency:C,to_address:i}).passthrough()}).passthrough(),Z=t.object({id:t.string(),status:U,deposit_instructions:t.object({amount:t.string(),currency:f,payment_rail:D,deposit_message:t.string().optional(),bank_name:t.string().optional(),bank_account_number:t.string().optional(),bank_routing_number:t.string().optional(),bank_beneficiary_name:t.string().optional(),bank_beneficiary_address:t.string().optional(),bank_address:t.string().optional(),iban:t.string().optional(),bic:t.string().optional(),account_holder_name:t.string().optional()})}),$=t.object({amount:t.string().trim().min(1),provider:n,source:t.object({currency:C,chain:M,from_address:i}).passthrough(),destination:t.object({currency:f,payment_rail:D,external_account_id:t.string().uuid()}).passthrough()}).passthrough(),z=t.object({id:t.string(),status:U,deposit_instructions:t.object({amount:t.string(),currency:C,chain:M,to_address:t.string(),from_address:t.string()})}),A=t.object({provider:n}).passthrough(),R=t.object({transactions:t.array(t.discriminatedUnion("type",[t.object({type:t.literal("onramp"),created_at:t.string(),destination:t.object({chain:t.string(),currency:t.string(),address:t.string(),privy_user_id:t.string().optional()}),receipt:t.object({final_amount:t.string(),transaction_hash:t.string().optional()}).optional(),is_sandbox:t.boolean()}).extend(Z.shape),t.object({type:t.literal("offramp"),created_at:t.string(),destination:t.object({payment_rail:t.string(),currency:t.string(),external_account_id:t.string()}),receipt:t.object({final_amount:t.string(),transaction_hash:t.string().optional()}).optional(),is_sandbox:t.boolean()}).extend(z.shape)]))});export{g as BridgeBusinessAssociatedPerson,m as BridgeKycAddress,l as BridgeKycData,c as BridgeKycDocument,p as BridgeKycIdentifyingInformation,h as BridgeKycInput,y as BridgeKycLinkResponse,d as BridgeRegulatedActivity,_ as BridgeTradedListings,v as FiatAccountAddress,w as FiatAccountIbanData,Y as FiatAccountSwiftData,k as FiatAccountUsAccountData,f as FiatCurrency,D as FiatPaymentRail,j as GetOnrampFiatAccountStatusInput,x as GetOnrampFiatAccountsResponse,o as GetOnrampKycStatusInput,s as GetOnrampKycStatusResponse,r as GetOnrampTermsOfServiceStatusInput,A as ListFiatTransactionsInput,R as ListFiatTransactionsResponse,$ as OfframpInput,z as OfframpResponse,C as OnrampAsset,M as OnrampChain,I as OnrampFiatAccountInput,q as OnrampFiatAccountResponse,W as OnrampInput,u as OnrampKycInput,b as OnrampKycResponse,a as OnrampKycStatus,n as OnrampProvider,Z as OnrampResponse,e as OnrampTermsOfServiceStatusResponse,U as OnrampTransferStatus};
