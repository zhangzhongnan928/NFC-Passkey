import{z as e}from"zod";import{ImportEmailAccountInput as t,ImportCustomJwtAccountInput as r}from"../user-import.mjs";import{BaseWalletApiCreateInput as i,WalletResponse as o}from"./wallets.mjs";import"../core.mjs";import"bs58";import"libphonenumber-js/max";import"viem";import"../embedded-wallet-creation.mjs";import"../user.mjs";import"../smart-wallet-config.mjs";import"../../constants/smart-wallets.mjs";import"@privy-io/api-base";import"../api.mjs";import"../transaction.mjs";import"./export.mjs";let s=i.omit({owner:!0,owner_id:!0,additional_signers:!0,authorization_key_ids:!0,authorization_threshold:!0});const a=e.object({wallets:e.array(s),primary_signer:e.object({subject_id:e.string()}).strict(),recovery_user:e.object({linked_accounts:e.array(e.union([t,r])).min(1).max(2).refine((e=>{if(2===e.length){let t=e.filter((e=>"email"===e.type)),r=e.filter((e=>"custom_auth"===e.type));return 1===t.length&&1===r.length}return!0}),{message:"Must have either one email and one custom JWT account, or one of each"})}).strict()}).strict(),n=e.object({wallets:e.array(o),recovery_user_id:e.string()}).strict(),m=e.object({user_jwt:e.string({required_error:"User JWT must be provided",invalid_type_error:"User JWT must be a string"}),encryption_type:e.literal("HPKE"),recipient_public_key:e.string({required_error:"Recipient public key must be provided",invalid_type_error:"Recipient public key must be a string"})}).strict(),p=e.object({encrypted_authorization_key:e.object({encryption_type:e.literal("HPKE"),encapsulated_key:e.string(),ciphertext:e.string()}),expires_at:e.number(),wallets:e.array(o)}).strict();export{m as UserSignersAuthenticateInput,p as UserSignersAuthenticateResponse,a as WalletsWithRecoveryRequest,n as WalletsWithRecoveryResponse};
