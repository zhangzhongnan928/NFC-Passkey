"use strict";var e=require("../../action/delegatedActions/utils.js"),t=require("../../wallet-api/get-wallet.js"),i=require("../../wallet-api/unified-wallet.js"),r=require("../../wallet-api/update-wallet.js");async function l(e){let{user:t}=await e.user.get();if(!t)throw Error("Could not refresh user");return{user:t}}function a(e){return(...t)=>e.embeddedWallet.signWithUserSigner(...t)}require("../../utils/getAllUserEmbeddedEthereumWallets.js"),require("../../utils/getAllUserEmbeddedSolanaWallets.js"),require("../../utils/getUserEmbeddedEthereumWallet.js"),require("../../utils/getUserEmbeddedSolanaWallet.js"),require("@privy-io/public-api"),require("canonicalize"),exports.addSessionSigners=async function({client:s,wallet:d,signers:n}){if("bitcoin-segwit"===d.chain_type||"bitcoin-taproot"===d.chain_type)throw Error("Bitcoin wallets do not support session signers");if(i.isUnifiedWallet(d)){if(0===n.length)throw Error("Must specify at least one signer to add.");let e={wallet_id:d.id},i=await t.getWallet(s,e);await r.updateWallet(s,e,a(s),{additional_signers:i.additional_signers.concat(n)})}else{if(d.delegated)return l(s);if(n.length>0)throw Error("This embedded wallet does not support specifying signers. If signing is enabled in the dashboard, signer will default to that key. Otherwise, no signatures will be required for the wallet.");let{user:t}=await s.user.get(),i=e.getRootWalletForDelegation(d,t);if(!i)throw Error("Unable to determine root address for delegated address.");await s.embeddedWallet.delegateWallets({rootWallet:{address:i.address,chainType:i.chain_type,imported:i.imported},delegatedWallets:[{address:d.address,chainType:d.chain_type,walletIndex:d.wallet_index}]})}return l(s)},exports.removeSessionSigners=async function({client:e,wallet:t}){if(i.isUnifiedWallet(t)){let i={wallet_id:t.id};await r.updateWallet(e,i,a(e),{additional_signers:[]})}else await e.delegated.revoke();return l(e)};
