import z$1, { z } from 'zod';

declare const AnalyticsEventInput: z.ZodObject<{
    event_name: z.ZodString;
    client_id: z.ZodNullable<z.ZodString>;
    payload: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
}, "strip", z.ZodTypeAny, {
    event_name: string;
    client_id: string | null;
    payload?: Record<string, any> | undefined;
}, {
    event_name: string;
    client_id: string | null;
    payload?: Record<string, any> | undefined;
}>;
interface PrivyAnalyticsEventInput extends z.infer<typeof AnalyticsEventInput> {
}

/**
 * Parses a JSON representation of a URL's path variables
 * for the `account_id`
 *
 * Throws an error if the `account_id` is not defined
 * or is not a valid, non-empty string.
 */
declare const AccountIdFromPath: z.ZodObject<{
    account_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    account_id: string;
}, {
    account_id: string;
}>;
/**
 * Parses a JSON representation of a URL's path variables
 * for the `app_id`
 *
 * Throws an error if the `app_id` is not defined
 * or is not a valid, non-empty string.
 */
declare const AppIdFromPath: z.ZodCatch<z.ZodEffects<z.ZodObject<{
    app_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    app_id: string;
}, {
    app_id: string;
}>, {
    app_id: string;
    appId: string;
}, {
    app_id: string;
}>>;
/**
 * Parse `cursor` and `limit` for paginating lists of results
 */
declare const Pagination: z.ZodObject<{
    cursor: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    limit: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    cursor?: string | undefined;
    limit?: number | undefined;
}, {
    cursor?: string | undefined;
    limit?: number | undefined;
}>;

declare const AppResponseSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    logo_url: z.ZodNullable<z.ZodString>;
    icon_url: z.ZodNullable<z.ZodString>;
    terms_and_conditions_url: z.ZodNullable<z.ZodString>;
    privacy_policy_url: z.ZodNullable<z.ZodString>;
    require_users_accept_terms: z.ZodNullable<z.ZodBoolean>;
    theme: z.ZodString;
    accent_color: z.ZodNullable<z.ZodString>;
    show_wallet_login_first: z.ZodBoolean;
    allowed_domains: z.ZodArray<z.ZodString, "many">;
    allowed_native_app_ids: z.ZodArray<z.ZodString, "many">;
    allowed_native_app_url_schemes: z.ZodArray<z.ZodString, "many">;
    wallet_auth: z.ZodBoolean;
    email_auth: z.ZodBoolean;
    sms_auth: z.ZodBoolean;
    google_oauth: z.ZodBoolean;
    twitter_oauth: z.ZodBoolean;
    discord_oauth: z.ZodBoolean;
    github_oauth: z.ZodBoolean;
    spotify_oauth: z.ZodBoolean;
    instagram_oauth: z.ZodBoolean;
    tiktok_oauth: z.ZodBoolean;
    linkedin_oauth: z.ZodBoolean;
    apple_oauth: z.ZodBoolean;
    farcaster_auth: z.ZodBoolean;
    passkey_auth: z.ZodBoolean;
    passkeys_for_signup_enabled: z.ZodBoolean;
    telegram_auth: z.ZodBoolean;
    guest_auth: z.ZodBoolean;
    solana_wallet_auth: z.ZodBoolean;
    custom_jwt_auth: z.ZodBoolean;
    disable_plus_emails: z.ZodBoolean;
    allowlist_enabled: z.ZodBoolean;
    allowlist_config: z.ZodObject<{
        error_title: z.ZodNullable<z.ZodString>;
        error_detail: z.ZodNullable<z.ZodString>;
        cta_text: z.ZodNullable<z.ZodString>;
        cta_link: z.ZodNullable<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        error_title: string | null;
        error_detail: string | null;
        cta_text: string | null;
        cta_link: string | null;
    }, {
        error_title: string | null;
        error_detail: string | null;
        cta_text: string | null;
        cta_link: string | null;
    }>;
    wallet_connect_cloud_project_id: z.ZodNullable<z.ZodString>;
    custom_api_url: z.ZodNullable<z.ZodString>;
    embedded_wallet_config: z.ZodObject<{
        create_on_login: z.ZodEnum<["users-without-wallets", "all-users", "off"]>;
        ethereum: z.ZodObject<{
            create_on_login: z.ZodEnum<["users-without-wallets", "all-users", "off"]>;
        }, "strip", z.ZodTypeAny, {
            create_on_login: "users-without-wallets" | "all-users" | "off";
        }, {
            create_on_login: "users-without-wallets" | "all-users" | "off";
        }>;
        solana: z.ZodObject<{
            create_on_login: z.ZodEnum<["users-without-wallets", "all-users", "off"]>;
        }, "strip", z.ZodTypeAny, {
            create_on_login: "users-without-wallets" | "all-users" | "off";
        }, {
            create_on_login: "users-without-wallets" | "all-users" | "off";
        }>;
        user_owned_recovery_options: z.ZodArray<z.ZodEnum<["user-passcode", "google-drive", "icloud"]>, "many">;
        require_user_owned_recovery_on_create: z.ZodOptional<z.ZodBoolean>;
        require_user_password_on_create: z.ZodOptional<z.ZodBoolean>;
    } & {
        mode: z.ZodEnum<["legacy-embedded-wallets-only", "user-controlled-server-wallets-only"]>;
    }, "strip", z.ZodTypeAny, {
        mode: "legacy-embedded-wallets-only" | "user-controlled-server-wallets-only";
        solana: {
            create_on_login: "users-without-wallets" | "all-users" | "off";
        };
        create_on_login: "users-without-wallets" | "all-users" | "off";
        ethereum: {
            create_on_login: "users-without-wallets" | "all-users" | "off";
        };
        user_owned_recovery_options: ("user-passcode" | "google-drive" | "icloud")[];
        require_user_owned_recovery_on_create?: boolean | undefined;
        require_user_password_on_create?: boolean | undefined;
    }, {
        mode: "legacy-embedded-wallets-only" | "user-controlled-server-wallets-only";
        solana: {
            create_on_login: "users-without-wallets" | "all-users" | "off";
        };
        create_on_login: "users-without-wallets" | "all-users" | "off";
        ethereum: {
            create_on_login: "users-without-wallets" | "all-users" | "off";
        };
        user_owned_recovery_options: ("user-passcode" | "google-drive" | "icloud")[];
        require_user_owned_recovery_on_create?: boolean | undefined;
        require_user_password_on_create?: boolean | undefined;
    }>;
    enforce_wallet_uis: z.ZodBoolean;
    legacy_wallet_ui_config: z.ZodBoolean;
    fiat_on_ramp_enabled: z.ZodBoolean;
    captcha_enabled: z.ZodBoolean;
    twitter_oauth_on_mobile_enabled: z.ZodBoolean;
    mfa_methods: z.ZodArray<z.ZodEnum<["sms", "totp", "passkey"]>, "many">;
    captcha_site_key: z.ZodOptional<z.ZodString>;
    verification_key: z.ZodString;
    telegram_auth_config: z.ZodOptional<z.ZodObject<{
        bot_id: z.ZodString;
        bot_name: z.ZodString;
        link_enabled: z.ZodBoolean;
        seamless_auth_enabled: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        bot_id: string;
        bot_name: string;
        link_enabled: boolean;
        seamless_auth_enabled: boolean;
    }, {
        bot_id: string;
        bot_name: string;
        link_enabled: boolean;
        seamless_auth_enabled: boolean;
    }>>;
    funding_config: z.ZodOptional<z.ZodObject<{
        default_recommended_currency: z.ZodObject<{
            chain: z.ZodString;
            asset: z.ZodOptional<z.ZodEnum<["native-currency", "USDC"]>>;
        }, "strip", z.ZodTypeAny, {
            chain: string;
            asset?: "native-currency" | "USDC" | undefined;
        }, {
            chain: string;
            asset?: "native-currency" | "USDC" | undefined;
        }>;
        default_recommended_amount: z.ZodString;
        methods: z.ZodArray<z.ZodEnum<["moonpay", "coinbase-onramp", "external"]>, "many">;
        options: z.ZodArray<z.ZodObject<{
            method: z.ZodString;
            provider: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            method: string;
            provider: string;
        }, {
            method: string;
            provider: string;
        }>, "many">;
        prompt_funding_on_wallet_creation: z.ZodBoolean;
        cross_chain_bridging_enabled: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        options: {
            method: string;
            provider: string;
        }[];
        default_recommended_currency: {
            chain: string;
            asset?: "native-currency" | "USDC" | undefined;
        };
        default_recommended_amount: string;
        methods: ("moonpay" | "coinbase-onramp" | "external")[];
        prompt_funding_on_wallet_creation: boolean;
        cross_chain_bridging_enabled: boolean;
    }, {
        options: {
            method: string;
            provider: string;
        }[];
        default_recommended_currency: {
            chain: string;
            asset?: "native-currency" | "USDC" | undefined;
        };
        default_recommended_amount: string;
        methods: ("moonpay" | "coinbase-onramp" | "external")[];
        prompt_funding_on_wallet_creation: boolean;
        cross_chain_bridging_enabled: boolean;
    }>>;
    max_linked_wallets_per_user: z.ZodNullable<z.ZodNumber>;
    farcaster_link_wallets_enabled: z.ZodBoolean;
    whatsapp_enabled: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
    logo_url: string | null;
    icon_url: string | null;
    terms_and_conditions_url: string | null;
    privacy_policy_url: string | null;
    require_users_accept_terms: boolean | null;
    theme: string;
    accent_color: string | null;
    show_wallet_login_first: boolean;
    allowed_domains: string[];
    allowed_native_app_ids: string[];
    allowed_native_app_url_schemes: string[];
    wallet_auth: boolean;
    email_auth: boolean;
    sms_auth: boolean;
    google_oauth: boolean;
    twitter_oauth: boolean;
    discord_oauth: boolean;
    github_oauth: boolean;
    spotify_oauth: boolean;
    instagram_oauth: boolean;
    tiktok_oauth: boolean;
    linkedin_oauth: boolean;
    apple_oauth: boolean;
    farcaster_auth: boolean;
    passkey_auth: boolean;
    passkeys_for_signup_enabled: boolean;
    telegram_auth: boolean;
    guest_auth: boolean;
    solana_wallet_auth: boolean;
    custom_jwt_auth: boolean;
    disable_plus_emails: boolean;
    allowlist_enabled: boolean;
    allowlist_config: {
        error_title: string | null;
        error_detail: string | null;
        cta_text: string | null;
        cta_link: string | null;
    };
    wallet_connect_cloud_project_id: string | null;
    custom_api_url: string | null;
    embedded_wallet_config: {
        mode: "legacy-embedded-wallets-only" | "user-controlled-server-wallets-only";
        solana: {
            create_on_login: "users-without-wallets" | "all-users" | "off";
        };
        create_on_login: "users-without-wallets" | "all-users" | "off";
        ethereum: {
            create_on_login: "users-without-wallets" | "all-users" | "off";
        };
        user_owned_recovery_options: ("user-passcode" | "google-drive" | "icloud")[];
        require_user_owned_recovery_on_create?: boolean | undefined;
        require_user_password_on_create?: boolean | undefined;
    };
    enforce_wallet_uis: boolean;
    legacy_wallet_ui_config: boolean;
    fiat_on_ramp_enabled: boolean;
    captcha_enabled: boolean;
    twitter_oauth_on_mobile_enabled: boolean;
    mfa_methods: ("sms" | "totp" | "passkey")[];
    verification_key: string;
    max_linked_wallets_per_user: number | null;
    farcaster_link_wallets_enabled: boolean;
    whatsapp_enabled: boolean;
    captcha_site_key?: string | undefined;
    telegram_auth_config?: {
        bot_id: string;
        bot_name: string;
        link_enabled: boolean;
        seamless_auth_enabled: boolean;
    } | undefined;
    funding_config?: {
        options: {
            method: string;
            provider: string;
        }[];
        default_recommended_currency: {
            chain: string;
            asset?: "native-currency" | "USDC" | undefined;
        };
        default_recommended_amount: string;
        methods: ("moonpay" | "coinbase-onramp" | "external")[];
        prompt_funding_on_wallet_creation: boolean;
        cross_chain_bridging_enabled: boolean;
    } | undefined;
}, {
    id: string;
    name: string;
    logo_url: string | null;
    icon_url: string | null;
    terms_and_conditions_url: string | null;
    privacy_policy_url: string | null;
    require_users_accept_terms: boolean | null;
    theme: string;
    accent_color: string | null;
    show_wallet_login_first: boolean;
    allowed_domains: string[];
    allowed_native_app_ids: string[];
    allowed_native_app_url_schemes: string[];
    wallet_auth: boolean;
    email_auth: boolean;
    sms_auth: boolean;
    google_oauth: boolean;
    twitter_oauth: boolean;
    discord_oauth: boolean;
    github_oauth: boolean;
    spotify_oauth: boolean;
    instagram_oauth: boolean;
    tiktok_oauth: boolean;
    linkedin_oauth: boolean;
    apple_oauth: boolean;
    farcaster_auth: boolean;
    passkey_auth: boolean;
    passkeys_for_signup_enabled: boolean;
    telegram_auth: boolean;
    guest_auth: boolean;
    solana_wallet_auth: boolean;
    custom_jwt_auth: boolean;
    disable_plus_emails: boolean;
    allowlist_enabled: boolean;
    allowlist_config: {
        error_title: string | null;
        error_detail: string | null;
        cta_text: string | null;
        cta_link: string | null;
    };
    wallet_connect_cloud_project_id: string | null;
    custom_api_url: string | null;
    embedded_wallet_config: {
        mode: "legacy-embedded-wallets-only" | "user-controlled-server-wallets-only";
        solana: {
            create_on_login: "users-without-wallets" | "all-users" | "off";
        };
        create_on_login: "users-without-wallets" | "all-users" | "off";
        ethereum: {
            create_on_login: "users-without-wallets" | "all-users" | "off";
        };
        user_owned_recovery_options: ("user-passcode" | "google-drive" | "icloud")[];
        require_user_owned_recovery_on_create?: boolean | undefined;
        require_user_password_on_create?: boolean | undefined;
    };
    enforce_wallet_uis: boolean;
    legacy_wallet_ui_config: boolean;
    fiat_on_ramp_enabled: boolean;
    captcha_enabled: boolean;
    twitter_oauth_on_mobile_enabled: boolean;
    mfa_methods: ("sms" | "totp" | "passkey")[];
    verification_key: string;
    max_linked_wallets_per_user: number | null;
    farcaster_link_wallets_enabled: boolean;
    whatsapp_enabled: boolean;
    captcha_site_key?: string | undefined;
    telegram_auth_config?: {
        bot_id: string;
        bot_name: string;
        link_enabled: boolean;
        seamless_auth_enabled: boolean;
    } | undefined;
    funding_config?: {
        options: {
            method: string;
            provider: string;
        }[];
        default_recommended_currency: {
            chain: string;
            asset?: "native-currency" | "USDC" | undefined;
        };
        default_recommended_amount: string;
        methods: ("moonpay" | "coinbase-onramp" | "external")[];
        prompt_funding_on_wallet_creation: boolean;
        cross_chain_bridging_enabled: boolean;
    } | undefined;
}>;
interface PrivyAppResponse extends z.output<typeof AppResponseSchema> {
}

/**
 * Utility type that takes an object type and makes the hover overlay more readable.
 *
 * [Learn more](https://www.totaltypescript.com/concepts/the-prettify-helper)
 */
type Prettify<T> = {
    [K in keyof T]: T[K];
} & {};

declare const EmbeddedWalletInputSchema: z.ZodObject<{
    /**
     * Whether to create embedded wallets on login. Note that this still requires distinct API
     * calls, rather than the server creating one on the /authenticate call.
     *
     * Default: 'users-without-wallets'
     *
     * Overridable from client.
     * @deprecated
     */
    create_on_login: z.ZodEnum<["users-without-wallets", "all-users", "off"]>;
    /**
     * Ethereum-specific config
     */
    ethereum: z.ZodObject<{
        /**
         * Whether to create ethereum embedded wallets on login. Note that this still requires distinct API
         * calls, rather than the server creating one on the /authenticate call.
         *
         * Default: 'users-without-wallets'
         *
         * Overridable from client.
         */
        create_on_login: z.ZodEnum<["users-without-wallets", "all-users", "off"]>;
    }, "strip", z.ZodTypeAny, {
        create_on_login: "users-without-wallets" | "all-users" | "off";
    }, {
        create_on_login: "users-without-wallets" | "all-users" | "off";
    }>;
    /**
     * Solana-specific config
     */
    solana: z.ZodObject<{
        /**
         * Whether to create solana embedded wallets on login. Note that this still requires distinct API
         * calls, rather than the server creating one on the /authenticate call.
         *
         * Default: 'users-without-wallets'
         *
         * Overridable from client.
         */
        create_on_login: z.ZodEnum<["users-without-wallets", "all-users", "off"]>;
    }, "strip", z.ZodTypeAny, {
        create_on_login: "users-without-wallets" | "all-users" | "off";
    }, {
        create_on_login: "users-without-wallets" | "all-users" | "off";
    }>;
    /**
     * Will be one or more of `user-passcode` | `google-drive` | `icloud`
     * - all enabled methods other than `password` require prior configuration
     */
    user_owned_recovery_options: z.ZodArray<z.ZodEnum<["user-passcode", "google-drive", "icloud"]>, "many">;
    /**
     * If true, this will prompt the user use one of the enabled recovery methods
     * to secure the recovery share of their embedded wallet.
     *
     * Otherwise (the default), Privy will secure the recovery share, and the embedded wallet
     * will be created without showing any UIs to the user.
     *
     * Overridable from client.
     */
    require_user_owned_recovery_on_create: z.ZodOptional<z.ZodBoolean>;
    /**
     * @deprecated use `require_user_owned_recovery_on_create`
     *
     * If true, this will prompt the user to enter a password to secure the recovery share of
     * their embedded wallet.
     *
     * Otherwise (the default), Privy will secure the recovery share, and the embedded wallet
     * will be created without showing any UIs to the user.
     *
     * Overridable from client.
     */
    require_user_password_on_create: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    solana: {
        create_on_login: "users-without-wallets" | "all-users" | "off";
    };
    create_on_login: "users-without-wallets" | "all-users" | "off";
    ethereum: {
        create_on_login: "users-without-wallets" | "all-users" | "off";
    };
    user_owned_recovery_options: ("user-passcode" | "google-drive" | "icloud")[];
    require_user_owned_recovery_on_create?: boolean | undefined;
    require_user_password_on_create?: boolean | undefined;
}, {
    solana: {
        create_on_login: "users-without-wallets" | "all-users" | "off";
    };
    create_on_login: "users-without-wallets" | "all-users" | "off";
    ethereum: {
        create_on_login: "users-without-wallets" | "all-users" | "off";
    };
    user_owned_recovery_options: ("user-passcode" | "google-drive" | "icloud")[];
    require_user_owned_recovery_on_create?: boolean | undefined;
    require_user_password_on_create?: boolean | undefined;
}>;
declare const EmbeddedWalletConfigSchema: z.ZodObject<{
    /**
     * Whether to create embedded wallets on login. Note that this still requires distinct API
     * calls, rather than the server creating one on the /authenticate call.
     *
     * Default: 'users-without-wallets'
     *
     * Overridable from client.
     * @deprecated
     */
    create_on_login: z.ZodEnum<["users-without-wallets", "all-users", "off"]>;
    /**
     * Ethereum-specific config
     */
    ethereum: z.ZodObject<{
        /**
         * Whether to create ethereum embedded wallets on login. Note that this still requires distinct API
         * calls, rather than the server creating one on the /authenticate call.
         *
         * Default: 'users-without-wallets'
         *
         * Overridable from client.
         */
        create_on_login: z.ZodEnum<["users-without-wallets", "all-users", "off"]>;
    }, "strip", z.ZodTypeAny, {
        create_on_login: "users-without-wallets" | "all-users" | "off";
    }, {
        create_on_login: "users-without-wallets" | "all-users" | "off";
    }>;
    /**
     * Solana-specific config
     */
    solana: z.ZodObject<{
        /**
         * Whether to create solana embedded wallets on login. Note that this still requires distinct API
         * calls, rather than the server creating one on the /authenticate call.
         *
         * Default: 'users-without-wallets'
         *
         * Overridable from client.
         */
        create_on_login: z.ZodEnum<["users-without-wallets", "all-users", "off"]>;
    }, "strip", z.ZodTypeAny, {
        create_on_login: "users-without-wallets" | "all-users" | "off";
    }, {
        create_on_login: "users-without-wallets" | "all-users" | "off";
    }>;
    /**
     * Will be one or more of `user-passcode` | `google-drive` | `icloud`
     * - all enabled methods other than `password` require prior configuration
     */
    user_owned_recovery_options: z.ZodArray<z.ZodEnum<["user-passcode", "google-drive", "icloud"]>, "many">;
    /**
     * If true, this will prompt the user use one of the enabled recovery methods
     * to secure the recovery share of their embedded wallet.
     *
     * Otherwise (the default), Privy will secure the recovery share, and the embedded wallet
     * will be created without showing any UIs to the user.
     *
     * Overridable from client.
     */
    require_user_owned_recovery_on_create: z.ZodOptional<z.ZodBoolean>;
    /**
     * @deprecated use `require_user_owned_recovery_on_create`
     *
     * If true, this will prompt the user to enter a password to secure the recovery share of
     * their embedded wallet.
     *
     * Otherwise (the default), Privy will secure the recovery share, and the embedded wallet
     * will be created without showing any UIs to the user.
     *
     * Overridable from client.
     */
    require_user_password_on_create: z.ZodOptional<z.ZodBoolean>;
} & {
    mode: z.ZodEnum<["legacy-embedded-wallets-only", "user-controlled-server-wallets-only"]>;
}, "strip", z.ZodTypeAny, {
    mode: "legacy-embedded-wallets-only" | "user-controlled-server-wallets-only";
    solana: {
        create_on_login: "users-without-wallets" | "all-users" | "off";
    };
    create_on_login: "users-without-wallets" | "all-users" | "off";
    ethereum: {
        create_on_login: "users-without-wallets" | "all-users" | "off";
    };
    user_owned_recovery_options: ("user-passcode" | "google-drive" | "icloud")[];
    require_user_owned_recovery_on_create?: boolean | undefined;
    require_user_password_on_create?: boolean | undefined;
}, {
    mode: "legacy-embedded-wallets-only" | "user-controlled-server-wallets-only";
    solana: {
        create_on_login: "users-without-wallets" | "all-users" | "off";
    };
    create_on_login: "users-without-wallets" | "all-users" | "off";
    ethereum: {
        create_on_login: "users-without-wallets" | "all-users" | "off";
    };
    user_owned_recovery_options: ("user-passcode" | "google-drive" | "icloud")[];
    require_user_owned_recovery_on_create?: boolean | undefined;
    require_user_password_on_create?: boolean | undefined;
}>;
type EmbeddedWalletConfig = Prettify<z.infer<typeof EmbeddedWalletConfigSchema>>;
declare const TelegramAuthConfigSchema: z.ZodObject<{
    bot_id: z.ZodString;
    bot_name: z.ZodString;
    link_enabled: z.ZodBoolean;
    seamless_auth_enabled: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    bot_id: string;
    bot_name: string;
    link_enabled: boolean;
    seamless_auth_enabled: boolean;
}, {
    bot_id: string;
    bot_name: string;
    link_enabled: boolean;
    seamless_auth_enabled: boolean;
}>;
declare const FundingMethodEnum: z.ZodEnum<["moonpay", "coinbase-onramp", "external"]>;
declare const FundingMethodArraySchema: z.ZodArray<z.ZodEnum<["moonpay", "coinbase-onramp", "external"]>, "many">;
type FundingMethod = z.infer<typeof FundingMethodEnum>;
declare const FundingConfigResponseSchema: z.ZodObject<{
    default_recommended_currency: z.ZodObject<{
        chain: z.ZodString;
        asset: z.ZodOptional<z.ZodEnum<["native-currency", "USDC"]>>;
    }, "strip", z.ZodTypeAny, {
        chain: string;
        asset?: "native-currency" | "USDC" | undefined;
    }, {
        chain: string;
        asset?: "native-currency" | "USDC" | undefined;
    }>;
    default_recommended_amount: z.ZodString;
    methods: z.ZodArray<z.ZodEnum<["moonpay", "coinbase-onramp", "external"]>, "many">;
    options: z.ZodArray<z.ZodObject<{
        method: z.ZodString;
        provider: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        method: string;
        provider: string;
    }, {
        method: string;
        provider: string;
    }>, "many">;
    prompt_funding_on_wallet_creation: z.ZodBoolean;
    cross_chain_bridging_enabled: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    options: {
        method: string;
        provider: string;
    }[];
    default_recommended_currency: {
        chain: string;
        asset?: "native-currency" | "USDC" | undefined;
    };
    default_recommended_amount: string;
    methods: ("moonpay" | "coinbase-onramp" | "external")[];
    prompt_funding_on_wallet_creation: boolean;
    cross_chain_bridging_enabled: boolean;
}, {
    options: {
        method: string;
        provider: string;
    }[];
    default_recommended_currency: {
        chain: string;
        asset?: "native-currency" | "USDC" | undefined;
    };
    default_recommended_amount: string;
    methods: ("moonpay" | "coinbase-onramp" | "external")[];
    prompt_funding_on_wallet_creation: boolean;
    cross_chain_bridging_enabled: boolean;
}>;
type FundingConfig = Prettify<z.infer<typeof FundingConfigResponseSchema>>;

declare const CoinbaseOnRampInitInput: z.ZodUnion<[z.ZodObject<{
    addresses: z.ZodArray<z.ZodObject<{
        address: z.ZodEffects<z.ZodString, string, string>;
        blockchains: z.ZodArray<z.ZodEnum<["ethereum", "bitcoin", "base", "avacchain", "optimism", "solana", "polygon", "arbitrum", "stellar"]>, "many">;
    }, "strip", z.ZodTypeAny, {
        address: string;
        blockchains: ("solana" | "ethereum" | "bitcoin" | "base" | "avacchain" | "optimism" | "polygon" | "arbitrum" | "stellar")[];
    }, {
        address: string;
        blockchains: ("solana" | "ethereum" | "bitcoin" | "base" | "avacchain" | "optimism" | "polygon" | "arbitrum" | "stellar")[];
    }>, "many">;
    assets: z.ZodOptional<z.ZodArray<z.ZodEffects<z.ZodEnum<["eth", "ETH", "USDC"]>, string, "USDC" | "eth" | "ETH">, "many">>;
}, "strip", z.ZodTypeAny, {
    addresses: {
        address: string;
        blockchains: ("solana" | "ethereum" | "bitcoin" | "base" | "avacchain" | "optimism" | "polygon" | "arbitrum" | "stellar")[];
    }[];
    assets?: string[] | undefined;
}, {
    addresses: {
        address: string;
        blockchains: ("solana" | "ethereum" | "bitcoin" | "base" | "avacchain" | "optimism" | "polygon" | "arbitrum" | "stellar")[];
    }[];
    assets?: ("USDC" | "eth" | "ETH")[] | undefined;
}>, z.ZodObject<{
    addresses: z.ZodArray<z.ZodObject<{
        address: z.ZodEffects<z.ZodString, string, string>;
        blockchains: z.ZodArray<z.ZodEnum<["ethereum", "bitcoin", "base", "avacchain", "optimism", "solana", "polygon", "arbitrum", "stellar"]>, "many">;
    }, "strip", z.ZodTypeAny, {
        address: string;
        blockchains: ("solana" | "ethereum" | "bitcoin" | "base" | "avacchain" | "optimism" | "polygon" | "arbitrum" | "stellar")[];
    }, {
        address: string;
        blockchains: ("solana" | "ethereum" | "bitcoin" | "base" | "avacchain" | "optimism" | "polygon" | "arbitrum" | "stellar")[];
    }>, "many">;
    assets: z.ZodOptional<z.ZodArray<z.ZodEffects<z.ZodEnum<["SOL", "USDC"]>, string, "USDC" | "SOL">, "many">>;
}, "strip", z.ZodTypeAny, {
    addresses: {
        address: string;
        blockchains: ("solana" | "ethereum" | "bitcoin" | "base" | "avacchain" | "optimism" | "polygon" | "arbitrum" | "stellar")[];
    }[];
    assets?: string[] | undefined;
}, {
    addresses: {
        address: string;
        blockchains: ("solana" | "ethereum" | "bitcoin" | "base" | "avacchain" | "optimism" | "polygon" | "arbitrum" | "stellar")[];
    }[];
    assets?: ("USDC" | "SOL")[] | undefined;
}>]>;
type CoinbaseOnRampInitInput = z.infer<typeof CoinbaseOnRampInitInput>;
type PrivyCoinbaseOnRampInitInput = CoinbaseOnRampInitInput;
declare const CoinbaseOnRampInitResponse: z.ZodObject<{
    app_id: z.ZodString;
    session_token: z.ZodString;
    channel_id: z.ZodString;
    partner_user_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    app_id: string;
    session_token: string;
    channel_id: string;
    partner_user_id: string;
}, {
    app_id: string;
    session_token: string;
    channel_id: string;
    partner_user_id: string;
}>;
interface PrivyCoinbaseOnRampInitResponse extends z.infer<typeof CoinbaseOnRampInitResponse> {
}
declare const CoinbaseOnRampStatusResponse: z.ZodObject<{
    status: z.ZodEnum<["pending", "success", "failure"]>;
}, "strip", z.ZodTypeAny, {
    status: "pending" | "success" | "failure";
}, {
    status: "pending" | "success" | "failure";
}>;
interface PrivyCoinbaseOnRampStatusResponse extends z.infer<typeof CoinbaseOnRampStatusResponse> {
}

/**
 * Parses a user ID string, removes the 'did:privy:'
 * prefix, and returns it.
 *
 * Throws an error if no such key is found or the object
 * is not a valid, non-empty string.
 */
declare const UserId: z.ZodEffects<z.ZodString, string, string>;
/**
 * Parses a string and checks that it is a valid email address.
 *
 * Transforms email to lowercase both the handle and domain, regardless
 * of the casing entered by the user
 *
 * Throws an error if the input is not a string or is
 * not a valid email
 */
declare const Email: z.ZodEffects<z.ZodString, string, string>;
/**
 * Parses a verification code and checks that it is a valid string of length 6.
 */
declare const PasswordlessCode: z.ZodString;
/**
 * Parses a string, checks that it is a valid Ethereum address,
 * and returns a normalized address that is checksummed per
 * EIP-55.
 *
 * See https://zod.dev/?id=validating-during-transform for how to do custom
 * validation and transformation on inputs.
 *
 * Throws an error if the input is not a string or is not a valid
 * Ethereum address.
 */
declare const WalletAddress: z.ZodEffects<z.ZodString, string, string>;
/**
 * Parses a string, checks that it is a valid Solana address,
 *
 * Throws an error if the input is not a string or is not a valid
 * Solana address.
 */
declare const SolanaWalletAddress: z.ZodEffects<z.ZodString, string, string>;
/**
 * Parses a phone number string and returns a normalized version.
 * Currently only accepts U.S. phone numbers.
 *
 * Throws an error if input is not a string or not a valid US
 * phone number.
 */
declare const PhoneNumber: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>;
/**
 * Accepts a phone number in various formats and outputs in E.164 format, or
 * if a phone number could not be parsed - returns `undefined`
 */
declare function normalizePhoneNumber(inputPhoneNumber: string): string | undefined;
/**
 * Check if the address is an EIP-55 address.
 */
declare function isValidAddress(address: string | null | undefined): boolean;
/**
 * Get the normalized EIP-55 address with checksum (case-sensitive address).
 * This is a thin pass-through to the viem util.
 *
 * ERC / EIP 55 reference:
 * https://github.com/ethereum/ercs/blob/master/ERCS/erc-55.md
 *
 * @param address EIP-55 address
 * @returns EIP-55 checksummed address
 */
declare function normalizeEthereumAddress(address: string | null | undefined): string | undefined;
/**
 * For use with authenticate endpoints - if signup is disallowed, calls
 * to the /authenticate endpoint will fail if the user does not already exist.
 */
declare const AuthenticateMode: z.ZodObject<{
    mode: z.ZodOptional<z.ZodEnum<["no-signup", "login-or-sign-up"]>>;
}, "strip", z.ZodTypeAny, {
    mode?: "no-signup" | "login-or-sign-up" | undefined;
}, {
    mode?: "no-signup" | "login-or-sign-up" | undefined;
}>;

declare const CrossAppConnectionsResponse: z.ZodObject<{
    connections: z.ZodArray<z.ZodObject<{
        provider_app_id: z.ZodString;
        provider_app_name: z.ZodString;
        provider_app_icon_url: z.ZodNullable<z.ZodString>;
        provider_app_custom_api_url: z.ZodNullable<z.ZodString>;
        read_only: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        provider_app_id: string;
        provider_app_name: string;
        provider_app_icon_url: string | null;
        provider_app_custom_api_url: string | null;
        read_only: boolean;
    }, {
        provider_app_id: string;
        provider_app_name: string;
        provider_app_icon_url: string | null;
        provider_app_custom_api_url: string | null;
        read_only: boolean;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    connections: {
        provider_app_id: string;
        provider_app_name: string;
        provider_app_icon_url: string | null;
        provider_app_custom_api_url: string | null;
        read_only: boolean;
    }[];
}, {
    connections: {
        provider_app_id: string;
        provider_app_name: string;
        provider_app_icon_url: string | null;
        provider_app_custom_api_url: string | null;
        read_only: boolean;
    }[];
}>;
interface PrivyCrossAppConnectionsResponse extends z.infer<typeof CrossAppConnectionsResponse> {
}

declare const SUPPORTED_CHAIN_TYPES: readonly ["evm", "solana"];
type SupportedChainType = (typeof SUPPORTED_CHAIN_TYPES)[number];
declare const Currency: z$1.ZodObject<{
    /**
     * CAIP-2 formatted chain ID
     * Resource: https://github.com/ChainAgnostic/CAIPs/blob/main/CAIPs/caip-2.md
     */
    chain: z$1.ZodString;
    asset: z$1.ZodOptional<z$1.ZodEnum<["native-currency", "USDC"]>>;
}, "strip", z$1.ZodTypeAny, {
    chain: string;
    asset?: "native-currency" | "USDC" | undefined;
}, {
    chain: string;
    asset?: "native-currency" | "USDC" | undefined;
}>;

declare const AuthenticateJwtInput: z$1.ZodObject<{
    /** A JWT from the custom authentication provider */
    token: z$1.ZodOptional<z$1.ZodString>;
} & {
    mode: z$1.ZodOptional<z$1.ZodEnum<["no-signup", "login-or-sign-up"]>>;
}, "strip", z$1.ZodTypeAny, {
    mode?: "no-signup" | "login-or-sign-up" | undefined;
    token?: string | undefined;
}, {
    mode?: "no-signup" | "login-or-sign-up" | undefined;
    token?: string | undefined;
}>;
interface PrivyAuthenticateJwtInput extends z$1.infer<typeof AuthenticateJwtInput> {
}
declare const LinkJwtInput: z$1.ZodObject<{
    /** A JWT from the custom authentication provider */
    token: z$1.ZodOptional<z$1.ZodString>;
}, "strip", z$1.ZodTypeAny, {
    token?: string | undefined;
}, {
    token?: string | undefined;
}>;
interface PrivyLinkJwtInput extends z$1.infer<typeof LinkJwtInput> {
}

declare const VerifyEmailInput: z.ZodObject<{
    code: z.ZodString;
    email: z.ZodEffects<z.ZodString, string, string>;
}, "strip", z.ZodTypeAny, {
    code: string;
    email: string;
}, {
    code: string;
    email: string;
}>;
interface PrivyVerifyEmailInput extends z.infer<typeof VerifyEmailInput> {
}
declare const AuthenticateEmailInput: z.ZodObject<{
    code: z.ZodString;
    email: z.ZodEffects<z.ZodString, string, string>;
} & {
    mode: z.ZodOptional<z.ZodEnum<["no-signup", "login-or-sign-up"]>>;
}, "strip", z.ZodTypeAny, {
    code: string;
    email: string;
    mode?: "no-signup" | "login-or-sign-up" | undefined;
}, {
    code: string;
    email: string;
    mode?: "no-signup" | "login-or-sign-up" | undefined;
}>;
interface PrivyAuthenticateEmailInput extends z.infer<typeof AuthenticateEmailInput> {
}
declare const InitEmailInput: z.ZodObject<{
    email: z.ZodEffects<z.ZodString, string, string>;
    token: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    email: string;
    token?: string | undefined;
}, {
    email: string;
    token?: string | undefined;
}>;
interface PrivyInitEmailInput extends z.infer<typeof InitEmailInput> {
}
declare const UnlinkEmailInput: z.ZodObject<{
    address: z.ZodEffects<z.ZodString, string, string>;
}, "strip", z.ZodTypeAny, {
    address: string;
}, {
    address: string;
}>;
interface PrivyUnlinkEmailInput extends z.infer<typeof UnlinkEmailInput> {
}
declare const UpdateEmailInput: z.ZodObject<{
    oldAddress: z.ZodEffects<z.ZodString, string, string>;
    newAddress: z.ZodEffects<z.ZodString, string, string>;
    code: z.ZodString;
}, "strip", z.ZodTypeAny, {
    code: string;
    oldAddress: string;
    newAddress: string;
}, {
    code: string;
    oldAddress: string;
    newAddress: string;
}>;
interface PrivyUpdateEmailInput extends z.infer<typeof UpdateEmailInput> {
}
declare const TransferEmailInput: z.ZodObject<{
    nonce: z.ZodString;
} & {
    email: z.ZodEffects<z.ZodString, string, string>;
}, "strip", z.ZodTypeAny, {
    nonce: string;
    email: string;
}, {
    nonce: string;
    email: string;
}>;
interface PrivyTransferEmailInput extends z.infer<typeof TransferEmailInput> {
}

declare const JsonWebKey: z.ZodObject<{
    kty: z.ZodString;
    use: z.ZodOptional<z.ZodEnum<["sig", "enc"]>>;
    key_ops: z.ZodOptional<z.ZodArray<z.ZodEnum<["sign", "verify", "encrypt", "decrypt", "wrapKey", "unwrapKey", "deriveKey", "deriveBits"]>, "many">>;
    alg: z.ZodEnum<["RS256", "ES256"]>;
    kid: z.ZodOptional<z.ZodString>;
    x5u: z.ZodOptional<z.ZodString>;
    x5c: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    x5t: z.ZodOptional<z.ZodString>;
    'x5t#S256': z.ZodOptional<z.ZodString>;
    n: z.ZodOptional<z.ZodString>;
    e: z.ZodOptional<z.ZodString>;
    d: z.ZodOptional<z.ZodString>;
    crv: z.ZodOptional<z.ZodString>;
    x: z.ZodOptional<z.ZodString>;
    y: z.ZodOptional<z.ZodString>;
    xvalue: z.ZodOptional<z.ZodString>;
    yvalue: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    kty: string;
    alg: "RS256" | "ES256";
    use?: "sig" | "enc" | undefined;
    key_ops?: ("sign" | "verify" | "encrypt" | "decrypt" | "wrapKey" | "unwrapKey" | "deriveKey" | "deriveBits")[] | undefined;
    kid?: string | undefined;
    x5u?: string | undefined;
    x5c?: string[] | undefined;
    x5t?: string | undefined;
    'x5t#S256'?: string | undefined;
    n?: string | undefined;
    e?: string | undefined;
    d?: string | undefined;
    crv?: string | undefined;
    x?: string | undefined;
    y?: string | undefined;
    xvalue?: string | undefined;
    yvalue?: string | undefined;
}, {
    kty: string;
    alg: "RS256" | "ES256";
    use?: "sig" | "enc" | undefined;
    key_ops?: ("sign" | "verify" | "encrypt" | "decrypt" | "wrapKey" | "unwrapKey" | "deriveKey" | "deriveBits")[] | undefined;
    kid?: string | undefined;
    x5u?: string | undefined;
    x5c?: string[] | undefined;
    x5t?: string | undefined;
    'x5t#S256'?: string | undefined;
    n?: string | undefined;
    e?: string | undefined;
    d?: string | undefined;
    crv?: string | undefined;
    x?: string | undefined;
    y?: string | undefined;
    xvalue?: string | undefined;
    yvalue?: string | undefined;
}>;
declare const JsonWebKeySet: z.ZodObject<{
    keys: z.ZodArray<z.ZodObject<{
        kty: z.ZodString;
        use: z.ZodOptional<z.ZodEnum<["sig", "enc"]>>;
        key_ops: z.ZodOptional<z.ZodArray<z.ZodEnum<["sign", "verify", "encrypt", "decrypt", "wrapKey", "unwrapKey", "deriveKey", "deriveBits"]>, "many">>;
        alg: z.ZodEnum<["RS256", "ES256"]>;
        kid: z.ZodOptional<z.ZodString>;
        x5u: z.ZodOptional<z.ZodString>;
        x5c: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        x5t: z.ZodOptional<z.ZodString>;
        'x5t#S256': z.ZodOptional<z.ZodString>;
        n: z.ZodOptional<z.ZodString>;
        e: z.ZodOptional<z.ZodString>;
        d: z.ZodOptional<z.ZodString>;
        crv: z.ZodOptional<z.ZodString>;
        x: z.ZodOptional<z.ZodString>;
        y: z.ZodOptional<z.ZodString>;
        xvalue: z.ZodOptional<z.ZodString>;
        yvalue: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        kty: string;
        alg: "RS256" | "ES256";
        use?: "sig" | "enc" | undefined;
        key_ops?: ("sign" | "verify" | "encrypt" | "decrypt" | "wrapKey" | "unwrapKey" | "deriveKey" | "deriveBits")[] | undefined;
        kid?: string | undefined;
        x5u?: string | undefined;
        x5c?: string[] | undefined;
        x5t?: string | undefined;
        'x5t#S256'?: string | undefined;
        n?: string | undefined;
        e?: string | undefined;
        d?: string | undefined;
        crv?: string | undefined;
        x?: string | undefined;
        y?: string | undefined;
        xvalue?: string | undefined;
        yvalue?: string | undefined;
    }, {
        kty: string;
        alg: "RS256" | "ES256";
        use?: "sig" | "enc" | undefined;
        key_ops?: ("sign" | "verify" | "encrypt" | "decrypt" | "wrapKey" | "unwrapKey" | "deriveKey" | "deriveBits")[] | undefined;
        kid?: string | undefined;
        x5u?: string | undefined;
        x5c?: string[] | undefined;
        x5t?: string | undefined;
        'x5t#S256'?: string | undefined;
        n?: string | undefined;
        e?: string | undefined;
        d?: string | undefined;
        crv?: string | undefined;
        x?: string | undefined;
        y?: string | undefined;
        xvalue?: string | undefined;
        yvalue?: string | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    keys: {
        kty: string;
        alg: "RS256" | "ES256";
        use?: "sig" | "enc" | undefined;
        key_ops?: ("sign" | "verify" | "encrypt" | "decrypt" | "wrapKey" | "unwrapKey" | "deriveKey" | "deriveBits")[] | undefined;
        kid?: string | undefined;
        x5u?: string | undefined;
        x5c?: string[] | undefined;
        x5t?: string | undefined;
        'x5t#S256'?: string | undefined;
        n?: string | undefined;
        e?: string | undefined;
        d?: string | undefined;
        crv?: string | undefined;
        x?: string | undefined;
        y?: string | undefined;
        xvalue?: string | undefined;
        yvalue?: string | undefined;
    }[];
}, {
    keys: {
        kty: string;
        alg: "RS256" | "ES256";
        use?: "sig" | "enc" | undefined;
        key_ops?: ("sign" | "verify" | "encrypt" | "decrypt" | "wrapKey" | "unwrapKey" | "deriveKey" | "deriveBits")[] | undefined;
        kid?: string | undefined;
        x5u?: string | undefined;
        x5c?: string[] | undefined;
        x5t?: string | undefined;
        'x5t#S256'?: string | undefined;
        n?: string | undefined;
        e?: string | undefined;
        d?: string | undefined;
        crv?: string | undefined;
        x?: string | undefined;
        y?: string | undefined;
        xvalue?: string | undefined;
        yvalue?: string | undefined;
    }[];
}>;

/**
 * Proxy for the Farcaster Connect init response as defined in FIP-11
 * https://github.com/farcasterxyz/protocol/discussions/110
 *
 * We use this response object for our primary init endpoint because
 * that's all the user needs to know to connect to the relay and request
 * a signature from their Farcaster app.
 */
declare const FarcasterConnectInitResponse: z.ZodObject<{
    channel_token: z.ZodString;
    connect_uri: z.ZodString;
}, "strip", z.ZodTypeAny, {
    channel_token: string;
    connect_uri: string;
}, {
    channel_token: string;
    connect_uri: string;
}>;
interface PrivyFarcasterConnectInitResponse extends z.infer<typeof FarcasterConnectInitResponse> {
}
/**
 * Proxy for the Farcaster Connect completed status response as defined in FIP-11
 * https://github.com/farcasterxyz/protocol/discussions/110
 */
declare const FarcasterConnectStatusCompletedResponse: z.ZodObject<{
    state: z.ZodLiteral<"completed">;
    nonce: z.ZodString;
    message: z.ZodString;
    signature: z.ZodString;
    fid: z.ZodNumber;
    username: z.ZodString;
    display_name: z.ZodString;
    bio: z.ZodString;
    pfp_url: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
    nonce: string;
    state: "completed";
    signature: string;
    fid: number;
    username: string;
    display_name: string;
    bio: string;
    pfp_url: string;
}, {
    message: string;
    nonce: string;
    state: "completed";
    signature: string;
    fid: number;
    username: string;
    display_name: string;
    bio: string;
    pfp_url: string;
}>;
interface PrivyFarcasterConnectStatusCompletedResponse extends z.infer<typeof FarcasterConnectStatusCompletedResponse> {
}
/**
 * Proxy for the Farcaster Connect pending status response as defined in FIP-11
 * https://github.com/farcasterxyz/protocol/discussions/110
 */
declare const FarcasterConnectStatusPendingResponse: z.ZodObject<{
    state: z.ZodLiteral<"pending">;
    nonce: z.ZodString;
}, "strip", z.ZodTypeAny, {
    nonce: string;
    state: "pending";
}, {
    nonce: string;
    state: "pending";
}>;
interface PrivyFarcasterConnectStatusPendingResponse extends z.infer<typeof FarcasterConnectStatusPendingResponse> {
}
declare const FarcasterAuthenticateInput: z.ZodObject<{
    channel_token: z.ZodString;
    message: z.ZodString;
    signature: z.ZodString;
    fid: z.ZodNumber;
} & {
    mode: z.ZodOptional<z.ZodEnum<["no-signup", "login-or-sign-up"]>>;
}, "strip", z.ZodTypeAny, {
    message: string;
    channel_token: string;
    signature: string;
    fid: number;
    mode?: "no-signup" | "login-or-sign-up" | undefined;
}, {
    message: string;
    channel_token: string;
    signature: string;
    fid: number;
    mode?: "no-signup" | "login-or-sign-up" | undefined;
}>;
interface PrivyFarcasterAuthenticateInput extends z.infer<typeof FarcasterAuthenticateInput> {
}
declare const FarcasterLinkInput: z.ZodObject<{
    channel_token: z.ZodString;
    message: z.ZodString;
    signature: z.ZodString;
    fid: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    message: string;
    channel_token: string;
    signature: string;
    fid: number;
}, {
    message: string;
    channel_token: string;
    signature: string;
    fid: number;
}>;
interface PrivyFarcasterLinkInput extends z.infer<typeof FarcasterLinkInput> {
}
declare const FarcasterInitInput: z.ZodObject<{
    token: z.ZodOptional<z.ZodString>;
    redirect_url: z.ZodOptional<z.ZodString>;
    relying_party: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    token?: string | undefined;
    redirect_url?: string | undefined;
    relying_party?: string | undefined;
}, {
    token?: string | undefined;
    redirect_url?: string | undefined;
    relying_party?: string | undefined;
}>;
interface PrivyFarcasterInitInput extends z.infer<typeof FarcasterInitInput> {
}
declare const FarcasterUnlinkInput: z.ZodObject<{
    fid: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    fid: number;
}, {
    fid: number;
}>;
interface PrivyFarcasterUnlinkInput extends z.infer<typeof FarcasterUnlinkInput> {
}
declare const TransferFarcasterInput: z.ZodObject<{
    nonce: z.ZodString;
} & {
    farcaster_id: z.ZodString;
    farcaster_embedded_address: z.ZodString;
}, "strip", z.ZodTypeAny, {
    nonce: string;
    farcaster_id: string;
    farcaster_embedded_address: string;
}, {
    nonce: string;
    farcaster_id: string;
    farcaster_embedded_address: string;
}>;
interface PrivyTransferFarcasterInput extends z.infer<typeof TransferFarcasterInput> {
}
declare const FarcasterV2InitInput: z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
interface PrivyFarcasterV2InitInput extends z.infer<typeof FarcasterV2InitInput> {
}
declare const FarcasterV2InitResponse: z.ZodObject<{
    nonce: z.ZodString;
    expires_at: z.ZodString;
}, "strip", z.ZodTypeAny, {
    nonce: string;
    expires_at: string;
}, {
    nonce: string;
    expires_at: string;
}>;
interface PrivyFarcasterV2InitResponse extends z.infer<typeof FarcasterV2InitResponse> {
}
declare const FarcasterV2AuthenticateInput: z.ZodObject<{
    fid: z.ZodNumber;
    message: z.ZodString;
    signature: z.ZodString;
} & {
    mode: z.ZodOptional<z.ZodEnum<["no-signup", "login-or-sign-up"]>>;
}, "strip", z.ZodTypeAny, {
    message: string;
    signature: string;
    fid: number;
    mode?: "no-signup" | "login-or-sign-up" | undefined;
}, {
    message: string;
    signature: string;
    fid: number;
    mode?: "no-signup" | "login-or-sign-up" | undefined;
}>;
interface PrivyFarcasterV2AuthenticateInput extends z.infer<typeof FarcasterV2AuthenticateInput> {
}

/**
 * Input to add a public key signer for a user.
 */
declare const FarcasterSignerInitInput: z.ZodObject<{
    /** Must be an ed25519 key, NOT secp256k1 (ethereum native curve) */
    ed25519_public_key: z.ZodEffects<z.ZodString, string, string>;
    /**
     * The deadline for a signer request to succeed. After the deadline, the request will no longer
     * succeed. Defaults to 1 hour.
     */
    deadline: z.ZodDefault<z.ZodOptional<z.ZodBigInt>>;
}, "strip", z.ZodTypeAny, {
    ed25519_public_key: string;
    deadline: bigint;
}, {
    ed25519_public_key: string;
    deadline?: bigint | undefined;
}>;
interface PrivyFarcasterSignerInitInput extends z.input<typeof FarcasterSignerInitInput> {
}
declare const FarcasterSignerInitResponse: z.ZodDiscriminatedUnion<"status", [z.ZodObject<{
    /** The public key reflected back from the API
     * ie 0x2087e48968ca16a8954d0da041de84b66392b2821c2af42bc28aa079bcbe1dfe
     */
    public_key: z.ZodString;
    status: z.ZodLiteral<"pending_approval">;
    signer_approval_url: z.ZodString;
}, "strip", z.ZodTypeAny, {
    status: "pending_approval";
    public_key: string;
    signer_approval_url: string;
}, {
    status: "pending_approval";
    public_key: string;
    signer_approval_url: string;
}>, z.ZodObject<{
    /** The public key reflected back from the API
     * ie 0x2087e48968ca16a8954d0da041de84b66392b2821c2af42bc28aa079bcbe1dfe
     */
    public_key: z.ZodString;
    status: z.ZodLiteral<"approved">;
    /** The FID of the user who approved the signer */
    fid: z.ZodBigInt;
}, "strip", z.ZodTypeAny, {
    status: "approved";
    fid: bigint;
    public_key: string;
}, {
    status: "approved";
    fid: bigint;
    public_key: string;
}>, z.ZodObject<{
    /** The public key reflected back from the API
     * ie 0x2087e48968ca16a8954d0da041de84b66392b2821c2af42bc28aa079bcbe1dfe
     */
    public_key: z.ZodString;
    status: z.ZodLiteral<"revoked">;
    /** The FID of the user who approved the signer */
    fid: z.ZodBigInt;
}, "strip", z.ZodTypeAny, {
    status: "revoked";
    fid: bigint;
    public_key: string;
}, {
    status: "revoked";
    fid: bigint;
    public_key: string;
}>]>;
type PrivyFarcasterSignerInitResponse = z.output<typeof FarcasterSignerInitResponse>;
declare const FarcasterSignerStatusResponse: z.ZodDiscriminatedUnion<"status", [z.ZodObject<{
    /** The public key reflected back from the API
     * ie 0x2087e48968ca16a8954d0da041de84b66392b2821c2af42bc28aa079bcbe1dfe
     */
    public_key: z.ZodString;
    status: z.ZodLiteral<"pending_approval">;
}, "strip", z.ZodTypeAny, {
    status: "pending_approval";
    public_key: string;
}, {
    status: "pending_approval";
    public_key: string;
}>, z.ZodObject<{
    /** The public key reflected back from the API
     * ie 0x2087e48968ca16a8954d0da041de84b66392b2821c2af42bc28aa079bcbe1dfe
     */
    public_key: z.ZodString;
    status: z.ZodLiteral<"approved">;
    /** The FID of the user who approved the signer */
    fid: z.ZodBigInt;
}, "strip", z.ZodTypeAny, {
    status: "approved";
    fid: bigint;
    public_key: string;
}, {
    status: "approved";
    fid: bigint;
    public_key: string;
}>, z.ZodObject<{
    /** The public key reflected back from the API
     * ie 0x2087e48968ca16a8954d0da041de84b66392b2821c2af42bc28aa079bcbe1dfe
     */
    public_key: z.ZodString;
    status: z.ZodLiteral<"revoked">;
    /** The FID of the user who approved the signer */
    fid: z.ZodBigInt;
}, "strip", z.ZodTypeAny, {
    status: "revoked";
    fid: bigint;
    public_key: string;
}, {
    status: "revoked";
    fid: bigint;
    public_key: string;
}>]>;
type PrivyFarcasterSignerStatusResponse = z.output<typeof FarcasterSignerStatusResponse>;
type PrivyFarcasterSubmitCastResponse = Record<string, any>;
type PrivyFarcasterRemoveCastResponse = Record<string, any>;
type PrivyFarcasterReactToCastResponse = Record<string, any>;
type PrivyFarcasterSubmitLinkResponse = Record<string, any>;
type PrivyFarcasterRemoveLinkResponse = Record<string, any>;

/**
 * Parses the authentication input for guest accounts.
 */
declare const AuthenticateGuestInput: z.ZodObject<{
    /**
     * Locally-persisted guest secret.
     * This credential should have as much entropy as embedded wallet entropy.
     */
    guest_credential: z.ZodString;
}, "strict", z.ZodTypeAny, {
    guest_credential: string;
}, {
    guest_credential: string;
}>;
interface PrivyAuthenticateGuestInput extends z.infer<typeof AuthenticateGuestInput> {
}

declare const EmailIdTokenEntry: z.ZodObject<Pick<{
    type: z.ZodLiteral<"email">;
    address: z.ZodString;
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "type" | "address"> & {
    lv: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "email";
    address: string;
    lv: number | null;
}, {
    type: "email";
    address: string;
    lv: number | null;
}>;
interface PrivyEmailIdTokenEntry extends z.infer<typeof EmailIdTokenEntry> {
}
declare const PhoneIdTokenEntry: z.ZodEffects<z.ZodObject<Pick<{
    type: z.ZodLiteral<"phone">;
    number: z.ZodOptional<z.ZodString>;
    phoneNumber: z.ZodString;
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "type" | "phoneNumber"> & {
    lv: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "phone";
    phoneNumber: string;
    lv: number | null;
}, {
    type: "phone";
    phoneNumber: string;
    lv: number | null;
}>, {
    type: "phone";
    lv: number | null;
    phone_number: string;
}, {
    type: "phone";
    phoneNumber: string;
    lv: number | null;
}>;
interface PrivyPhoneIdTokenEntry extends z.infer<typeof PhoneIdTokenEntry> {
}
declare const WalletIdTokenEntry: z.ZodObject<Pick<{
    type: z.ZodLiteral<"wallet">;
    address: z.ZodString;
    chain_id: z.ZodOptional<z.ZodString>;
    chain_type: z.ZodLiteral<"ethereum">;
    wallet_client: z.ZodLiteral<"unknown">;
    wallet_client_type: z.ZodOptional<z.ZodString>;
    connector_type: z.ZodOptional<z.ZodString>;
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "type" | "address" | "chain_type" | "wallet_client_type"> & {
    id: z.ZodOptional<z.ZodString>;
    lv: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "wallet";
    address: string;
    chain_type: "ethereum";
    lv: number | null;
    id?: string | undefined;
    wallet_client_type?: string | undefined;
}, {
    type: "wallet";
    address: string;
    chain_type: "ethereum";
    lv: number | null;
    id?: string | undefined;
    wallet_client_type?: string | undefined;
}>;
interface PrivyWalletIdTokenEntry extends z.infer<typeof WalletIdTokenEntry> {
}
declare const FarcasterIdTokenEntry: z.ZodEffects<z.ZodObject<Pick<{
    type: z.ZodLiteral<"farcaster">;
    fid: z.ZodNumber;
    owner_address: z.ZodEffects<z.ZodString, string, string>;
    username: z.ZodOptional<z.ZodString>;
    display_name: z.ZodOptional<z.ZodString>;
    bio: z.ZodOptional<z.ZodString>;
    profile_picture: z.ZodOptional<z.ZodString>;
    profile_picture_url: z.ZodOptional<z.ZodString>;
    homepage_url: z.ZodOptional<z.ZodString>;
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
    signer_public_key: z.ZodOptional<z.ZodString>;
}, "type" | "fid" | "username" | "owner_address"> & {
    lv: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "farcaster";
    fid: number;
    owner_address: string;
    lv: number | null;
    username?: string | undefined;
}, {
    type: "farcaster";
    fid: number;
    owner_address: string;
    lv: number | null;
    username?: string | undefined;
}>, {
    type: "farcaster";
    fid: number;
    lv: number | null;
    username?: string | undefined;
    oa: string;
}, {
    type: "farcaster";
    fid: number;
    owner_address: string;
    lv: number | null;
    username?: string | undefined;
}>;
interface PrivyFarcasterIdTokenEntry extends z.infer<typeof FarcasterIdTokenEntry> {
}
declare const PasskeyIdTokenEntry: z.ZodObject<Pick<{
    type: z.ZodLiteral<"passkey">;
    created_with_browser: z.ZodOptional<z.ZodString>;
    created_with_os: z.ZodOptional<z.ZodString>;
    created_with_device: z.ZodOptional<z.ZodString>;
    credential_id: z.ZodString;
    authenticator_name: z.ZodOptional<z.ZodString>;
    enrolled_in_mfa: z.ZodBoolean;
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "type" | "credential_id"> & {
    lv: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "passkey";
    credential_id: string;
    lv: number | null;
}, {
    type: "passkey";
    credential_id: string;
    lv: number | null;
}>;
interface PrivyPasskeyIdTokenEntry extends z.infer<typeof PasskeyIdTokenEntry> {
}
declare const TelegramIdTokenEntry: z.ZodObject<{
    type: z.ZodLiteral<"telegram">;
    telegram_user_id: z.ZodString;
    username: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    lv: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "telegram";
    telegram_user_id: string;
    lv: number | null;
    username?: string | null | undefined;
}, {
    type: "telegram";
    telegram_user_id: string;
    lv: number | null;
    username?: string | null | undefined;
}>;
interface PrivyTelegramIdTokenEntry extends z.infer<typeof TelegramIdTokenEntry> {
}
declare const GoogleOauthIdTokenEntry: z.ZodObject<Pick<{
    type: z.ZodLiteral<"google_oauth">;
    subject: z.ZodString;
    email: z.ZodString;
    name: z.ZodNullable<z.ZodString>;
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "type" | "name" | "email" | "subject"> & {
    lv: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "google_oauth";
    name: string | null;
    email: string;
    subject: string;
    lv: number | null;
}, {
    type: "google_oauth";
    name: string | null;
    email: string;
    subject: string;
    lv: number | null;
}>;
interface PrivyGoogleOauthIdTokenEntry extends z.infer<typeof GoogleOauthIdTokenEntry> {
}
declare const TwitterOauthIdTokenEntry: z.ZodObject<Pick<{
    type: z.ZodLiteral<"twitter_oauth">;
    subject: z.ZodString;
    username: z.ZodNullable<z.ZodString>;
    name: z.ZodNullable<z.ZodString>;
    profile_picture_url: z.ZodNullable<z.ZodString>;
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "type" | "username" | "subject"> & {
    lv: z.ZodNullable<z.ZodNumber>;
} & {
    name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    pfp: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    type: "twitter_oauth";
    username: string | null;
    subject: string;
    lv: number | null;
    name?: string | null | undefined;
    pfp?: string | null | undefined;
}, {
    type: "twitter_oauth";
    username: string | null;
    subject: string;
    lv: number | null;
    name?: string | null | undefined;
    pfp?: string | null | undefined;
}>;
interface PrivyTwitterOauthIdTokenEntry extends z.infer<typeof TwitterOauthIdTokenEntry> {
}
declare const DiscordOauthIdTokenEntry: z.ZodObject<Pick<{
    type: z.ZodLiteral<"discord_oauth">;
    subject: z.ZodString;
    username: z.ZodNullable<z.ZodString>;
    email: z.ZodNullable<z.ZodString>;
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "type" | "username" | "subject"> & {
    lv: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "discord_oauth";
    username: string | null;
    subject: string;
    lv: number | null;
}, {
    type: "discord_oauth";
    username: string | null;
    subject: string;
    lv: number | null;
}>;
interface PrivyDiscordOauthIdTokenEntry extends z.infer<typeof DiscordOauthIdTokenEntry> {
}
declare const GithubOauthIdTokenEntry: z.ZodObject<Pick<{
    type: z.ZodLiteral<"github_oauth">;
    subject: z.ZodString;
    username: z.ZodNullable<z.ZodString>;
    name: z.ZodNullable<z.ZodString>;
    email: z.ZodNullable<z.ZodString>;
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "type" | "username" | "subject"> & {
    lv: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "github_oauth";
    username: string | null;
    subject: string;
    lv: number | null;
}, {
    type: "github_oauth";
    username: string | null;
    subject: string;
    lv: number | null;
}>;
interface PrivyGithubOauthIdTokenEntry extends z.infer<typeof GithubOauthIdTokenEntry> {
}
declare const LinkedInOauthIdTokenEntry: z.ZodObject<Pick<{
    type: z.ZodLiteral<"linkedin_oauth">;
    subject: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    email: z.ZodNullable<z.ZodString>;
    vanity_name: z.ZodOptional<z.ZodString>;
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "type" | "email" | "subject"> & {
    lv: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "linkedin_oauth";
    email: string | null;
    subject: string;
    lv: number | null;
}, {
    type: "linkedin_oauth";
    email: string | null;
    subject: string;
    lv: number | null;
}>;
interface PrivyLinkedInOauthIdTokenEntry extends z.infer<typeof LinkedInOauthIdTokenEntry> {
}
declare const SpotifyOauthIdTokenEntry: z.ZodObject<Pick<{
    type: z.ZodLiteral<"spotify_oauth">;
    subject: z.ZodString;
    email: z.ZodNullable<z.ZodString>;
    name: z.ZodNullable<z.ZodString>;
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "type" | "email" | "subject"> & {
    lv: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "spotify_oauth";
    email: string | null;
    subject: string;
    lv: number | null;
}, {
    type: "spotify_oauth";
    email: string | null;
    subject: string;
    lv: number | null;
}>;
interface PrivySpotifyOauthIdTokenEntry extends z.infer<typeof SpotifyOauthIdTokenEntry> {
}
declare const InstagramOauthIdTokenEntry: z.ZodObject<Pick<{
    type: z.ZodLiteral<"instagram_oauth">;
    subject: z.ZodString;
    username: z.ZodNullable<z.ZodString>;
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "type" | "username" | "subject"> & {
    lv: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "instagram_oauth";
    username: string | null;
    subject: string;
    lv: number | null;
}, {
    type: "instagram_oauth";
    username: string | null;
    subject: string;
    lv: number | null;
}>;
interface PrivyInstagramOauthIdTokenEntry extends z.infer<typeof InstagramOauthIdTokenEntry> {
}
declare const TiktokOauthIdTokenEntry: z.ZodObject<Pick<{
    type: z.ZodLiteral<"tiktok_oauth">;
    subject: z.ZodString;
    username: z.ZodNullable<z.ZodString>;
    name: z.ZodNullable<z.ZodString>;
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "type" | "username" | "subject"> & {
    lv: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "tiktok_oauth";
    username: string | null;
    subject: string;
    lv: number | null;
}, {
    type: "tiktok_oauth";
    username: string | null;
    subject: string;
    lv: number | null;
}>;
interface PrivyTiktokOauthIdTokenEntry extends z.infer<typeof TiktokOauthIdTokenEntry> {
}
declare const AppleOauthIdTokenEntry: z.ZodObject<Pick<{
    type: z.ZodLiteral<"apple_oauth">;
    subject: z.ZodString;
    email: z.ZodNullable<z.ZodString>;
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "type" | "email" | "subject"> & {
    lv: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "apple_oauth";
    email: string | null;
    subject: string;
    lv: number | null;
}, {
    type: "apple_oauth";
    email: string | null;
    subject: string;
    lv: number | null;
}>;
interface PrivyAppleOauthIdTokenEntry extends z.infer<typeof AppleOauthIdTokenEntry> {
}
declare const CustomJwtIdTokenEntry: z.ZodObject<Pick<{
    type: z.ZodLiteral<"custom_auth">;
    custom_user_id: z.ZodString;
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "type" | "custom_user_id"> & {
    lv: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "custom_auth";
    custom_user_id: string;
    lv: number | null;
}, {
    type: "custom_auth";
    custom_user_id: string;
    lv: number | null;
}>;
interface PrivyCustomJwtIdTokenEntry extends z.infer<typeof CustomJwtIdTokenEntry> {
}
declare const CrossAppIdTokenEntry: z.ZodObject<Pick<{
    type: z.ZodLiteral<"cross_app">;
    subject: z.ZodString;
    provider_app_id: z.ZodString;
    embedded_wallets: z.ZodArray<z.ZodObject<{
        address: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        address: string;
    }, {
        address: string;
    }>, "many">;
    smart_wallets: z.ZodArray<z.ZodObject<{
        address: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        address: string;
    }, {
        address: string;
    }>, "many">;
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "type" | "provider_app_id" | "subject" | "embedded_wallets" | "smart_wallets"> & {
    lv: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "cross_app";
    provider_app_id: string;
    subject: string;
    embedded_wallets: {
        address: string;
    }[];
    smart_wallets: {
        address: string;
    }[];
    lv: number | null;
}, {
    type: "cross_app";
    provider_app_id: string;
    subject: string;
    embedded_wallets: {
        address: string;
    }[];
    smart_wallets: {
        address: string;
    }[];
    lv: number | null;
}>;
interface PrivyCrossAppIdTokenEntry extends z.infer<typeof CrossAppIdTokenEntry> {
}
declare const SmartWalletIdTokenEntry: z.ZodObject<Pick<{
    type: z.ZodLiteral<"smart_wallet">;
    address: z.ZodString;
    smart_wallet_type: z.ZodEnum<["safe", "kernel", "biconomy", "light_account", "coinbase_smart_wallet", "thirdweb"]>;
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "type" | "address" | "smart_wallet_type"> & {
    lv: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "smart_wallet";
    address: string;
    smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
    lv: number | null;
}, {
    type: "smart_wallet";
    address: string;
    smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
    lv: number | null;
}>;
interface PrivySmartWalletIdTokenEntry extends z.infer<typeof SmartWalletIdTokenEntry> {
}
type LinkedAccountsIdTokenEntry = PrivyEmailIdTokenEntry | PrivyPhoneIdTokenEntry | PrivyWalletIdTokenEntry | PrivyGoogleOauthIdTokenEntry | PrivyTwitterOauthIdTokenEntry | PrivyDiscordOauthIdTokenEntry | PrivyGithubOauthIdTokenEntry | PrivySpotifyOauthIdTokenEntry | PrivyInstagramOauthIdTokenEntry | PrivyTiktokOauthIdTokenEntry | PrivyLinkedInOauthIdTokenEntry | PrivyAppleOauthIdTokenEntry | PrivyCustomJwtIdTokenEntry | PrivyFarcasterIdTokenEntry | PrivyPasskeyIdTokenEntry | PrivyTelegramIdTokenEntry | PrivyCrossAppIdTokenEntry | PrivySmartWalletIdTokenEntry;

declare const MfaVerifyResponse: z$1.ZodObject<{
    token: z$1.ZodString;
}, "strict", z$1.ZodTypeAny, {
    token: string;
}, {
    token: string;
}>;
type MfaVerifyResponseType = z$1.infer<typeof MfaVerifyResponse>;
declare const MfaSmsInitInput: z$1.ZodUnion<[z$1.ZodObject<{
    action: z$1.ZodLiteral<"verify">;
}, "strict", z$1.ZodTypeAny, {
    action: "verify";
}, {
    action: "verify";
}>, z$1.ZodObject<{
    action: z$1.ZodLiteral<"enroll">;
    phoneNumber: z$1.ZodEffects<z$1.ZodEffects<z$1.ZodString, string, string>, string, string>;
}, "strict", z$1.ZodTypeAny, {
    phoneNumber: string;
    action: "enroll";
}, {
    phoneNumber: string;
    action: "enroll";
}>]>;
type MfaSmsInitInputType = z$1.infer<typeof MfaSmsInitInput>;
/** @deprecated Please use MfaSmsEnrollInput */
declare const MfaSmsAuthenticateEnrollInput: z$1.ZodObject<{
    action: z$1.ZodOptional<z$1.ZodLiteral<"enroll">>;
    code: z$1.ZodString;
    phoneNumber: z$1.ZodEffects<z$1.ZodEffects<z$1.ZodString, string, string>, string, string>;
}, "strict", z$1.ZodTypeAny, {
    code: string;
    phoneNumber: string;
    action?: "enroll" | undefined;
}, {
    code: string;
    phoneNumber: string;
    action?: "enroll" | undefined;
}>;
/** @deprecated Please use MfaSmsEnrollInputType */
type MfaSmsAuthenticateEnrollInputType = z$1.infer<typeof MfaSmsAuthenticateEnrollInput>;
declare const MfaSmsEnrollInput: z$1.ZodObject<{
    code: z$1.ZodString;
    phoneNumber: z$1.ZodEffects<z$1.ZodEffects<z$1.ZodString, string, string>, string, string>;
}, "strict", z$1.ZodTypeAny, {
    code: string;
    phoneNumber: string;
}, {
    code: string;
    phoneNumber: string;
}>;
type MfaSmsEnrollInputType = z$1.infer<typeof MfaSmsEnrollInput>;
declare const MfaSmsVerifyInput: z$1.ZodObject<{
    code: z$1.ZodString;
}, "strict", z$1.ZodTypeAny, {
    code: string;
}, {
    code: string;
}>;
type MfaSmsVerifyInputType = z$1.infer<typeof MfaSmsVerifyInput>;
/**
 * TOTP MFA enrollment and verification inputs.
 */
declare const MfaTotpInput: z$1.ZodObject<{
    code: z$1.ZodString;
}, "strict", z$1.ZodTypeAny, {
    code: string;
}, {
    code: string;
}>;
type MfaTotpInputType = z$1.infer<typeof MfaTotpInput>;
declare const ResponseTotpInitMfa: z$1.ZodObject<{
    totpSecret: z$1.ZodString;
    totpAuthUrl: z$1.ZodString;
}, "strict", z$1.ZodTypeAny, {
    totpSecret: string;
    totpAuthUrl: string;
}, {
    totpSecret: string;
    totpAuthUrl: string;
}>;
type ResponseTotpInitMfaType = z$1.infer<typeof ResponseTotpInitMfa>;

declare const MfaPasskeyInitInput: z$1.ZodObject<{
    relying_party: z$1.ZodOptional<z$1.ZodString>;
}, "strict", z$1.ZodTypeAny, {
    relying_party?: string | undefined;
}, {
    relying_party?: string | undefined;
}>;
type MfaPasskeyInitInputType = z$1.infer<typeof MfaPasskeyInitInput>;
declare const ResponsePasskeyInitMfa: z$1.ZodObject<{
    options: z$1.ZodObject<{
        challenge: z$1.ZodString;
        timeout: z$1.ZodOptional<z$1.ZodNumber>;
        rp_id: z$1.ZodOptional<z$1.ZodString>;
        allow_credentials: z$1.ZodOptional<z$1.ZodArray<z$1.ZodObject<{
            id: z$1.ZodString;
            type: z$1.ZodString;
            transports: z$1.ZodOptional<z$1.ZodArray<z$1.ZodString, "many">>;
        }, "strip", z$1.ZodTypeAny, {
            type: string;
            id: string;
            transports?: string[] | undefined;
        }, {
            type: string;
            id: string;
            transports?: string[] | undefined;
        }>, "many">>;
        user_verification: z$1.ZodOptional<z$1.ZodString>;
        extensions: z$1.ZodOptional<z$1.ZodObject<{
            app_id: z$1.ZodOptional<z$1.ZodString>;
            cred_props: z$1.ZodOptional<z$1.ZodBoolean>;
            hmac_create_secret: z$1.ZodOptional<z$1.ZodBoolean>;
        }, "strip", z$1.ZodTypeAny, {
            app_id?: string | undefined;
            cred_props?: boolean | undefined;
            hmac_create_secret?: boolean | undefined;
        }, {
            app_id?: string | undefined;
            cred_props?: boolean | undefined;
            hmac_create_secret?: boolean | undefined;
        }>>;
    }, "strip", z$1.ZodTypeAny, {
        challenge: string;
        timeout?: number | undefined;
        rp_id?: string | undefined;
        allow_credentials?: {
            type: string;
            id: string;
            transports?: string[] | undefined;
        }[] | undefined;
        user_verification?: string | undefined;
        extensions?: {
            app_id?: string | undefined;
            cred_props?: boolean | undefined;
            hmac_create_secret?: boolean | undefined;
        } | undefined;
    }, {
        challenge: string;
        timeout?: number | undefined;
        rp_id?: string | undefined;
        allow_credentials?: {
            type: string;
            id: string;
            transports?: string[] | undefined;
        }[] | undefined;
        user_verification?: string | undefined;
        extensions?: {
            app_id?: string | undefined;
            cred_props?: boolean | undefined;
            hmac_create_secret?: boolean | undefined;
        } | undefined;
    }>;
}, "strict", z$1.ZodTypeAny, {
    options: {
        challenge: string;
        timeout?: number | undefined;
        rp_id?: string | undefined;
        allow_credentials?: {
            type: string;
            id: string;
            transports?: string[] | undefined;
        }[] | undefined;
        user_verification?: string | undefined;
        extensions?: {
            app_id?: string | undefined;
            cred_props?: boolean | undefined;
            hmac_create_secret?: boolean | undefined;
        } | undefined;
    };
}, {
    options: {
        challenge: string;
        timeout?: number | undefined;
        rp_id?: string | undefined;
        allow_credentials?: {
            type: string;
            id: string;
            transports?: string[] | undefined;
        }[] | undefined;
        user_verification?: string | undefined;
        extensions?: {
            app_id?: string | undefined;
            cred_props?: boolean | undefined;
            hmac_create_secret?: boolean | undefined;
        } | undefined;
    };
}>;
type ResponsePasskeyInitMfaType = z$1.infer<typeof ResponsePasskeyInitMfa>;
declare const MfaPasskeyVerifyInput: z$1.ZodObject<{
    authenticator_response: z$1.ZodObject<{
        id: z$1.ZodString;
        raw_id: z$1.ZodString;
        response: z$1.ZodObject<{
            client_data_json: z$1.ZodString;
            authenticator_data: z$1.ZodString;
            signature: z$1.ZodString;
            user_handle: z$1.ZodOptional<z$1.ZodString>;
        }, "strip", z$1.ZodTypeAny, {
            signature: string;
            client_data_json: string;
            authenticator_data: string;
            user_handle?: string | undefined;
        }, {
            signature: string;
            client_data_json: string;
            authenticator_data: string;
            user_handle?: string | undefined;
        }>;
        authenticator_attachment: z$1.ZodOptional<z$1.ZodString>;
        client_extension_results: z$1.ZodObject<{
            app_id: z$1.ZodOptional<z$1.ZodBoolean>;
            cred_props: z$1.ZodOptional<z$1.ZodObject<{
                rk: z$1.ZodOptional<z$1.ZodBoolean>;
            }, "strip", z$1.ZodTypeAny, {
                rk?: boolean | undefined;
            }, {
                rk?: boolean | undefined;
            }>>;
            hmac_create_secret: z$1.ZodOptional<z$1.ZodBoolean>;
        }, "strip", z$1.ZodTypeAny, {
            app_id?: boolean | undefined;
            cred_props?: {
                rk?: boolean | undefined;
            } | undefined;
            hmac_create_secret?: boolean | undefined;
        }, {
            app_id?: boolean | undefined;
            cred_props?: {
                rk?: boolean | undefined;
            } | undefined;
            hmac_create_secret?: boolean | undefined;
        }>;
        type: z$1.ZodLiteral<"public-key">;
    }, "strip", z$1.ZodTypeAny, {
        type: "public-key";
        id: string;
        raw_id: string;
        response: {
            signature: string;
            client_data_json: string;
            authenticator_data: string;
            user_handle?: string | undefined;
        };
        client_extension_results: {
            app_id?: boolean | undefined;
            cred_props?: {
                rk?: boolean | undefined;
            } | undefined;
            hmac_create_secret?: boolean | undefined;
        };
        authenticator_attachment?: string | undefined;
    }, {
        type: "public-key";
        id: string;
        raw_id: string;
        response: {
            signature: string;
            client_data_json: string;
            authenticator_data: string;
            user_handle?: string | undefined;
        };
        client_extension_results: {
            app_id?: boolean | undefined;
            cred_props?: {
                rk?: boolean | undefined;
            } | undefined;
            hmac_create_secret?: boolean | undefined;
        };
        authenticator_attachment?: string | undefined;
    }>;
    relying_party: z$1.ZodOptional<z$1.ZodString>;
}, "strict", z$1.ZodTypeAny, {
    authenticator_response: {
        type: "public-key";
        id: string;
        raw_id: string;
        response: {
            signature: string;
            client_data_json: string;
            authenticator_data: string;
            user_handle?: string | undefined;
        };
        client_extension_results: {
            app_id?: boolean | undefined;
            cred_props?: {
                rk?: boolean | undefined;
            } | undefined;
            hmac_create_secret?: boolean | undefined;
        };
        authenticator_attachment?: string | undefined;
    };
    relying_party?: string | undefined;
}, {
    authenticator_response: {
        type: "public-key";
        id: string;
        raw_id: string;
        response: {
            signature: string;
            client_data_json: string;
            authenticator_data: string;
            user_handle?: string | undefined;
        };
        client_extension_results: {
            app_id?: boolean | undefined;
            cred_props?: {
                rk?: boolean | undefined;
            } | undefined;
            hmac_create_secret?: boolean | undefined;
        };
        authenticator_attachment?: string | undefined;
    };
    relying_party?: string | undefined;
}>;
type MfaPasskeyVerifyInputType = z$1.infer<typeof MfaPasskeyVerifyInput>;
declare const MfaEnrollmentPasskeyInput: z$1.ZodObject<{
    credential_ids: z$1.ZodArray<z$1.ZodString, "many">;
    remove_for_login: z$1.ZodDefault<z$1.ZodBoolean>;
}, "strip", z$1.ZodTypeAny, {
    credential_ids: string[];
    remove_for_login: boolean;
}, {
    credential_ids: string[];
    remove_for_login?: boolean | undefined;
}>;
interface PrivyMfaEnrollmentPasskeyInputType extends z$1.infer<typeof MfaEnrollmentPasskeyInput> {
}

/**
 * Strict type checking is done for most values here. This is because we are signing these
 * configurations with our own key and must avoid any sort of injection attempt.
 *
 * Be careful with adding/relaxing any of these types.
 */
declare const MoonpayOnRampSignInput: z.ZodIntersection<z.ZodUnion<[z.ZodObject<{
    address: z.ZodEffects<z.ZodString, string, string>;
    config: z.ZodObject<{
        quoteCurrencyAmount: z.ZodOptional<z.ZodNumber>;
        email: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
        paymentMethod: z.ZodOptional<z.ZodEnum<["ach_bank_transfer", "credit_debit_card", "gbp_bank_transfer", "gbp_open_banking_payment", "mobile_wallet", "sepa_bank_transfer", "sepa_open_banking_payment", "pix_instant_payment", "yellow_card_bank_transfer"]>>;
        uiConfig: z.ZodOptional<z.ZodObject<{
            accentColor: z.ZodOptional<z.ZodString>;
            theme: z.ZodOptional<z.ZodEnum<["light", "dark"]>>;
        }, "strip", z.ZodTypeAny, {
            theme?: "light" | "dark" | undefined;
            accentColor?: string | undefined;
        }, {
            theme?: "light" | "dark" | undefined;
            accentColor?: string | undefined;
        }>>;
    } & {
        currencyCode: z.ZodOptional<z.ZodEffects<z.ZodEnum<["AVAX_CCHAIN", "CELO_CELO", "CUSD_CELO", "DAI_ETHEREUM", "ETH_ETHEREUM", "ETH_ARBITRUM", "ETH_OPTIMISM", "ETH_POLYGON", "ETH_BASE", "FIL_FVM", "MATIC_ETHEREUM", "MATIC_POLYGON", "USDC_ETHEREUM", "USDC_ARBITRUM", "USDC_OPTIMISM", "USDC_POLYGON", "USDC_BASE", "USDC_SOL", "USDT_ETHEREUM", "USDT_POLYGON", "WETH_POLYGON", "WBTC_ETHEREUM", "BNB_BNB", "BNB_BSC", "CELO", "CUSD", "DAI", "ETH", "FIL", "MATIC", "USDC", "USDT", "WETH", "WBTC"]>, "USDC" | "ETH" | "AVAX_CCHAIN" | "ETH_ARBITRUM" | "ETH_OPTIMISM" | "ETH_POLYGON" | "ETH_BASE" | "MATIC_POLYGON" | "USDC_ARBITRUM" | "USDC_OPTIMISM" | "USDC_POLYGON" | "USDC_BASE" | "USDC_SOL" | "USDT_POLYGON" | "BNB_BSC" | "CELO" | "CUSD" | "DAI" | "FIL" | "MATIC" | "USDT" | "WETH" | "WBTC" | "BNB", "USDC" | "ETH" | "AVAX_CCHAIN" | "CELO_CELO" | "CUSD_CELO" | "DAI_ETHEREUM" | "ETH_ETHEREUM" | "ETH_ARBITRUM" | "ETH_OPTIMISM" | "ETH_POLYGON" | "ETH_BASE" | "FIL_FVM" | "MATIC_ETHEREUM" | "MATIC_POLYGON" | "USDC_ETHEREUM" | "USDC_ARBITRUM" | "USDC_OPTIMISM" | "USDC_POLYGON" | "USDC_BASE" | "USDC_SOL" | "USDT_ETHEREUM" | "USDT_POLYGON" | "WETH_POLYGON" | "WBTC_ETHEREUM" | "BNB_BNB" | "BNB_BSC" | "CELO" | "CUSD" | "DAI" | "FIL" | "MATIC" | "USDT" | "WETH" | "WBTC">>;
    }, "strip", z.ZodTypeAny, {
        email?: string | undefined;
        quoteCurrencyAmount?: number | undefined;
        paymentMethod?: "ach_bank_transfer" | "credit_debit_card" | "gbp_bank_transfer" | "gbp_open_banking_payment" | "mobile_wallet" | "sepa_bank_transfer" | "sepa_open_banking_payment" | "pix_instant_payment" | "yellow_card_bank_transfer" | undefined;
        uiConfig?: {
            theme?: "light" | "dark" | undefined;
            accentColor?: string | undefined;
        } | undefined;
        currencyCode?: "USDC" | "ETH" | "AVAX_CCHAIN" | "ETH_ARBITRUM" | "ETH_OPTIMISM" | "ETH_POLYGON" | "ETH_BASE" | "MATIC_POLYGON" | "USDC_ARBITRUM" | "USDC_OPTIMISM" | "USDC_POLYGON" | "USDC_BASE" | "USDC_SOL" | "USDT_POLYGON" | "BNB_BSC" | "CELO" | "CUSD" | "DAI" | "FIL" | "MATIC" | "USDT" | "WETH" | "WBTC" | "BNB" | undefined;
    }, {
        email?: string | undefined;
        quoteCurrencyAmount?: number | undefined;
        paymentMethod?: "ach_bank_transfer" | "credit_debit_card" | "gbp_bank_transfer" | "gbp_open_banking_payment" | "mobile_wallet" | "sepa_bank_transfer" | "sepa_open_banking_payment" | "pix_instant_payment" | "yellow_card_bank_transfer" | undefined;
        uiConfig?: {
            theme?: "light" | "dark" | undefined;
            accentColor?: string | undefined;
        } | undefined;
        currencyCode?: "USDC" | "ETH" | "AVAX_CCHAIN" | "CELO_CELO" | "CUSD_CELO" | "DAI_ETHEREUM" | "ETH_ETHEREUM" | "ETH_ARBITRUM" | "ETH_OPTIMISM" | "ETH_POLYGON" | "ETH_BASE" | "FIL_FVM" | "MATIC_ETHEREUM" | "MATIC_POLYGON" | "USDC_ETHEREUM" | "USDC_ARBITRUM" | "USDC_OPTIMISM" | "USDC_POLYGON" | "USDC_BASE" | "USDC_SOL" | "USDT_ETHEREUM" | "USDT_POLYGON" | "WETH_POLYGON" | "WBTC_ETHEREUM" | "BNB_BNB" | "BNB_BSC" | "CELO" | "CUSD" | "DAI" | "FIL" | "MATIC" | "USDT" | "WETH" | "WBTC" | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    address: string;
    config: {
        email?: string | undefined;
        quoteCurrencyAmount?: number | undefined;
        paymentMethod?: "ach_bank_transfer" | "credit_debit_card" | "gbp_bank_transfer" | "gbp_open_banking_payment" | "mobile_wallet" | "sepa_bank_transfer" | "sepa_open_banking_payment" | "pix_instant_payment" | "yellow_card_bank_transfer" | undefined;
        uiConfig?: {
            theme?: "light" | "dark" | undefined;
            accentColor?: string | undefined;
        } | undefined;
        currencyCode?: "USDC" | "ETH" | "AVAX_CCHAIN" | "ETH_ARBITRUM" | "ETH_OPTIMISM" | "ETH_POLYGON" | "ETH_BASE" | "MATIC_POLYGON" | "USDC_ARBITRUM" | "USDC_OPTIMISM" | "USDC_POLYGON" | "USDC_BASE" | "USDC_SOL" | "USDT_POLYGON" | "BNB_BSC" | "CELO" | "CUSD" | "DAI" | "FIL" | "MATIC" | "USDT" | "WETH" | "WBTC" | "BNB" | undefined;
    };
}, {
    address: string;
    config: {
        email?: string | undefined;
        quoteCurrencyAmount?: number | undefined;
        paymentMethod?: "ach_bank_transfer" | "credit_debit_card" | "gbp_bank_transfer" | "gbp_open_banking_payment" | "mobile_wallet" | "sepa_bank_transfer" | "sepa_open_banking_payment" | "pix_instant_payment" | "yellow_card_bank_transfer" | undefined;
        uiConfig?: {
            theme?: "light" | "dark" | undefined;
            accentColor?: string | undefined;
        } | undefined;
        currencyCode?: "USDC" | "ETH" | "AVAX_CCHAIN" | "CELO_CELO" | "CUSD_CELO" | "DAI_ETHEREUM" | "ETH_ETHEREUM" | "ETH_ARBITRUM" | "ETH_OPTIMISM" | "ETH_POLYGON" | "ETH_BASE" | "FIL_FVM" | "MATIC_ETHEREUM" | "MATIC_POLYGON" | "USDC_ETHEREUM" | "USDC_ARBITRUM" | "USDC_OPTIMISM" | "USDC_POLYGON" | "USDC_BASE" | "USDC_SOL" | "USDT_ETHEREUM" | "USDT_POLYGON" | "WETH_POLYGON" | "WBTC_ETHEREUM" | "BNB_BNB" | "BNB_BSC" | "CELO" | "CUSD" | "DAI" | "FIL" | "MATIC" | "USDT" | "WETH" | "WBTC" | undefined;
    };
}>, z.ZodObject<{
    address: z.ZodEffects<z.ZodString, string, string>;
    config: z.ZodObject<{
        quoteCurrencyAmount: z.ZodOptional<z.ZodNumber>;
        email: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
        paymentMethod: z.ZodOptional<z.ZodEnum<["ach_bank_transfer", "credit_debit_card", "gbp_bank_transfer", "gbp_open_banking_payment", "mobile_wallet", "sepa_bank_transfer", "sepa_open_banking_payment", "pix_instant_payment", "yellow_card_bank_transfer"]>>;
        uiConfig: z.ZodOptional<z.ZodObject<{
            accentColor: z.ZodOptional<z.ZodString>;
            theme: z.ZodOptional<z.ZodEnum<["light", "dark"]>>;
        }, "strip", z.ZodTypeAny, {
            theme?: "light" | "dark" | undefined;
            accentColor?: string | undefined;
        }, {
            theme?: "light" | "dark" | undefined;
            accentColor?: string | undefined;
        }>>;
    } & {
        currencyCode: z.ZodOptional<z.ZodEnum<["SOL", "USDC_SOL"]>>;
    }, "strip", z.ZodTypeAny, {
        email?: string | undefined;
        quoteCurrencyAmount?: number | undefined;
        paymentMethod?: "ach_bank_transfer" | "credit_debit_card" | "gbp_bank_transfer" | "gbp_open_banking_payment" | "mobile_wallet" | "sepa_bank_transfer" | "sepa_open_banking_payment" | "pix_instant_payment" | "yellow_card_bank_transfer" | undefined;
        uiConfig?: {
            theme?: "light" | "dark" | undefined;
            accentColor?: string | undefined;
        } | undefined;
        currencyCode?: "SOL" | "USDC_SOL" | undefined;
    }, {
        email?: string | undefined;
        quoteCurrencyAmount?: number | undefined;
        paymentMethod?: "ach_bank_transfer" | "credit_debit_card" | "gbp_bank_transfer" | "gbp_open_banking_payment" | "mobile_wallet" | "sepa_bank_transfer" | "sepa_open_banking_payment" | "pix_instant_payment" | "yellow_card_bank_transfer" | undefined;
        uiConfig?: {
            theme?: "light" | "dark" | undefined;
            accentColor?: string | undefined;
        } | undefined;
        currencyCode?: "SOL" | "USDC_SOL" | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    address: string;
    config: {
        email?: string | undefined;
        quoteCurrencyAmount?: number | undefined;
        paymentMethod?: "ach_bank_transfer" | "credit_debit_card" | "gbp_bank_transfer" | "gbp_open_banking_payment" | "mobile_wallet" | "sepa_bank_transfer" | "sepa_open_banking_payment" | "pix_instant_payment" | "yellow_card_bank_transfer" | undefined;
        uiConfig?: {
            theme?: "light" | "dark" | undefined;
            accentColor?: string | undefined;
        } | undefined;
        currencyCode?: "SOL" | "USDC_SOL" | undefined;
    };
}, {
    address: string;
    config: {
        email?: string | undefined;
        quoteCurrencyAmount?: number | undefined;
        paymentMethod?: "ach_bank_transfer" | "credit_debit_card" | "gbp_bank_transfer" | "gbp_open_banking_payment" | "mobile_wallet" | "sepa_bank_transfer" | "sepa_open_banking_payment" | "pix_instant_payment" | "yellow_card_bank_transfer" | undefined;
        uiConfig?: {
            theme?: "light" | "dark" | undefined;
            accentColor?: string | undefined;
        } | undefined;
        currencyCode?: "SOL" | "USDC_SOL" | undefined;
    };
}>]>, z.ZodObject<{
    useSandbox: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    useSandbox: boolean;
}, {
    useSandbox?: boolean | undefined;
}>>;
type PrivyMoonpayOnRampSignInput = z.infer<typeof MoonpayOnRampSignInput>;
declare const MoonpayOnRampSignResponse: z.ZodObject<{
    signedUrl: z.ZodString;
    externalTransactionId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    signedUrl: string;
    externalTransactionId: string;
}, {
    signedUrl: string;
    externalTransactionId: string;
}>;
type PrivyMoonpayOnRampSignResponse = z.infer<typeof MoonpayOnRampSignResponse>;

declare const SUPPORTED_OAUTH_PROVIDERS: readonly ["google", "discord", "twitter", "github", "spotify", "instagram", "tiktok", "linkedin", "apple"];
type PrivyOAuthProvider = `privy:${string}`;
type ExternalOAuthProviderType = (typeof SUPPORTED_OAUTH_PROVIDERS)[number];
type OAuthProviderType = ExternalOAuthProviderType | PrivyOAuthProvider;

declare const ExternalOAuthProvider: z.ZodEnum<["google", "discord", "twitter", "github", "spotify", "instagram", "tiktok", "linkedin", "apple"]>;
declare const OAuthProvider: z.ZodUnion<[z.ZodEnum<["google", "discord", "twitter", "github", "spotify", "instagram", "tiktok", "linkedin", "apple"]>, z.ZodType<`privy:${string}`, z.ZodTypeDef, `privy:${string}`>]>;

declare const AuthenticateOauthInput: z.ZodCatch<z.ZodObject<{
    authorization_code: z.ZodString;
    state_code: z.ZodString;
    code_verifier: z.ZodOptional<z.ZodString>;
    code_type: z.ZodOptional<z.ZodEnum<["raw"]>>;
} & {
    mode: z.ZodOptional<z.ZodEnum<["no-signup", "login-or-sign-up"]>>;
}, "strip", z.ZodTypeAny, {
    authorization_code: string;
    state_code: string;
    mode?: "no-signup" | "login-or-sign-up" | undefined;
    code_verifier?: string | undefined;
    code_type?: "raw" | undefined;
}, {
    authorization_code: string;
    state_code: string;
    mode?: "no-signup" | "login-or-sign-up" | undefined;
    code_verifier?: string | undefined;
    code_type?: "raw" | undefined;
}>>;
interface PrivyAuthenticateOauthInput extends z.infer<typeof AuthenticateOauthInput> {
}
declare const OAuthInitInput: z.ZodObject<{
    redirect_to: z.ZodString;
    provider: z.ZodUnion<[z.ZodEnum<["google", "discord", "twitter", "github", "spotify", "instagram", "tiktok", "linkedin", "apple"]>, z.ZodType<`privy:${string}`, z.ZodTypeDef, `privy:${string}`>]>;
    token: z.ZodOptional<z.ZodString>;
    state_code: z.ZodOptional<z.ZodString>;
    code_challenge: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    provider: "google" | "discord" | "twitter" | "github" | "spotify" | "instagram" | "tiktok" | "linkedin" | "apple" | `privy:${string}`;
    redirect_to: string;
    token?: string | undefined;
    state_code?: string | undefined;
    code_challenge?: string | undefined;
}, {
    provider: "google" | "discord" | "twitter" | "github" | "spotify" | "instagram" | "tiktok" | "linkedin" | "apple" | `privy:${string}`;
    redirect_to: string;
    token?: string | undefined;
    state_code?: string | undefined;
    code_challenge?: string | undefined;
}>;
interface PrivyOAuthInitInput extends z.infer<typeof OAuthInitInput> {
}
declare const LinkOAuthInput: z.ZodObject<{
    authorization_code: z.ZodString;
    state_code: z.ZodString;
    code_verifier: z.ZodOptional<z.ZodString>;
    code_type: z.ZodOptional<z.ZodEnum<["raw"]>>;
}, "strip", z.ZodTypeAny, {
    authorization_code: string;
    state_code: string;
    code_verifier?: string | undefined;
    code_type?: "raw" | undefined;
}, {
    authorization_code: string;
    state_code: string;
    code_verifier?: string | undefined;
    code_type?: "raw" | undefined;
}>;
interface PrivyLinkOAuthInput extends z.infer<typeof LinkOAuthInput> {
}
declare const OAuthUnlinkInput: z.ZodObject<{
    subject: z.ZodString;
    provider: z.ZodUnion<[z.ZodEnum<["google", "discord", "twitter", "github", "spotify", "instagram", "tiktok", "linkedin", "apple"]>, z.ZodType<`privy:${string}`, z.ZodTypeDef, `privy:${string}`>]>;
}, "strip", z.ZodTypeAny, {
    provider: "google" | "discord" | "twitter" | "github" | "spotify" | "instagram" | "tiktok" | "linkedin" | "apple" | `privy:${string}`;
    subject: string;
}, {
    provider: "google" | "discord" | "twitter" | "github" | "spotify" | "instagram" | "tiktok" | "linkedin" | "apple" | `privy:${string}`;
    subject: string;
}>;
interface PrivyOAuthUnlinkInput extends z.infer<typeof OAuthUnlinkInput> {
}
declare const OAuthInitResponse: z.ZodObject<{
    url: z.ZodString;
}, "strip", z.ZodTypeAny, {
    url: string;
}, {
    url: string;
}>;
interface PrivyOAuthInitResponse extends z.infer<typeof OAuthInitResponse> {
}
declare const OAuthLinkResponse: z.ZodObject<{
    id: z.ZodString;
    linked_accounts: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"email">;
        address: z.ZodString;
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "email";
        address: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
    }, {
        type: "email";
        address: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"phone">;
        number: z.ZodOptional<z.ZodString>;
        phoneNumber: z.ZodString;
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "phone";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        phoneNumber: string;
        number?: string | undefined;
    }, {
        type: "phone";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        phoneNumber: string;
        number?: string | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"wallet">;
        address: z.ZodString;
        chain_id: z.ZodOptional<z.ZodString>;
        chain_type: z.ZodLiteral<"ethereum">;
        wallet_client: z.ZodLiteral<"unknown">;
        wallet_client_type: z.ZodOptional<z.ZodString>;
        connector_type: z.ZodOptional<z.ZodString>;
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "wallet";
        address: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "ethereum";
        wallet_client: "unknown";
        chain_id?: string | undefined;
        wallet_client_type?: string | undefined;
        connector_type?: string | undefined;
    }, {
        type: "wallet";
        address: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "ethereum";
        wallet_client: "unknown";
        chain_id?: string | undefined;
        wallet_client_type?: string | undefined;
        connector_type?: string | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"wallet">;
        address: z.ZodString;
        chain_type: z.ZodLiteral<"solana">;
        wallet_client: z.ZodLiteral<"unknown">;
        wallet_client_type: z.ZodOptional<z.ZodString>;
        connector_type: z.ZodOptional<z.ZodString>;
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "wallet";
        address: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "solana";
        wallet_client: "unknown";
        wallet_client_type?: string | undefined;
        connector_type?: string | undefined;
    }, {
        type: "wallet";
        address: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "solana";
        wallet_client: "unknown";
        wallet_client_type?: string | undefined;
        connector_type?: string | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"smart_wallet">;
        address: z.ZodString;
        smart_wallet_type: z.ZodEnum<["safe", "kernel", "biconomy", "light_account", "coinbase_smart_wallet", "thirdweb"]>;
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "smart_wallet";
        address: string;
        smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
    }, {
        type: "smart_wallet";
        address: string;
        smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
    }>, z.ZodObject<{
        id: z.ZodDefault<z.ZodNullable<z.ZodString>>;
        type: z.ZodLiteral<"wallet">;
        address: z.ZodString;
        imported: z.ZodDefault<z.ZodBoolean>;
        delegated: z.ZodDefault<z.ZodBoolean>;
        wallet_index: z.ZodNumber;
        chain_id: z.ZodString;
        wallet_client: z.ZodLiteral<"privy">;
        wallet_client_type: z.ZodLiteral<"privy">;
        connector_type: z.ZodLiteral<"embedded">;
        recovery_method: z.ZodEnum<["privy", "user-passcode", "google-drive", "icloud", "recovery-encryption-key", "privy-v2"]>;
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    } & {
        chain_type: z.ZodLiteral<"ethereum">;
    }, "strip", z.ZodTypeAny, {
        type: "wallet";
        id: string | null;
        address: string;
        chain_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "ethereum";
        wallet_client: "privy";
        wallet_client_type: "privy";
        connector_type: "embedded";
        imported: boolean;
        delegated: boolean;
        wallet_index: number;
        recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
    }, {
        type: "wallet";
        address: string;
        chain_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "ethereum";
        wallet_client: "privy";
        wallet_client_type: "privy";
        connector_type: "embedded";
        wallet_index: number;
        recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        id?: string | null | undefined;
        imported?: boolean | undefined;
        delegated?: boolean | undefined;
    }>, z.ZodObject<{
        id: z.ZodDefault<z.ZodNullable<z.ZodString>>;
        type: z.ZodLiteral<"wallet">;
        address: z.ZodString;
        imported: z.ZodDefault<z.ZodBoolean>;
        delegated: z.ZodDefault<z.ZodBoolean>;
        wallet_index: z.ZodNumber;
        chain_id: z.ZodString;
        wallet_client: z.ZodLiteral<"privy">;
        wallet_client_type: z.ZodLiteral<"privy">;
        connector_type: z.ZodLiteral<"embedded">;
        recovery_method: z.ZodEnum<["privy", "user-passcode", "google-drive", "icloud", "recovery-encryption-key", "privy-v2"]>;
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    } & {
        chain_type: z.ZodLiteral<"solana">;
        public_key: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "wallet";
        id: string | null;
        address: string;
        public_key: string;
        chain_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "solana";
        wallet_client: "privy";
        wallet_client_type: "privy";
        connector_type: "embedded";
        imported: boolean;
        delegated: boolean;
        wallet_index: number;
        recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
    }, {
        type: "wallet";
        address: string;
        public_key: string;
        chain_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "solana";
        wallet_client: "privy";
        wallet_client_type: "privy";
        connector_type: "embedded";
        wallet_index: number;
        recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        id?: string | null | undefined;
        imported?: boolean | undefined;
        delegated?: boolean | undefined;
    }>, z.ZodObject<{
        id: z.ZodDefault<z.ZodNullable<z.ZodString>>;
        type: z.ZodLiteral<"wallet">;
        address: z.ZodString;
        imported: z.ZodDefault<z.ZodBoolean>;
        delegated: z.ZodDefault<z.ZodBoolean>;
        wallet_index: z.ZodNumber;
        chain_id: z.ZodString;
        wallet_client: z.ZodLiteral<"privy">;
        wallet_client_type: z.ZodLiteral<"privy">;
        connector_type: z.ZodLiteral<"embedded">;
        recovery_method: z.ZodEnum<["privy", "user-passcode", "google-drive", "icloud", "recovery-encryption-key", "privy-v2"]>;
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    } & {
        chain_type: z.ZodLiteral<"bitcoin-segwit">;
        public_key: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "wallet";
        id: string | null;
        address: string;
        public_key: string;
        chain_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "bitcoin-segwit";
        wallet_client: "privy";
        wallet_client_type: "privy";
        connector_type: "embedded";
        imported: boolean;
        delegated: boolean;
        wallet_index: number;
        recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
    }, {
        type: "wallet";
        address: string;
        public_key: string;
        chain_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "bitcoin-segwit";
        wallet_client: "privy";
        wallet_client_type: "privy";
        connector_type: "embedded";
        wallet_index: number;
        recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        id?: string | null | undefined;
        imported?: boolean | undefined;
        delegated?: boolean | undefined;
    }>, z.ZodObject<{
        id: z.ZodDefault<z.ZodNullable<z.ZodString>>;
        type: z.ZodLiteral<"wallet">;
        address: z.ZodString;
        imported: z.ZodDefault<z.ZodBoolean>;
        delegated: z.ZodDefault<z.ZodBoolean>;
        wallet_index: z.ZodNumber;
        chain_id: z.ZodString;
        wallet_client: z.ZodLiteral<"privy">;
        wallet_client_type: z.ZodLiteral<"privy">;
        connector_type: z.ZodLiteral<"embedded">;
        recovery_method: z.ZodEnum<["privy", "user-passcode", "google-drive", "icloud", "recovery-encryption-key", "privy-v2"]>;
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    } & {
        chain_type: z.ZodLiteral<"bitcoin-taproot">;
        public_key: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "wallet";
        id: string | null;
        address: string;
        public_key: string;
        chain_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "bitcoin-taproot";
        wallet_client: "privy";
        wallet_client_type: "privy";
        connector_type: "embedded";
        imported: boolean;
        delegated: boolean;
        wallet_index: number;
        recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
    }, {
        type: "wallet";
        address: string;
        public_key: string;
        chain_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "bitcoin-taproot";
        wallet_client: "privy";
        wallet_client_type: "privy";
        connector_type: "embedded";
        wallet_index: number;
        recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        id?: string | null | undefined;
        imported?: boolean | undefined;
        delegated?: boolean | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"google_oauth">;
        subject: z.ZodString;
        email: z.ZodString;
        name: z.ZodNullable<z.ZodString>;
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "google_oauth";
        name: string | null;
        email: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    }, {
        type: "google_oauth";
        name: string | null;
        email: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"twitter_oauth">;
        subject: z.ZodString;
        username: z.ZodNullable<z.ZodString>;
        name: z.ZodNullable<z.ZodString>;
        profile_picture_url: z.ZodNullable<z.ZodString>;
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "twitter_oauth";
        name: string | null;
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        profile_picture_url: string | null;
        subject: string;
    }, {
        type: "twitter_oauth";
        name: string | null;
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        profile_picture_url: string | null;
        subject: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"discord_oauth">;
        subject: z.ZodString;
        username: z.ZodNullable<z.ZodString>;
        email: z.ZodNullable<z.ZodString>;
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "discord_oauth";
        email: string | null;
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    }, {
        type: "discord_oauth";
        email: string | null;
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"github_oauth">;
        subject: z.ZodString;
        username: z.ZodNullable<z.ZodString>;
        name: z.ZodNullable<z.ZodString>;
        email: z.ZodNullable<z.ZodString>;
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "github_oauth";
        name: string | null;
        email: string | null;
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    }, {
        type: "github_oauth";
        name: string | null;
        email: string | null;
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"spotify_oauth">;
        subject: z.ZodString;
        email: z.ZodNullable<z.ZodString>;
        name: z.ZodNullable<z.ZodString>;
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "spotify_oauth";
        name: string | null;
        email: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    }, {
        type: "spotify_oauth";
        name: string | null;
        email: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"instagram_oauth">;
        subject: z.ZodString;
        username: z.ZodNullable<z.ZodString>;
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "instagram_oauth";
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    }, {
        type: "instagram_oauth";
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"tiktok_oauth">;
        subject: z.ZodString;
        username: z.ZodNullable<z.ZodString>;
        name: z.ZodNullable<z.ZodString>;
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "tiktok_oauth";
        name: string | null;
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    }, {
        type: "tiktok_oauth";
        name: string | null;
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"linkedin_oauth">;
        subject: z.ZodString;
        name: z.ZodOptional<z.ZodString>;
        email: z.ZodNullable<z.ZodString>;
        vanity_name: z.ZodOptional<z.ZodString>;
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "linkedin_oauth";
        email: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
        name?: string | undefined;
        vanity_name?: string | undefined;
    }, {
        type: "linkedin_oauth";
        email: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
        name?: string | undefined;
        vanity_name?: string | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"apple_oauth">;
        subject: z.ZodString;
        email: z.ZodNullable<z.ZodString>;
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "apple_oauth";
        email: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    }, {
        type: "apple_oauth";
        email: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"custom_auth">;
        custom_user_id: z.ZodString;
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "custom_auth";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        custom_user_id: string;
    }, {
        type: "custom_auth";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        custom_user_id: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"farcaster">;
        fid: z.ZodNumber;
        owner_address: z.ZodEffects<z.ZodString, string, string>;
        username: z.ZodOptional<z.ZodString>;
        display_name: z.ZodOptional<z.ZodString>;
        bio: z.ZodOptional<z.ZodString>;
        profile_picture: z.ZodOptional<z.ZodString>;
        profile_picture_url: z.ZodOptional<z.ZodString>;
        homepage_url: z.ZodOptional<z.ZodString>;
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
        signer_public_key: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "farcaster";
        fid: number;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        owner_address: string;
        username?: string | undefined;
        display_name?: string | undefined;
        bio?: string | undefined;
        profile_picture?: string | undefined;
        profile_picture_url?: string | undefined;
        homepage_url?: string | undefined;
        signer_public_key?: string | undefined;
    }, {
        type: "farcaster";
        fid: number;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        owner_address: string;
        username?: string | undefined;
        display_name?: string | undefined;
        bio?: string | undefined;
        profile_picture?: string | undefined;
        profile_picture_url?: string | undefined;
        homepage_url?: string | undefined;
        signer_public_key?: string | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"passkey">;
        created_with_browser: z.ZodOptional<z.ZodString>;
        created_with_os: z.ZodOptional<z.ZodString>;
        created_with_device: z.ZodOptional<z.ZodString>;
        credential_id: z.ZodString;
        authenticator_name: z.ZodOptional<z.ZodString>;
        enrolled_in_mfa: z.ZodBoolean;
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "passkey";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        credential_id: string;
        enrolled_in_mfa: boolean;
        created_with_browser?: string | undefined;
        created_with_os?: string | undefined;
        created_with_device?: string | undefined;
        authenticator_name?: string | undefined;
    }, {
        type: "passkey";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        credential_id: string;
        enrolled_in_mfa: boolean;
        created_with_browser?: string | undefined;
        created_with_os?: string | undefined;
        created_with_device?: string | undefined;
        authenticator_name?: string | undefined;
    }>, z.ZodEffects<z.ZodObject<{
        type: z.ZodLiteral<"telegram">;
        telegram_user_id: z.ZodString;
        first_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        last_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        username: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        photo_url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "telegram";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        telegram_user_id: string;
        username?: string | null | undefined;
        first_name?: string | null | undefined;
        last_name?: string | null | undefined;
        photo_url?: string | null | undefined;
    }, {
        type: "telegram";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        telegram_user_id: string;
        username?: string | null | undefined;
        first_name?: string | null | undefined;
        last_name?: string | null | undefined;
        photo_url?: string | null | undefined;
    }>, {
        telegramUserId: string;
        firstName: string | null | undefined;
        type: "telegram";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        telegram_user_id: string;
        username?: string | null | undefined;
        first_name?: string | null | undefined;
        last_name?: string | null | undefined;
        photo_url?: string | null | undefined;
    }, {
        type: "telegram";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        telegram_user_id: string;
        username?: string | null | undefined;
        first_name?: string | null | undefined;
        last_name?: string | null | undefined;
        photo_url?: string | null | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"cross_app">;
        subject: z.ZodString;
        provider_app_id: z.ZodString;
        embedded_wallets: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            address: string;
        }, {
            address: string;
        }>, "many">;
        smart_wallets: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            address: string;
        }, {
            address: string;
        }>, "many">;
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "cross_app";
        provider_app_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
        embedded_wallets: {
            address: string;
        }[];
        smart_wallets: {
            address: string;
        }[];
    }, {
        type: "cross_app";
        provider_app_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
        embedded_wallets: {
            address: string;
        }[];
        smart_wallets: {
            address: string;
        }[];
    }>, z.ZodObject<{
        type: z.ZodLiteral<"authorization_key">;
        public_key: z.ZodString;
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "authorization_key";
        public_key: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
    }, {
        type: "authorization_key";
        public_key: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
    }>]>, "many">;
    mfa_methods: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"sms">;
        verified_at: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: "sms";
        verified_at: number;
    }, {
        type: "sms";
        verified_at: number;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"totp">;
        verified_at: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: "totp";
        verified_at: number;
    }, {
        type: "totp";
        verified_at: number;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"passkey">;
        verified_at: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: "passkey";
        verified_at: number;
    }, {
        type: "passkey";
        verified_at: number;
    }>]>, "many">;
    created_at: z.ZodNumber;
    has_accepted_terms: z.ZodBoolean;
    is_guest: z.ZodBoolean;
    custom_metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>>;
} & {
    oauth_tokens: z.ZodOptional<z.ZodObject<{
        provider: z.ZodString;
        access_token: z.ZodString;
        access_token_expires_in_seconds: z.ZodOptional<z.ZodNumber>;
        refresh_token: z.ZodOptional<z.ZodString>;
        refresh_token_expires_in_seconds: z.ZodOptional<z.ZodNumber>;
        scopes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        provider: string;
        access_token: string;
        access_token_expires_in_seconds?: number | undefined;
        refresh_token?: string | undefined;
        refresh_token_expires_in_seconds?: number | undefined;
        scopes?: string[] | undefined;
    }, {
        provider: string;
        access_token: string;
        access_token_expires_in_seconds?: number | undefined;
        refresh_token?: string | undefined;
        refresh_token_expires_in_seconds?: number | undefined;
        scopes?: string[] | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    mfa_methods: ({
        type: "sms";
        verified_at: number;
    } | {
        type: "totp";
        verified_at: number;
    } | {
        type: "passkey";
        verified_at: number;
    })[];
    linked_accounts: ({
        type: "email";
        address: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
    } | {
        type: "phone";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        phoneNumber: string;
        number?: string | undefined;
    } | {
        type: "wallet";
        address: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "ethereum";
        wallet_client: "unknown";
        chain_id?: string | undefined;
        wallet_client_type?: string | undefined;
        connector_type?: string | undefined;
    } | {
        type: "smart_wallet";
        address: string;
        smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
    } | {
        type: "wallet";
        address: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "solana";
        wallet_client: "unknown";
        wallet_client_type?: string | undefined;
        connector_type?: string | undefined;
    } | {
        type: "farcaster";
        fid: number;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        owner_address: string;
        username?: string | undefined;
        display_name?: string | undefined;
        bio?: string | undefined;
        profile_picture?: string | undefined;
        profile_picture_url?: string | undefined;
        homepage_url?: string | undefined;
        signer_public_key?: string | undefined;
    } | {
        type: "passkey";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        credential_id: string;
        enrolled_in_mfa: boolean;
        created_with_browser?: string | undefined;
        created_with_os?: string | undefined;
        created_with_device?: string | undefined;
        authenticator_name?: string | undefined;
    } | {
        telegramUserId: string;
        firstName: string | null | undefined;
        type: "telegram";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        telegram_user_id: string;
        username?: string | null | undefined;
        first_name?: string | null | undefined;
        last_name?: string | null | undefined;
        photo_url?: string | null | undefined;
    } | {
        type: "wallet";
        id: string | null;
        address: string;
        chain_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "ethereum";
        wallet_client: "privy";
        wallet_client_type: "privy";
        connector_type: "embedded";
        imported: boolean;
        delegated: boolean;
        wallet_index: number;
        recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
    } | {
        type: "wallet";
        id: string | null;
        address: string;
        public_key: string;
        chain_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "solana";
        wallet_client: "privy";
        wallet_client_type: "privy";
        connector_type: "embedded";
        imported: boolean;
        delegated: boolean;
        wallet_index: number;
        recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
    } | {
        type: "wallet";
        id: string | null;
        address: string;
        public_key: string;
        chain_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "bitcoin-segwit";
        wallet_client: "privy";
        wallet_client_type: "privy";
        connector_type: "embedded";
        imported: boolean;
        delegated: boolean;
        wallet_index: number;
        recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
    } | {
        type: "wallet";
        id: string | null;
        address: string;
        public_key: string;
        chain_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "bitcoin-taproot";
        wallet_client: "privy";
        wallet_client_type: "privy";
        connector_type: "embedded";
        imported: boolean;
        delegated: boolean;
        wallet_index: number;
        recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
    } | {
        type: "google_oauth";
        name: string | null;
        email: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    } | {
        type: "twitter_oauth";
        name: string | null;
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        profile_picture_url: string | null;
        subject: string;
    } | {
        type: "discord_oauth";
        email: string | null;
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    } | {
        type: "github_oauth";
        name: string | null;
        email: string | null;
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    } | {
        type: "linkedin_oauth";
        email: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
        name?: string | undefined;
        vanity_name?: string | undefined;
    } | {
        type: "spotify_oauth";
        name: string | null;
        email: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    } | {
        type: "instagram_oauth";
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    } | {
        type: "tiktok_oauth";
        name: string | null;
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    } | {
        type: "apple_oauth";
        email: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    } | {
        type: "custom_auth";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        custom_user_id: string;
    } | {
        type: "cross_app";
        provider_app_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
        embedded_wallets: {
            address: string;
        }[];
        smart_wallets: {
            address: string;
        }[];
    } | {
        type: "authorization_key";
        public_key: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
    })[];
    created_at: number;
    has_accepted_terms: boolean;
    is_guest: boolean;
    custom_metadata?: Record<string, string | number | boolean> | undefined;
    oauth_tokens?: {
        provider: string;
        access_token: string;
        access_token_expires_in_seconds?: number | undefined;
        refresh_token?: string | undefined;
        refresh_token_expires_in_seconds?: number | undefined;
        scopes?: string[] | undefined;
    } | undefined;
}, {
    id: string;
    mfa_methods: ({
        type: "sms";
        verified_at: number;
    } | {
        type: "totp";
        verified_at: number;
    } | {
        type: "passkey";
        verified_at: number;
    })[];
    linked_accounts: ({
        type: "email";
        address: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
    } | {
        type: "phone";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        phoneNumber: string;
        number?: string | undefined;
    } | {
        type: "wallet";
        address: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "ethereum";
        wallet_client: "unknown";
        chain_id?: string | undefined;
        wallet_client_type?: string | undefined;
        connector_type?: string | undefined;
    } | {
        type: "smart_wallet";
        address: string;
        smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
    } | {
        type: "wallet";
        address: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "solana";
        wallet_client: "unknown";
        wallet_client_type?: string | undefined;
        connector_type?: string | undefined;
    } | {
        type: "farcaster";
        fid: number;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        owner_address: string;
        username?: string | undefined;
        display_name?: string | undefined;
        bio?: string | undefined;
        profile_picture?: string | undefined;
        profile_picture_url?: string | undefined;
        homepage_url?: string | undefined;
        signer_public_key?: string | undefined;
    } | {
        type: "passkey";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        credential_id: string;
        enrolled_in_mfa: boolean;
        created_with_browser?: string | undefined;
        created_with_os?: string | undefined;
        created_with_device?: string | undefined;
        authenticator_name?: string | undefined;
    } | {
        type: "telegram";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        telegram_user_id: string;
        username?: string | null | undefined;
        first_name?: string | null | undefined;
        last_name?: string | null | undefined;
        photo_url?: string | null | undefined;
    } | {
        type: "wallet";
        address: string;
        chain_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "ethereum";
        wallet_client: "privy";
        wallet_client_type: "privy";
        connector_type: "embedded";
        wallet_index: number;
        recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        id?: string | null | undefined;
        imported?: boolean | undefined;
        delegated?: boolean | undefined;
    } | {
        type: "wallet";
        address: string;
        public_key: string;
        chain_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "solana";
        wallet_client: "privy";
        wallet_client_type: "privy";
        connector_type: "embedded";
        wallet_index: number;
        recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        id?: string | null | undefined;
        imported?: boolean | undefined;
        delegated?: boolean | undefined;
    } | {
        type: "wallet";
        address: string;
        public_key: string;
        chain_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "bitcoin-segwit";
        wallet_client: "privy";
        wallet_client_type: "privy";
        connector_type: "embedded";
        wallet_index: number;
        recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        id?: string | null | undefined;
        imported?: boolean | undefined;
        delegated?: boolean | undefined;
    } | {
        type: "wallet";
        address: string;
        public_key: string;
        chain_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "bitcoin-taproot";
        wallet_client: "privy";
        wallet_client_type: "privy";
        connector_type: "embedded";
        wallet_index: number;
        recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        id?: string | null | undefined;
        imported?: boolean | undefined;
        delegated?: boolean | undefined;
    } | {
        type: "google_oauth";
        name: string | null;
        email: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    } | {
        type: "twitter_oauth";
        name: string | null;
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        profile_picture_url: string | null;
        subject: string;
    } | {
        type: "discord_oauth";
        email: string | null;
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    } | {
        type: "github_oauth";
        name: string | null;
        email: string | null;
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    } | {
        type: "linkedin_oauth";
        email: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
        name?: string | undefined;
        vanity_name?: string | undefined;
    } | {
        type: "spotify_oauth";
        name: string | null;
        email: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    } | {
        type: "instagram_oauth";
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    } | {
        type: "tiktok_oauth";
        name: string | null;
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    } | {
        type: "apple_oauth";
        email: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    } | {
        type: "custom_auth";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        custom_user_id: string;
    } | {
        type: "cross_app";
        provider_app_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
        embedded_wallets: {
            address: string;
        }[];
        smart_wallets: {
            address: string;
        }[];
    } | {
        type: "authorization_key";
        public_key: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
    })[];
    created_at: number;
    has_accepted_terms: boolean;
    is_guest: boolean;
    custom_metadata?: Record<string, string | number | boolean> | undefined;
    oauth_tokens?: {
        provider: string;
        access_token: string;
        access_token_expires_in_seconds?: number | undefined;
        refresh_token?: string | undefined;
        refresh_token_expires_in_seconds?: number | undefined;
        scopes?: string[] | undefined;
    } | undefined;
}>;
interface PrivyOAuthLinkResponse extends z.infer<typeof OAuthLinkResponse> {
}
declare const TransferOAuthInput: z.ZodObject<{
    nonce: z.ZodString;
} & {
    userInfo: z.ZodObject<{
        subject: z.ZodString;
        name: z.ZodOptional<z.ZodString>;
        username: z.ZodOptional<z.ZodString>;
        profilePictureUrl: z.ZodOptional<z.ZodString>;
        email: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        vanityName: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        subject: string;
        name?: string | undefined;
        email?: string | null | undefined;
        username?: string | undefined;
        profilePictureUrl?: string | undefined;
        vanityName?: string | undefined;
    }, {
        subject: string;
        name?: string | undefined;
        email?: string | null | undefined;
        username?: string | undefined;
        profilePictureUrl?: string | undefined;
        vanityName?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    nonce: string;
    userInfo: {
        subject: string;
        name?: string | undefined;
        email?: string | null | undefined;
        username?: string | undefined;
        profilePictureUrl?: string | undefined;
        vanityName?: string | undefined;
    };
}, {
    nonce: string;
    userInfo: {
        subject: string;
        name?: string | undefined;
        email?: string | null | undefined;
        username?: string | undefined;
        profilePictureUrl?: string | undefined;
        vanityName?: string | undefined;
    };
}>;

declare const AuthorizationCodeInput: z.ZodObject<{
    redirect_to: z.ZodString;
    state: z.ZodString;
    code_challenge: z.ZodString;
}, "strip", z.ZodTypeAny, {
    state: string;
    redirect_to: string;
    code_challenge: string;
}, {
    state: string;
    redirect_to: string;
    code_challenge: string;
}>;

declare const EmptyObject: z.ZodRecord<z.ZodString, z.ZodNever>;
interface PrivyEmptyObject extends z.infer<typeof EmptyObject> {
}
declare const SuccessObject: z.ZodObject<{
    success: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    success: boolean;
}, {
    success: boolean;
}>;
interface PrivySuccessObject extends z.infer<typeof SuccessObject> {
}

/**
 * Contents are defined by webauthn
 * https://w3c.github.io/webauthn/#dictionary-assertion-options
 *
 * Types and fields are pulled from @simplewebauthn/types
 * (these may be slightly different from the webauthn spec)
 */
declare const PasskeyAuthenticatorVerifyOptions: z$1.ZodObject<{
    challenge: z$1.ZodString;
    timeout: z$1.ZodOptional<z$1.ZodNumber>;
    rp_id: z$1.ZodOptional<z$1.ZodString>;
    allow_credentials: z$1.ZodOptional<z$1.ZodArray<z$1.ZodObject<{
        id: z$1.ZodString;
        type: z$1.ZodString;
        transports: z$1.ZodOptional<z$1.ZodArray<z$1.ZodString, "many">>;
    }, "strip", z$1.ZodTypeAny, {
        type: string;
        id: string;
        transports?: string[] | undefined;
    }, {
        type: string;
        id: string;
        transports?: string[] | undefined;
    }>, "many">>;
    user_verification: z$1.ZodOptional<z$1.ZodString>;
    extensions: z$1.ZodOptional<z$1.ZodObject<{
        app_id: z$1.ZodOptional<z$1.ZodString>;
        cred_props: z$1.ZodOptional<z$1.ZodBoolean>;
        hmac_create_secret: z$1.ZodOptional<z$1.ZodBoolean>;
    }, "strip", z$1.ZodTypeAny, {
        app_id?: string | undefined;
        cred_props?: boolean | undefined;
        hmac_create_secret?: boolean | undefined;
    }, {
        app_id?: string | undefined;
        cred_props?: boolean | undefined;
        hmac_create_secret?: boolean | undefined;
    }>>;
}, "strip", z$1.ZodTypeAny, {
    challenge: string;
    timeout?: number | undefined;
    rp_id?: string | undefined;
    allow_credentials?: {
        type: string;
        id: string;
        transports?: string[] | undefined;
    }[] | undefined;
    user_verification?: string | undefined;
    extensions?: {
        app_id?: string | undefined;
        cred_props?: boolean | undefined;
        hmac_create_secret?: boolean | undefined;
    } | undefined;
}, {
    challenge: string;
    timeout?: number | undefined;
    rp_id?: string | undefined;
    allow_credentials?: {
        type: string;
        id: string;
        transports?: string[] | undefined;
    }[] | undefined;
    user_verification?: string | undefined;
    extensions?: {
        app_id?: string | undefined;
        cred_props?: boolean | undefined;
        hmac_create_secret?: boolean | undefined;
    } | undefined;
}>;
type PasskeyAuthenticatorVerifyOptionsType = z$1.infer<typeof PasskeyAuthenticatorVerifyOptions>;
/**
 * Contents are defined by webauthn
 * https://w3c.github.io/webauthn/#dictionary-assertion-options
 *
 * Types and fields are pulled from @simplewebauthn/types
 * (these may be slightly different from the webauthn spec)
 */
declare const PasskeyAuthenticatorEnrollmentOptions: z$1.ZodObject<{
    rp: z$1.ZodObject<{
        name: z$1.ZodString;
        id: z$1.ZodOptional<z$1.ZodString>;
    }, "strip", z$1.ZodTypeAny, {
        name: string;
        id?: string | undefined;
    }, {
        name: string;
        id?: string | undefined;
    }>;
    user: z$1.ZodObject<{
        id: z$1.ZodString;
        name: z$1.ZodString;
        display_name: z$1.ZodString;
    }, "strip", z$1.ZodTypeAny, {
        id: string;
        name: string;
        display_name: string;
    }, {
        id: string;
        name: string;
        display_name: string;
    }>;
    challenge: z$1.ZodString;
    pub_key_cred_params: z$1.ZodArray<z$1.ZodObject<{
        alg: z$1.ZodNumber;
        type: z$1.ZodLiteral<"public-key">;
    }, "strip", z$1.ZodTypeAny, {
        type: "public-key";
        alg: number;
    }, {
        type: "public-key";
        alg: number;
    }>, "many">;
    timeout: z$1.ZodOptional<z$1.ZodNumber>;
    exclude_credentials: z$1.ZodOptional<z$1.ZodArray<z$1.ZodObject<{
        id: z$1.ZodString;
        type: z$1.ZodString;
        transports: z$1.ZodOptional<z$1.ZodArray<z$1.ZodString, "many">>;
    }, "strip", z$1.ZodTypeAny, {
        type: string;
        id: string;
        transports?: string[] | undefined;
    }, {
        type: string;
        id: string;
        transports?: string[] | undefined;
    }>, "many">>;
    authenticator_selection: z$1.ZodOptional<z$1.ZodObject<{
        authenticator_attachment: z$1.ZodOptional<z$1.ZodString>;
        require_resident_key: z$1.ZodOptional<z$1.ZodBoolean>;
        resident_key: z$1.ZodOptional<z$1.ZodString>;
        user_verification: z$1.ZodOptional<z$1.ZodString>;
    }, "strip", z$1.ZodTypeAny, {
        user_verification?: string | undefined;
        authenticator_attachment?: string | undefined;
        require_resident_key?: boolean | undefined;
        resident_key?: string | undefined;
    }, {
        user_verification?: string | undefined;
        authenticator_attachment?: string | undefined;
        require_resident_key?: boolean | undefined;
        resident_key?: string | undefined;
    }>>;
    attestation: z$1.ZodOptional<z$1.ZodString>;
    extensions: z$1.ZodOptional<z$1.ZodObject<{
        app_id: z$1.ZodOptional<z$1.ZodString>;
        cred_props: z$1.ZodOptional<z$1.ZodObject<{
            rk: z$1.ZodOptional<z$1.ZodBoolean>;
        }, "strip", z$1.ZodTypeAny, {
            rk?: boolean | undefined;
        }, {
            rk?: boolean | undefined;
        }>>;
        hmac_create_secret: z$1.ZodOptional<z$1.ZodBoolean>;
    }, "strip", z$1.ZodTypeAny, {
        app_id?: string | undefined;
        cred_props?: {
            rk?: boolean | undefined;
        } | undefined;
        hmac_create_secret?: boolean | undefined;
    }, {
        app_id?: string | undefined;
        cred_props?: {
            rk?: boolean | undefined;
        } | undefined;
        hmac_create_secret?: boolean | undefined;
    }>>;
}, "strip", z$1.ZodTypeAny, {
    user: {
        id: string;
        name: string;
        display_name: string;
    };
    challenge: string;
    rp: {
        name: string;
        id?: string | undefined;
    };
    pub_key_cred_params: {
        type: "public-key";
        alg: number;
    }[];
    timeout?: number | undefined;
    extensions?: {
        app_id?: string | undefined;
        cred_props?: {
            rk?: boolean | undefined;
        } | undefined;
        hmac_create_secret?: boolean | undefined;
    } | undefined;
    exclude_credentials?: {
        type: string;
        id: string;
        transports?: string[] | undefined;
    }[] | undefined;
    authenticator_selection?: {
        user_verification?: string | undefined;
        authenticator_attachment?: string | undefined;
        require_resident_key?: boolean | undefined;
        resident_key?: string | undefined;
    } | undefined;
    attestation?: string | undefined;
}, {
    user: {
        id: string;
        name: string;
        display_name: string;
    };
    challenge: string;
    rp: {
        name: string;
        id?: string | undefined;
    };
    pub_key_cred_params: {
        type: "public-key";
        alg: number;
    }[];
    timeout?: number | undefined;
    extensions?: {
        app_id?: string | undefined;
        cred_props?: {
            rk?: boolean | undefined;
        } | undefined;
        hmac_create_secret?: boolean | undefined;
    } | undefined;
    exclude_credentials?: {
        type: string;
        id: string;
        transports?: string[] | undefined;
    }[] | undefined;
    authenticator_selection?: {
        user_verification?: string | undefined;
        authenticator_attachment?: string | undefined;
        require_resident_key?: boolean | undefined;
        resident_key?: string | undefined;
    } | undefined;
    attestation?: string | undefined;
}>;
type PasskeyAuthenticatorEnrollmentOptionsType = z$1.infer<typeof PasskeyAuthenticatorEnrollmentOptions>;
/**
 * Contents of are defined by webauthn
 * https://w3c.github.io/webauthn/#dictdef-authenticationresponsejson
 *
 * Types and fields are pulled from @simplewebauthn/types
 */
declare const PasskeyAuthenticatorVerifyResponse: z$1.ZodObject<{
    id: z$1.ZodString;
    raw_id: z$1.ZodString;
    response: z$1.ZodObject<{
        client_data_json: z$1.ZodString;
        authenticator_data: z$1.ZodString;
        signature: z$1.ZodString;
        user_handle: z$1.ZodOptional<z$1.ZodString>;
    }, "strip", z$1.ZodTypeAny, {
        signature: string;
        client_data_json: string;
        authenticator_data: string;
        user_handle?: string | undefined;
    }, {
        signature: string;
        client_data_json: string;
        authenticator_data: string;
        user_handle?: string | undefined;
    }>;
    authenticator_attachment: z$1.ZodOptional<z$1.ZodString>;
    client_extension_results: z$1.ZodObject<{
        app_id: z$1.ZodOptional<z$1.ZodBoolean>;
        cred_props: z$1.ZodOptional<z$1.ZodObject<{
            rk: z$1.ZodOptional<z$1.ZodBoolean>;
        }, "strip", z$1.ZodTypeAny, {
            rk?: boolean | undefined;
        }, {
            rk?: boolean | undefined;
        }>>;
        hmac_create_secret: z$1.ZodOptional<z$1.ZodBoolean>;
    }, "strip", z$1.ZodTypeAny, {
        app_id?: boolean | undefined;
        cred_props?: {
            rk?: boolean | undefined;
        } | undefined;
        hmac_create_secret?: boolean | undefined;
    }, {
        app_id?: boolean | undefined;
        cred_props?: {
            rk?: boolean | undefined;
        } | undefined;
        hmac_create_secret?: boolean | undefined;
    }>;
    type: z$1.ZodLiteral<"public-key">;
}, "strip", z$1.ZodTypeAny, {
    type: "public-key";
    id: string;
    raw_id: string;
    response: {
        signature: string;
        client_data_json: string;
        authenticator_data: string;
        user_handle?: string | undefined;
    };
    client_extension_results: {
        app_id?: boolean | undefined;
        cred_props?: {
            rk?: boolean | undefined;
        } | undefined;
        hmac_create_secret?: boolean | undefined;
    };
    authenticator_attachment?: string | undefined;
}, {
    type: "public-key";
    id: string;
    raw_id: string;
    response: {
        signature: string;
        client_data_json: string;
        authenticator_data: string;
        user_handle?: string | undefined;
    };
    client_extension_results: {
        app_id?: boolean | undefined;
        cred_props?: {
            rk?: boolean | undefined;
        } | undefined;
        hmac_create_secret?: boolean | undefined;
    };
    authenticator_attachment?: string | undefined;
}>;
type PasskeyAuthenticatorVerifyResponseType = z$1.infer<typeof PasskeyAuthenticatorVerifyResponse>;
/**
 * Contents are defined by webauthn
 * https://w3c.github.io/webauthn/#dictdef-registrationresponsejson
 *
 * Types and fields are pulled from @simplewebauthn/types
 */
declare const PasskeyAuthenticatorEnrollmentResponse: z$1.ZodObject<{
    id: z$1.ZodString;
    raw_id: z$1.ZodString;
    response: z$1.ZodObject<{
        client_data_json: z$1.ZodString;
        attestation_object: z$1.ZodString;
        authenticator_data: z$1.ZodOptional<z$1.ZodString>;
        transports: z$1.ZodOptional<z$1.ZodArray<z$1.ZodAny, "many">>;
        public_key_algorithm: z$1.ZodOptional<z$1.ZodNumber>;
        public_key: z$1.ZodOptional<z$1.ZodString>;
    }, "strip", z$1.ZodTypeAny, {
        client_data_json: string;
        attestation_object: string;
        public_key?: string | undefined;
        transports?: any[] | undefined;
        authenticator_data?: string | undefined;
        public_key_algorithm?: number | undefined;
    }, {
        client_data_json: string;
        attestation_object: string;
        public_key?: string | undefined;
        transports?: any[] | undefined;
        authenticator_data?: string | undefined;
        public_key_algorithm?: number | undefined;
    }>;
    authenticator_attachment: z$1.ZodOptional<z$1.ZodString>;
    client_extension_results: z$1.ZodObject<{
        app_id: z$1.ZodOptional<z$1.ZodBoolean>;
        cred_props: z$1.ZodOptional<z$1.ZodObject<{
            rk: z$1.ZodOptional<z$1.ZodBoolean>;
        }, "strip", z$1.ZodTypeAny, {
            rk?: boolean | undefined;
        }, {
            rk?: boolean | undefined;
        }>>;
        hmac_create_secret: z$1.ZodOptional<z$1.ZodBoolean>;
    }, "strip", z$1.ZodTypeAny, {
        app_id?: boolean | undefined;
        cred_props?: {
            rk?: boolean | undefined;
        } | undefined;
        hmac_create_secret?: boolean | undefined;
    }, {
        app_id?: boolean | undefined;
        cred_props?: {
            rk?: boolean | undefined;
        } | undefined;
        hmac_create_secret?: boolean | undefined;
    }>;
    type: z$1.ZodLiteral<"public-key">;
}, "strip", z$1.ZodTypeAny, {
    type: "public-key";
    id: string;
    raw_id: string;
    response: {
        client_data_json: string;
        attestation_object: string;
        public_key?: string | undefined;
        transports?: any[] | undefined;
        authenticator_data?: string | undefined;
        public_key_algorithm?: number | undefined;
    };
    client_extension_results: {
        app_id?: boolean | undefined;
        cred_props?: {
            rk?: boolean | undefined;
        } | undefined;
        hmac_create_secret?: boolean | undefined;
    };
    authenticator_attachment?: string | undefined;
}, {
    type: "public-key";
    id: string;
    raw_id: string;
    response: {
        client_data_json: string;
        attestation_object: string;
        public_key?: string | undefined;
        transports?: any[] | undefined;
        authenticator_data?: string | undefined;
        public_key_algorithm?: number | undefined;
    };
    client_extension_results: {
        app_id?: boolean | undefined;
        cred_props?: {
            rk?: boolean | undefined;
        } | undefined;
        hmac_create_secret?: boolean | undefined;
    };
    authenticator_attachment?: string | undefined;
}>;
type PasskeyAuthenticatorEnrollmentResponseType = z$1.infer<typeof PasskeyAuthenticatorEnrollmentResponse>;
declare const PasskeyInitInput: z$1.ZodObject<{
    relying_party: z$1.ZodOptional<z$1.ZodString>;
    token: z$1.ZodOptional<z$1.ZodString>;
}, "strict", z$1.ZodTypeAny, {
    token?: string | undefined;
    relying_party?: string | undefined;
}, {
    token?: string | undefined;
    relying_party?: string | undefined;
}>;
type PasskeyInitInputType = z$1.infer<typeof PasskeyInitInput>;
declare const ResponsePasskeyInitAuthenticate: z$1.ZodObject<{
    relying_party: z$1.ZodOptional<z$1.ZodString>;
    options: z$1.ZodObject<{
        challenge: z$1.ZodString;
        timeout: z$1.ZodOptional<z$1.ZodNumber>;
        rp_id: z$1.ZodOptional<z$1.ZodString>;
        allow_credentials: z$1.ZodOptional<z$1.ZodArray<z$1.ZodObject<{
            id: z$1.ZodString;
            type: z$1.ZodString;
            transports: z$1.ZodOptional<z$1.ZodArray<z$1.ZodString, "many">>;
        }, "strip", z$1.ZodTypeAny, {
            type: string;
            id: string;
            transports?: string[] | undefined;
        }, {
            type: string;
            id: string;
            transports?: string[] | undefined;
        }>, "many">>;
        user_verification: z$1.ZodOptional<z$1.ZodString>;
        extensions: z$1.ZodOptional<z$1.ZodObject<{
            app_id: z$1.ZodOptional<z$1.ZodString>;
            cred_props: z$1.ZodOptional<z$1.ZodBoolean>;
            hmac_create_secret: z$1.ZodOptional<z$1.ZodBoolean>;
        }, "strip", z$1.ZodTypeAny, {
            app_id?: string | undefined;
            cred_props?: boolean | undefined;
            hmac_create_secret?: boolean | undefined;
        }, {
            app_id?: string | undefined;
            cred_props?: boolean | undefined;
            hmac_create_secret?: boolean | undefined;
        }>>;
    }, "strip", z$1.ZodTypeAny, {
        challenge: string;
        timeout?: number | undefined;
        rp_id?: string | undefined;
        allow_credentials?: {
            type: string;
            id: string;
            transports?: string[] | undefined;
        }[] | undefined;
        user_verification?: string | undefined;
        extensions?: {
            app_id?: string | undefined;
            cred_props?: boolean | undefined;
            hmac_create_secret?: boolean | undefined;
        } | undefined;
    }, {
        challenge: string;
        timeout?: number | undefined;
        rp_id?: string | undefined;
        allow_credentials?: {
            type: string;
            id: string;
            transports?: string[] | undefined;
        }[] | undefined;
        user_verification?: string | undefined;
        extensions?: {
            app_id?: string | undefined;
            cred_props?: boolean | undefined;
            hmac_create_secret?: boolean | undefined;
        } | undefined;
    }>;
}, "strict", z$1.ZodTypeAny, {
    options: {
        challenge: string;
        timeout?: number | undefined;
        rp_id?: string | undefined;
        allow_credentials?: {
            type: string;
            id: string;
            transports?: string[] | undefined;
        }[] | undefined;
        user_verification?: string | undefined;
        extensions?: {
            app_id?: string | undefined;
            cred_props?: boolean | undefined;
            hmac_create_secret?: boolean | undefined;
        } | undefined;
    };
    relying_party?: string | undefined;
}, {
    options: {
        challenge: string;
        timeout?: number | undefined;
        rp_id?: string | undefined;
        allow_credentials?: {
            type: string;
            id: string;
            transports?: string[] | undefined;
        }[] | undefined;
        user_verification?: string | undefined;
        extensions?: {
            app_id?: string | undefined;
            cred_props?: boolean | undefined;
            hmac_create_secret?: boolean | undefined;
        } | undefined;
    };
    relying_party?: string | undefined;
}>;
type ResponsePasskeyInitAuthenticateType = z$1.infer<typeof ResponsePasskeyInitAuthenticate>;
declare const ResponsePasskeyInitLink: z$1.ZodObject<{
    relying_party: z$1.ZodOptional<z$1.ZodString>;
    options: z$1.ZodObject<{
        rp: z$1.ZodObject<{
            name: z$1.ZodString;
            id: z$1.ZodOptional<z$1.ZodString>;
        }, "strip", z$1.ZodTypeAny, {
            name: string;
            id?: string | undefined;
        }, {
            name: string;
            id?: string | undefined;
        }>;
        user: z$1.ZodObject<{
            id: z$1.ZodString;
            name: z$1.ZodString;
            display_name: z$1.ZodString;
        }, "strip", z$1.ZodTypeAny, {
            id: string;
            name: string;
            display_name: string;
        }, {
            id: string;
            name: string;
            display_name: string;
        }>;
        challenge: z$1.ZodString;
        pub_key_cred_params: z$1.ZodArray<z$1.ZodObject<{
            alg: z$1.ZodNumber;
            type: z$1.ZodLiteral<"public-key">;
        }, "strip", z$1.ZodTypeAny, {
            type: "public-key";
            alg: number;
        }, {
            type: "public-key";
            alg: number;
        }>, "many">;
        timeout: z$1.ZodOptional<z$1.ZodNumber>;
        exclude_credentials: z$1.ZodOptional<z$1.ZodArray<z$1.ZodObject<{
            id: z$1.ZodString;
            type: z$1.ZodString;
            transports: z$1.ZodOptional<z$1.ZodArray<z$1.ZodString, "many">>;
        }, "strip", z$1.ZodTypeAny, {
            type: string;
            id: string;
            transports?: string[] | undefined;
        }, {
            type: string;
            id: string;
            transports?: string[] | undefined;
        }>, "many">>;
        authenticator_selection: z$1.ZodOptional<z$1.ZodObject<{
            authenticator_attachment: z$1.ZodOptional<z$1.ZodString>;
            require_resident_key: z$1.ZodOptional<z$1.ZodBoolean>;
            resident_key: z$1.ZodOptional<z$1.ZodString>;
            user_verification: z$1.ZodOptional<z$1.ZodString>;
        }, "strip", z$1.ZodTypeAny, {
            user_verification?: string | undefined;
            authenticator_attachment?: string | undefined;
            require_resident_key?: boolean | undefined;
            resident_key?: string | undefined;
        }, {
            user_verification?: string | undefined;
            authenticator_attachment?: string | undefined;
            require_resident_key?: boolean | undefined;
            resident_key?: string | undefined;
        }>>;
        attestation: z$1.ZodOptional<z$1.ZodString>;
        extensions: z$1.ZodOptional<z$1.ZodObject<{
            app_id: z$1.ZodOptional<z$1.ZodString>;
            cred_props: z$1.ZodOptional<z$1.ZodObject<{
                rk: z$1.ZodOptional<z$1.ZodBoolean>;
            }, "strip", z$1.ZodTypeAny, {
                rk?: boolean | undefined;
            }, {
                rk?: boolean | undefined;
            }>>;
            hmac_create_secret: z$1.ZodOptional<z$1.ZodBoolean>;
        }, "strip", z$1.ZodTypeAny, {
            app_id?: string | undefined;
            cred_props?: {
                rk?: boolean | undefined;
            } | undefined;
            hmac_create_secret?: boolean | undefined;
        }, {
            app_id?: string | undefined;
            cred_props?: {
                rk?: boolean | undefined;
            } | undefined;
            hmac_create_secret?: boolean | undefined;
        }>>;
    }, "strip", z$1.ZodTypeAny, {
        user: {
            id: string;
            name: string;
            display_name: string;
        };
        challenge: string;
        rp: {
            name: string;
            id?: string | undefined;
        };
        pub_key_cred_params: {
            type: "public-key";
            alg: number;
        }[];
        timeout?: number | undefined;
        extensions?: {
            app_id?: string | undefined;
            cred_props?: {
                rk?: boolean | undefined;
            } | undefined;
            hmac_create_secret?: boolean | undefined;
        } | undefined;
        exclude_credentials?: {
            type: string;
            id: string;
            transports?: string[] | undefined;
        }[] | undefined;
        authenticator_selection?: {
            user_verification?: string | undefined;
            authenticator_attachment?: string | undefined;
            require_resident_key?: boolean | undefined;
            resident_key?: string | undefined;
        } | undefined;
        attestation?: string | undefined;
    }, {
        user: {
            id: string;
            name: string;
            display_name: string;
        };
        challenge: string;
        rp: {
            name: string;
            id?: string | undefined;
        };
        pub_key_cred_params: {
            type: "public-key";
            alg: number;
        }[];
        timeout?: number | undefined;
        extensions?: {
            app_id?: string | undefined;
            cred_props?: {
                rk?: boolean | undefined;
            } | undefined;
            hmac_create_secret?: boolean | undefined;
        } | undefined;
        exclude_credentials?: {
            type: string;
            id: string;
            transports?: string[] | undefined;
        }[] | undefined;
        authenticator_selection?: {
            user_verification?: string | undefined;
            authenticator_attachment?: string | undefined;
            require_resident_key?: boolean | undefined;
            resident_key?: string | undefined;
        } | undefined;
        attestation?: string | undefined;
    }>;
}, "strict", z$1.ZodTypeAny, {
    options: {
        user: {
            id: string;
            name: string;
            display_name: string;
        };
        challenge: string;
        rp: {
            name: string;
            id?: string | undefined;
        };
        pub_key_cred_params: {
            type: "public-key";
            alg: number;
        }[];
        timeout?: number | undefined;
        extensions?: {
            app_id?: string | undefined;
            cred_props?: {
                rk?: boolean | undefined;
            } | undefined;
            hmac_create_secret?: boolean | undefined;
        } | undefined;
        exclude_credentials?: {
            type: string;
            id: string;
            transports?: string[] | undefined;
        }[] | undefined;
        authenticator_selection?: {
            user_verification?: string | undefined;
            authenticator_attachment?: string | undefined;
            require_resident_key?: boolean | undefined;
            resident_key?: string | undefined;
        } | undefined;
        attestation?: string | undefined;
    };
    relying_party?: string | undefined;
}, {
    options: {
        user: {
            id: string;
            name: string;
            display_name: string;
        };
        challenge: string;
        rp: {
            name: string;
            id?: string | undefined;
        };
        pub_key_cred_params: {
            type: "public-key";
            alg: number;
        }[];
        timeout?: number | undefined;
        extensions?: {
            app_id?: string | undefined;
            cred_props?: {
                rk?: boolean | undefined;
            } | undefined;
            hmac_create_secret?: boolean | undefined;
        } | undefined;
        exclude_credentials?: {
            type: string;
            id: string;
            transports?: string[] | undefined;
        }[] | undefined;
        authenticator_selection?: {
            user_verification?: string | undefined;
            authenticator_attachment?: string | undefined;
            require_resident_key?: boolean | undefined;
            resident_key?: string | undefined;
        } | undefined;
        attestation?: string | undefined;
    };
    relying_party?: string | undefined;
}>;
type ResponsePasskeyInitLinkType = z$1.infer<typeof ResponsePasskeyInitLink>;
declare const ResponsePasskeyInitRegister: z$1.ZodObject<{
    relying_party: z$1.ZodOptional<z$1.ZodString>;
    options: z$1.ZodObject<{
        rp: z$1.ZodObject<{
            name: z$1.ZodString;
            id: z$1.ZodOptional<z$1.ZodString>;
        }, "strip", z$1.ZodTypeAny, {
            name: string;
            id?: string | undefined;
        }, {
            name: string;
            id?: string | undefined;
        }>;
        user: z$1.ZodObject<{
            id: z$1.ZodString;
            name: z$1.ZodString;
            display_name: z$1.ZodString;
        }, "strip", z$1.ZodTypeAny, {
            id: string;
            name: string;
            display_name: string;
        }, {
            id: string;
            name: string;
            display_name: string;
        }>;
        challenge: z$1.ZodString;
        pub_key_cred_params: z$1.ZodArray<z$1.ZodObject<{
            alg: z$1.ZodNumber;
            type: z$1.ZodLiteral<"public-key">;
        }, "strip", z$1.ZodTypeAny, {
            type: "public-key";
            alg: number;
        }, {
            type: "public-key";
            alg: number;
        }>, "many">;
        timeout: z$1.ZodOptional<z$1.ZodNumber>;
        exclude_credentials: z$1.ZodOptional<z$1.ZodArray<z$1.ZodObject<{
            id: z$1.ZodString;
            type: z$1.ZodString;
            transports: z$1.ZodOptional<z$1.ZodArray<z$1.ZodString, "many">>;
        }, "strip", z$1.ZodTypeAny, {
            type: string;
            id: string;
            transports?: string[] | undefined;
        }, {
            type: string;
            id: string;
            transports?: string[] | undefined;
        }>, "many">>;
        authenticator_selection: z$1.ZodOptional<z$1.ZodObject<{
            authenticator_attachment: z$1.ZodOptional<z$1.ZodString>;
            require_resident_key: z$1.ZodOptional<z$1.ZodBoolean>;
            resident_key: z$1.ZodOptional<z$1.ZodString>;
            user_verification: z$1.ZodOptional<z$1.ZodString>;
        }, "strip", z$1.ZodTypeAny, {
            user_verification?: string | undefined;
            authenticator_attachment?: string | undefined;
            require_resident_key?: boolean | undefined;
            resident_key?: string | undefined;
        }, {
            user_verification?: string | undefined;
            authenticator_attachment?: string | undefined;
            require_resident_key?: boolean | undefined;
            resident_key?: string | undefined;
        }>>;
        attestation: z$1.ZodOptional<z$1.ZodString>;
        extensions: z$1.ZodOptional<z$1.ZodObject<{
            app_id: z$1.ZodOptional<z$1.ZodString>;
            cred_props: z$1.ZodOptional<z$1.ZodObject<{
                rk: z$1.ZodOptional<z$1.ZodBoolean>;
            }, "strip", z$1.ZodTypeAny, {
                rk?: boolean | undefined;
            }, {
                rk?: boolean | undefined;
            }>>;
            hmac_create_secret: z$1.ZodOptional<z$1.ZodBoolean>;
        }, "strip", z$1.ZodTypeAny, {
            app_id?: string | undefined;
            cred_props?: {
                rk?: boolean | undefined;
            } | undefined;
            hmac_create_secret?: boolean | undefined;
        }, {
            app_id?: string | undefined;
            cred_props?: {
                rk?: boolean | undefined;
            } | undefined;
            hmac_create_secret?: boolean | undefined;
        }>>;
    }, "strip", z$1.ZodTypeAny, {
        user: {
            id: string;
            name: string;
            display_name: string;
        };
        challenge: string;
        rp: {
            name: string;
            id?: string | undefined;
        };
        pub_key_cred_params: {
            type: "public-key";
            alg: number;
        }[];
        timeout?: number | undefined;
        extensions?: {
            app_id?: string | undefined;
            cred_props?: {
                rk?: boolean | undefined;
            } | undefined;
            hmac_create_secret?: boolean | undefined;
        } | undefined;
        exclude_credentials?: {
            type: string;
            id: string;
            transports?: string[] | undefined;
        }[] | undefined;
        authenticator_selection?: {
            user_verification?: string | undefined;
            authenticator_attachment?: string | undefined;
            require_resident_key?: boolean | undefined;
            resident_key?: string | undefined;
        } | undefined;
        attestation?: string | undefined;
    }, {
        user: {
            id: string;
            name: string;
            display_name: string;
        };
        challenge: string;
        rp: {
            name: string;
            id?: string | undefined;
        };
        pub_key_cred_params: {
            type: "public-key";
            alg: number;
        }[];
        timeout?: number | undefined;
        extensions?: {
            app_id?: string | undefined;
            cred_props?: {
                rk?: boolean | undefined;
            } | undefined;
            hmac_create_secret?: boolean | undefined;
        } | undefined;
        exclude_credentials?: {
            type: string;
            id: string;
            transports?: string[] | undefined;
        }[] | undefined;
        authenticator_selection?: {
            user_verification?: string | undefined;
            authenticator_attachment?: string | undefined;
            require_resident_key?: boolean | undefined;
            resident_key?: string | undefined;
        } | undefined;
        attestation?: string | undefined;
    }>;
}, "strict", z$1.ZodTypeAny, {
    options: {
        user: {
            id: string;
            name: string;
            display_name: string;
        };
        challenge: string;
        rp: {
            name: string;
            id?: string | undefined;
        };
        pub_key_cred_params: {
            type: "public-key";
            alg: number;
        }[];
        timeout?: number | undefined;
        extensions?: {
            app_id?: string | undefined;
            cred_props?: {
                rk?: boolean | undefined;
            } | undefined;
            hmac_create_secret?: boolean | undefined;
        } | undefined;
        exclude_credentials?: {
            type: string;
            id: string;
            transports?: string[] | undefined;
        }[] | undefined;
        authenticator_selection?: {
            user_verification?: string | undefined;
            authenticator_attachment?: string | undefined;
            require_resident_key?: boolean | undefined;
            resident_key?: string | undefined;
        } | undefined;
        attestation?: string | undefined;
    };
    relying_party?: string | undefined;
}, {
    options: {
        user: {
            id: string;
            name: string;
            display_name: string;
        };
        challenge: string;
        rp: {
            name: string;
            id?: string | undefined;
        };
        pub_key_cred_params: {
            type: "public-key";
            alg: number;
        }[];
        timeout?: number | undefined;
        extensions?: {
            app_id?: string | undefined;
            cred_props?: {
                rk?: boolean | undefined;
            } | undefined;
            hmac_create_secret?: boolean | undefined;
        } | undefined;
        exclude_credentials?: {
            type: string;
            id: string;
            transports?: string[] | undefined;
        }[] | undefined;
        authenticator_selection?: {
            user_verification?: string | undefined;
            authenticator_attachment?: string | undefined;
            require_resident_key?: boolean | undefined;
            resident_key?: string | undefined;
        } | undefined;
        attestation?: string | undefined;
    };
    relying_party?: string | undefined;
}>;
type ResponsePasskeyInitRegisterType = z$1.infer<typeof ResponsePasskeyInitRegister>;
declare const PasskeyLinkInput: z$1.ZodObject<{
    relying_party: z$1.ZodOptional<z$1.ZodString>;
    authenticator_response: z$1.ZodObject<{
        id: z$1.ZodString;
        raw_id: z$1.ZodString;
        response: z$1.ZodObject<{
            client_data_json: z$1.ZodString;
            attestation_object: z$1.ZodString;
            authenticator_data: z$1.ZodOptional<z$1.ZodString>;
            transports: z$1.ZodOptional<z$1.ZodArray<z$1.ZodAny, "many">>;
            public_key_algorithm: z$1.ZodOptional<z$1.ZodNumber>;
            public_key: z$1.ZodOptional<z$1.ZodString>;
        }, "strip", z$1.ZodTypeAny, {
            client_data_json: string;
            attestation_object: string;
            public_key?: string | undefined;
            transports?: any[] | undefined;
            authenticator_data?: string | undefined;
            public_key_algorithm?: number | undefined;
        }, {
            client_data_json: string;
            attestation_object: string;
            public_key?: string | undefined;
            transports?: any[] | undefined;
            authenticator_data?: string | undefined;
            public_key_algorithm?: number | undefined;
        }>;
        authenticator_attachment: z$1.ZodOptional<z$1.ZodString>;
        client_extension_results: z$1.ZodObject<{
            app_id: z$1.ZodOptional<z$1.ZodBoolean>;
            cred_props: z$1.ZodOptional<z$1.ZodObject<{
                rk: z$1.ZodOptional<z$1.ZodBoolean>;
            }, "strip", z$1.ZodTypeAny, {
                rk?: boolean | undefined;
            }, {
                rk?: boolean | undefined;
            }>>;
            hmac_create_secret: z$1.ZodOptional<z$1.ZodBoolean>;
        }, "strip", z$1.ZodTypeAny, {
            app_id?: boolean | undefined;
            cred_props?: {
                rk?: boolean | undefined;
            } | undefined;
            hmac_create_secret?: boolean | undefined;
        }, {
            app_id?: boolean | undefined;
            cred_props?: {
                rk?: boolean | undefined;
            } | undefined;
            hmac_create_secret?: boolean | undefined;
        }>;
        type: z$1.ZodLiteral<"public-key">;
    }, "strip", z$1.ZodTypeAny, {
        type: "public-key";
        id: string;
        raw_id: string;
        response: {
            client_data_json: string;
            attestation_object: string;
            public_key?: string | undefined;
            transports?: any[] | undefined;
            authenticator_data?: string | undefined;
            public_key_algorithm?: number | undefined;
        };
        client_extension_results: {
            app_id?: boolean | undefined;
            cred_props?: {
                rk?: boolean | undefined;
            } | undefined;
            hmac_create_secret?: boolean | undefined;
        };
        authenticator_attachment?: string | undefined;
    }, {
        type: "public-key";
        id: string;
        raw_id: string;
        response: {
            client_data_json: string;
            attestation_object: string;
            public_key?: string | undefined;
            transports?: any[] | undefined;
            authenticator_data?: string | undefined;
            public_key_algorithm?: number | undefined;
        };
        client_extension_results: {
            app_id?: boolean | undefined;
            cred_props?: {
                rk?: boolean | undefined;
            } | undefined;
            hmac_create_secret?: boolean | undefined;
        };
        authenticator_attachment?: string | undefined;
    }>;
}, "strict", z$1.ZodTypeAny, {
    authenticator_response: {
        type: "public-key";
        id: string;
        raw_id: string;
        response: {
            client_data_json: string;
            attestation_object: string;
            public_key?: string | undefined;
            transports?: any[] | undefined;
            authenticator_data?: string | undefined;
            public_key_algorithm?: number | undefined;
        };
        client_extension_results: {
            app_id?: boolean | undefined;
            cred_props?: {
                rk?: boolean | undefined;
            } | undefined;
            hmac_create_secret?: boolean | undefined;
        };
        authenticator_attachment?: string | undefined;
    };
    relying_party?: string | undefined;
}, {
    authenticator_response: {
        type: "public-key";
        id: string;
        raw_id: string;
        response: {
            client_data_json: string;
            attestation_object: string;
            public_key?: string | undefined;
            transports?: any[] | undefined;
            authenticator_data?: string | undefined;
            public_key_algorithm?: number | undefined;
        };
        client_extension_results: {
            app_id?: boolean | undefined;
            cred_props?: {
                rk?: boolean | undefined;
            } | undefined;
            hmac_create_secret?: boolean | undefined;
        };
        authenticator_attachment?: string | undefined;
    };
    relying_party?: string | undefined;
}>;
type PasskeyLinkInputType = z$1.infer<typeof PasskeyLinkInput>;
declare const PasskeyRegisterInput: z$1.ZodObject<{
    relying_party: z$1.ZodOptional<z$1.ZodString>;
    authenticator_response: z$1.ZodObject<{
        id: z$1.ZodString;
        raw_id: z$1.ZodString;
        response: z$1.ZodObject<{
            client_data_json: z$1.ZodString;
            attestation_object: z$1.ZodString;
            authenticator_data: z$1.ZodOptional<z$1.ZodString>;
            transports: z$1.ZodOptional<z$1.ZodArray<z$1.ZodAny, "many">>;
            public_key_algorithm: z$1.ZodOptional<z$1.ZodNumber>;
            public_key: z$1.ZodOptional<z$1.ZodString>;
        }, "strip", z$1.ZodTypeAny, {
            client_data_json: string;
            attestation_object: string;
            public_key?: string | undefined;
            transports?: any[] | undefined;
            authenticator_data?: string | undefined;
            public_key_algorithm?: number | undefined;
        }, {
            client_data_json: string;
            attestation_object: string;
            public_key?: string | undefined;
            transports?: any[] | undefined;
            authenticator_data?: string | undefined;
            public_key_algorithm?: number | undefined;
        }>;
        authenticator_attachment: z$1.ZodOptional<z$1.ZodString>;
        client_extension_results: z$1.ZodObject<{
            app_id: z$1.ZodOptional<z$1.ZodBoolean>;
            cred_props: z$1.ZodOptional<z$1.ZodObject<{
                rk: z$1.ZodOptional<z$1.ZodBoolean>;
            }, "strip", z$1.ZodTypeAny, {
                rk?: boolean | undefined;
            }, {
                rk?: boolean | undefined;
            }>>;
            hmac_create_secret: z$1.ZodOptional<z$1.ZodBoolean>;
        }, "strip", z$1.ZodTypeAny, {
            app_id?: boolean | undefined;
            cred_props?: {
                rk?: boolean | undefined;
            } | undefined;
            hmac_create_secret?: boolean | undefined;
        }, {
            app_id?: boolean | undefined;
            cred_props?: {
                rk?: boolean | undefined;
            } | undefined;
            hmac_create_secret?: boolean | undefined;
        }>;
        type: z$1.ZodLiteral<"public-key">;
    }, "strip", z$1.ZodTypeAny, {
        type: "public-key";
        id: string;
        raw_id: string;
        response: {
            client_data_json: string;
            attestation_object: string;
            public_key?: string | undefined;
            transports?: any[] | undefined;
            authenticator_data?: string | undefined;
            public_key_algorithm?: number | undefined;
        };
        client_extension_results: {
            app_id?: boolean | undefined;
            cred_props?: {
                rk?: boolean | undefined;
            } | undefined;
            hmac_create_secret?: boolean | undefined;
        };
        authenticator_attachment?: string | undefined;
    }, {
        type: "public-key";
        id: string;
        raw_id: string;
        response: {
            client_data_json: string;
            attestation_object: string;
            public_key?: string | undefined;
            transports?: any[] | undefined;
            authenticator_data?: string | undefined;
            public_key_algorithm?: number | undefined;
        };
        client_extension_results: {
            app_id?: boolean | undefined;
            cred_props?: {
                rk?: boolean | undefined;
            } | undefined;
            hmac_create_secret?: boolean | undefined;
        };
        authenticator_attachment?: string | undefined;
    }>;
}, "strict", z$1.ZodTypeAny, {
    authenticator_response: {
        type: "public-key";
        id: string;
        raw_id: string;
        response: {
            client_data_json: string;
            attestation_object: string;
            public_key?: string | undefined;
            transports?: any[] | undefined;
            authenticator_data?: string | undefined;
            public_key_algorithm?: number | undefined;
        };
        client_extension_results: {
            app_id?: boolean | undefined;
            cred_props?: {
                rk?: boolean | undefined;
            } | undefined;
            hmac_create_secret?: boolean | undefined;
        };
        authenticator_attachment?: string | undefined;
    };
    relying_party?: string | undefined;
}, {
    authenticator_response: {
        type: "public-key";
        id: string;
        raw_id: string;
        response: {
            client_data_json: string;
            attestation_object: string;
            public_key?: string | undefined;
            transports?: any[] | undefined;
            authenticator_data?: string | undefined;
            public_key_algorithm?: number | undefined;
        };
        client_extension_results: {
            app_id?: boolean | undefined;
            cred_props?: {
                rk?: boolean | undefined;
            } | undefined;
            hmac_create_secret?: boolean | undefined;
        };
        authenticator_attachment?: string | undefined;
    };
    relying_party?: string | undefined;
}>;
type PasskeyRegisterInputType = z$1.infer<typeof PasskeyRegisterInput>;
declare const PasskeyAuthenticateInput: z$1.ZodObject<{
    relying_party: z$1.ZodOptional<z$1.ZodString>;
    challenge: z$1.ZodString;
    authenticator_response: z$1.ZodObject<{
        id: z$1.ZodString;
        raw_id: z$1.ZodString;
        response: z$1.ZodObject<{
            client_data_json: z$1.ZodString;
            authenticator_data: z$1.ZodString;
            signature: z$1.ZodString;
            user_handle: z$1.ZodOptional<z$1.ZodString>;
        }, "strip", z$1.ZodTypeAny, {
            signature: string;
            client_data_json: string;
            authenticator_data: string;
            user_handle?: string | undefined;
        }, {
            signature: string;
            client_data_json: string;
            authenticator_data: string;
            user_handle?: string | undefined;
        }>;
        authenticator_attachment: z$1.ZodOptional<z$1.ZodString>;
        client_extension_results: z$1.ZodObject<{
            app_id: z$1.ZodOptional<z$1.ZodBoolean>;
            cred_props: z$1.ZodOptional<z$1.ZodObject<{
                rk: z$1.ZodOptional<z$1.ZodBoolean>;
            }, "strip", z$1.ZodTypeAny, {
                rk?: boolean | undefined;
            }, {
                rk?: boolean | undefined;
            }>>;
            hmac_create_secret: z$1.ZodOptional<z$1.ZodBoolean>;
        }, "strip", z$1.ZodTypeAny, {
            app_id?: boolean | undefined;
            cred_props?: {
                rk?: boolean | undefined;
            } | undefined;
            hmac_create_secret?: boolean | undefined;
        }, {
            app_id?: boolean | undefined;
            cred_props?: {
                rk?: boolean | undefined;
            } | undefined;
            hmac_create_secret?: boolean | undefined;
        }>;
        type: z$1.ZodLiteral<"public-key">;
    }, "strip", z$1.ZodTypeAny, {
        type: "public-key";
        id: string;
        raw_id: string;
        response: {
            signature: string;
            client_data_json: string;
            authenticator_data: string;
            user_handle?: string | undefined;
        };
        client_extension_results: {
            app_id?: boolean | undefined;
            cred_props?: {
                rk?: boolean | undefined;
            } | undefined;
            hmac_create_secret?: boolean | undefined;
        };
        authenticator_attachment?: string | undefined;
    }, {
        type: "public-key";
        id: string;
        raw_id: string;
        response: {
            signature: string;
            client_data_json: string;
            authenticator_data: string;
            user_handle?: string | undefined;
        };
        client_extension_results: {
            app_id?: boolean | undefined;
            cred_props?: {
                rk?: boolean | undefined;
            } | undefined;
            hmac_create_secret?: boolean | undefined;
        };
        authenticator_attachment?: string | undefined;
    }>;
}, "strict", z$1.ZodTypeAny, {
    challenge: string;
    authenticator_response: {
        type: "public-key";
        id: string;
        raw_id: string;
        response: {
            signature: string;
            client_data_json: string;
            authenticator_data: string;
            user_handle?: string | undefined;
        };
        client_extension_results: {
            app_id?: boolean | undefined;
            cred_props?: {
                rk?: boolean | undefined;
            } | undefined;
            hmac_create_secret?: boolean | undefined;
        };
        authenticator_attachment?: string | undefined;
    };
    relying_party?: string | undefined;
}, {
    challenge: string;
    authenticator_response: {
        type: "public-key";
        id: string;
        raw_id: string;
        response: {
            signature: string;
            client_data_json: string;
            authenticator_data: string;
            user_handle?: string | undefined;
        };
        client_extension_results: {
            app_id?: boolean | undefined;
            cred_props?: {
                rk?: boolean | undefined;
            } | undefined;
            hmac_create_secret?: boolean | undefined;
        };
        authenticator_attachment?: string | undefined;
    };
    relying_party?: string | undefined;
}>;
type PasskeyAuthenticateInputType = z$1.infer<typeof PasskeyAuthenticateInput>;
declare const UnlinkPasskeyInput: z$1.ZodObject<{
    credential_id: z$1.ZodString;
    remove_as_mfa: z$1.ZodDefault<z$1.ZodBoolean>;
}, "strip", z$1.ZodTypeAny, {
    credential_id: string;
    remove_as_mfa: boolean;
}, {
    credential_id: string;
    remove_as_mfa?: boolean | undefined;
}>;
interface PrivyUnlinkPasskeyInput extends z$1.infer<typeof UnlinkPasskeyInput> {
}

declare const PolicyAction: z.ZodEnum<["ALLOW", "DENY"]>;
type PolicyActionType = z.infer<typeof PolicyAction>;
declare const literalSchema: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodNull]>;
type Literal = z.infer<typeof literalSchema>;
type Json = Literal | {
    [key: string]: Json;
} | Json[];
declare const ConditionOperator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
declare const BaseCondition: z.ZodObject<{
    operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
    value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
}, "strip", z.ZodTypeAny, {
    value: string | string[];
    operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
}, {
    value: string | string[];
    operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
}>;
declare const EthereumTransactionCondition: z.ZodObject<{
    field_source: z.ZodLiteral<"ethereum_transaction">;
    field: z.ZodUnion<[z.ZodLiteral<"to">, z.ZodLiteral<"value">]>;
} & {
    operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
    value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
}, "strip", z.ZodTypeAny, {
    value: string | string[];
    operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
    field_source: "ethereum_transaction";
    field: "value" | "to";
}, {
    value: string | string[];
    operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
    field_source: "ethereum_transaction";
    field: "value" | "to";
}>;
type EthereumTransactionConditionType = z.infer<typeof EthereumTransactionCondition>;
declare const EthereumCalldataCondition: z.ZodObject<{
    field_source: z.ZodLiteral<"ethereum_calldata">;
    field: z.ZodString;
    /** The ABI of the contract to decode the calldata, only used if field_source is ethereum_calldata */
    abi: z.ZodType<Json, z.ZodTypeDef, Json>;
} & {
    operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
    value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
}, "strip", z.ZodTypeAny, {
    value: string | string[];
    operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
    field_source: "ethereum_calldata";
    field: string;
    abi: Json;
}, {
    value: string | string[];
    operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
    field_source: "ethereum_calldata";
    field: string;
    abi: Json;
}>;
type EthereumCalldataConditionType = z.infer<typeof EthereumCalldataCondition>;
declare const EthereumTypedDataDomainCondition: z.ZodObject<{
    field_source: z.ZodLiteral<"ethereum_typed_data_domain">;
    field: z.ZodUnion<[z.ZodLiteral<"chainId">, z.ZodLiteral<"verifyingContract">, z.ZodLiteral<"chain_id">, z.ZodLiteral<"verifying_contract">]>;
} & {
    operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
    value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
}, "strip", z.ZodTypeAny, {
    value: string | string[];
    operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
    field_source: "ethereum_typed_data_domain";
    field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
}, {
    value: string | string[];
    operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
    field_source: "ethereum_typed_data_domain";
    field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
}>;
type EthereumTypedDataDomainConditionType = z.infer<typeof EthereumTypedDataDomainCondition>;
declare const EthereumTypedDataMessageCondition: z.ZodObject<{
    field_source: z.ZodLiteral<"ethereum_typed_data_message">;
    field: z.ZodString;
    typed_data: z.ZodObject<{
        types: z.ZodEffects<z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            type: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: string;
            name: string;
        }, {
            type: string;
            name: string;
        }>, "many">>, Record<string, {
            type: string;
            name: string;
        }[]>, Record<string, {
            type: string;
            name: string;
        }[]>>;
        primary_type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        types: Record<string, {
            type: string;
            name: string;
        }[]>;
        primary_type: string;
    }, {
        types: Record<string, {
            type: string;
            name: string;
        }[]>;
        primary_type: string;
    }>;
} & {
    operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
    value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
}, "strip", z.ZodTypeAny, {
    value: string | string[];
    typed_data: {
        types: Record<string, {
            type: string;
            name: string;
        }[]>;
        primary_type: string;
    };
    operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
    field_source: "ethereum_typed_data_message";
    field: string;
}, {
    value: string | string[];
    typed_data: {
        types: Record<string, {
            type: string;
            name: string;
        }[]>;
        primary_type: string;
    };
    operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
    field_source: "ethereum_typed_data_message";
    field: string;
}>;
type EthereumTypedDataMessageConditionType = z.infer<typeof EthereumTypedDataMessageCondition>;
declare const SolanaProgramInstruction: z.ZodObject<{
    field_source: z.ZodLiteral<"solana_program_instruction">;
    field: z.ZodLiteral<"programId">;
} & {
    operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
    value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
}, "strip", z.ZodTypeAny, {
    value: string | string[];
    operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
    field_source: "solana_program_instruction";
    field: "programId";
}, {
    value: string | string[];
    operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
    field_source: "solana_program_instruction";
    field: "programId";
}>;
type SolanaProgramInstructionType = z.infer<typeof SolanaProgramInstruction>;
declare const SolanaSystemProgramInstruction: z.ZodObject<{
    field_source: z.ZodLiteral<"solana_system_program_instruction">;
    field: z.ZodUnion<[z.ZodLiteral<"instructionName">, z.ZodLiteral<"Transfer.from">, z.ZodLiteral<"Transfer.to">, z.ZodLiteral<"Transfer.lamports">]>;
} & {
    operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
    value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
}, "strip", z.ZodTypeAny, {
    value: string | string[];
    operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
    field_source: "solana_system_program_instruction";
    field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
}, {
    value: string | string[];
    operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
    field_source: "solana_system_program_instruction";
    field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
}>;
type SolanaSystemProgramInstructionType = z.infer<typeof SolanaSystemProgramInstruction>;
declare const SolanaTokenProgramInstruction: z.ZodObject<{
    field_source: z.ZodLiteral<"solana_token_program_instruction">;
    field: z.ZodUnion<[z.ZodLiteral<"instructionName">, z.ZodLiteral<"TransferChecked.source">, z.ZodLiteral<"TransferChecked.destination">, z.ZodLiteral<"TransferChecked.authority">, z.ZodLiteral<"TransferChecked.amount">, z.ZodLiteral<"TransferChecked.mint">]>;
} & {
    operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
    value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
}, "strip", z.ZodTypeAny, {
    value: string | string[];
    operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
    field_source: "solana_token_program_instruction";
    field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
}, {
    value: string | string[];
    operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
    field_source: "solana_token_program_instruction";
    field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
}>;
type SolanaTokenProgramInstructionType = z.infer<typeof SolanaTokenProgramInstruction>;
declare const Condition: z.ZodDiscriminatedUnion<"field_source", [z.ZodObject<{
    field_source: z.ZodLiteral<"ethereum_transaction">;
    field: z.ZodUnion<[z.ZodLiteral<"to">, z.ZodLiteral<"value">]>;
} & {
    operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
    value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
}, "strip", z.ZodTypeAny, {
    value: string | string[];
    operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
    field_source: "ethereum_transaction";
    field: "value" | "to";
}, {
    value: string | string[];
    operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
    field_source: "ethereum_transaction";
    field: "value" | "to";
}>, z.ZodObject<{
    field_source: z.ZodLiteral<"ethereum_calldata">;
    field: z.ZodString;
    /** The ABI of the contract to decode the calldata, only used if field_source is ethereum_calldata */
    abi: z.ZodType<Json, z.ZodTypeDef, Json>;
} & {
    operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
    value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
}, "strip", z.ZodTypeAny, {
    value: string | string[];
    operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
    field_source: "ethereum_calldata";
    field: string;
    abi: Json;
}, {
    value: string | string[];
    operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
    field_source: "ethereum_calldata";
    field: string;
    abi: Json;
}>, z.ZodObject<{
    field_source: z.ZodLiteral<"ethereum_typed_data_domain">;
    field: z.ZodUnion<[z.ZodLiteral<"chainId">, z.ZodLiteral<"verifyingContract">, z.ZodLiteral<"chain_id">, z.ZodLiteral<"verifying_contract">]>;
} & {
    operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
    value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
}, "strip", z.ZodTypeAny, {
    value: string | string[];
    operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
    field_source: "ethereum_typed_data_domain";
    field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
}, {
    value: string | string[];
    operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
    field_source: "ethereum_typed_data_domain";
    field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
}>, z.ZodObject<{
    field_source: z.ZodLiteral<"ethereum_typed_data_message">;
    field: z.ZodString;
    typed_data: z.ZodObject<{
        types: z.ZodEffects<z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            type: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: string;
            name: string;
        }, {
            type: string;
            name: string;
        }>, "many">>, Record<string, {
            type: string;
            name: string;
        }[]>, Record<string, {
            type: string;
            name: string;
        }[]>>;
        primary_type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        types: Record<string, {
            type: string;
            name: string;
        }[]>;
        primary_type: string;
    }, {
        types: Record<string, {
            type: string;
            name: string;
        }[]>;
        primary_type: string;
    }>;
} & {
    operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
    value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
}, "strip", z.ZodTypeAny, {
    value: string | string[];
    typed_data: {
        types: Record<string, {
            type: string;
            name: string;
        }[]>;
        primary_type: string;
    };
    operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
    field_source: "ethereum_typed_data_message";
    field: string;
}, {
    value: string | string[];
    typed_data: {
        types: Record<string, {
            type: string;
            name: string;
        }[]>;
        primary_type: string;
    };
    operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
    field_source: "ethereum_typed_data_message";
    field: string;
}>, z.ZodObject<{
    field_source: z.ZodLiteral<"solana_program_instruction">;
    field: z.ZodLiteral<"programId">;
} & {
    operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
    value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
}, "strip", z.ZodTypeAny, {
    value: string | string[];
    operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
    field_source: "solana_program_instruction";
    field: "programId";
}, {
    value: string | string[];
    operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
    field_source: "solana_program_instruction";
    field: "programId";
}>, z.ZodObject<{
    field_source: z.ZodLiteral<"solana_system_program_instruction">;
    field: z.ZodUnion<[z.ZodLiteral<"instructionName">, z.ZodLiteral<"Transfer.from">, z.ZodLiteral<"Transfer.to">, z.ZodLiteral<"Transfer.lamports">]>;
} & {
    operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
    value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
}, "strip", z.ZodTypeAny, {
    value: string | string[];
    operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
    field_source: "solana_system_program_instruction";
    field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
}, {
    value: string | string[];
    operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
    field_source: "solana_system_program_instruction";
    field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
}>, z.ZodObject<{
    field_source: z.ZodLiteral<"solana_token_program_instruction">;
    field: z.ZodUnion<[z.ZodLiteral<"instructionName">, z.ZodLiteral<"TransferChecked.source">, z.ZodLiteral<"TransferChecked.destination">, z.ZodLiteral<"TransferChecked.authority">, z.ZodLiteral<"TransferChecked.amount">, z.ZodLiteral<"TransferChecked.mint">]>;
} & {
    operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
    value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
}, "strip", z.ZodTypeAny, {
    value: string | string[];
    operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
    field_source: "solana_token_program_instruction";
    field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
}, {
    value: string | string[];
    operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
    field_source: "solana_token_program_instruction";
    field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
}>]>;
type ConditionType = z.infer<typeof Condition>;
declare const LegacyRule: z.ZodObject<{
    /** The name of the rule */
    name: z.ZodString;
    /** The conditions that must be true for the rule action to be applied */
    conditions: z.ZodArray<z.ZodDiscriminatedUnion<"field_source", [z.ZodObject<{
        field_source: z.ZodLiteral<"ethereum_transaction">;
        field: z.ZodUnion<[z.ZodLiteral<"to">, z.ZodLiteral<"value">]>;
    } & {
        operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
        value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
    }, "strip", z.ZodTypeAny, {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "ethereum_transaction";
        field: "value" | "to";
    }, {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "ethereum_transaction";
        field: "value" | "to";
    }>, z.ZodObject<{
        field_source: z.ZodLiteral<"ethereum_calldata">;
        field: z.ZodString;
        /** The ABI of the contract to decode the calldata, only used if field_source is ethereum_calldata */
        abi: z.ZodType<Json, z.ZodTypeDef, Json>;
    } & {
        operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
        value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
    }, "strip", z.ZodTypeAny, {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "ethereum_calldata";
        field: string;
        abi: Json;
    }, {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "ethereum_calldata";
        field: string;
        abi: Json;
    }>, z.ZodObject<{
        field_source: z.ZodLiteral<"ethereum_typed_data_domain">;
        field: z.ZodUnion<[z.ZodLiteral<"chainId">, z.ZodLiteral<"verifyingContract">, z.ZodLiteral<"chain_id">, z.ZodLiteral<"verifying_contract">]>;
    } & {
        operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
        value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
    }, "strip", z.ZodTypeAny, {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "ethereum_typed_data_domain";
        field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
    }, {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "ethereum_typed_data_domain";
        field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
    }>, z.ZodObject<{
        field_source: z.ZodLiteral<"ethereum_typed_data_message">;
        field: z.ZodString;
        typed_data: z.ZodObject<{
            types: z.ZodEffects<z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
                name: string;
            }, {
                type: string;
                name: string;
            }>, "many">>, Record<string, {
                type: string;
                name: string;
            }[]>, Record<string, {
                type: string;
                name: string;
            }[]>>;
            primary_type: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            types: Record<string, {
                type: string;
                name: string;
            }[]>;
            primary_type: string;
        }, {
            types: Record<string, {
                type: string;
                name: string;
            }[]>;
            primary_type: string;
        }>;
    } & {
        operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
        value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
    }, "strip", z.ZodTypeAny, {
        value: string | string[];
        typed_data: {
            types: Record<string, {
                type: string;
                name: string;
            }[]>;
            primary_type: string;
        };
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "ethereum_typed_data_message";
        field: string;
    }, {
        value: string | string[];
        typed_data: {
            types: Record<string, {
                type: string;
                name: string;
            }[]>;
            primary_type: string;
        };
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "ethereum_typed_data_message";
        field: string;
    }>, z.ZodObject<{
        field_source: z.ZodLiteral<"solana_program_instruction">;
        field: z.ZodLiteral<"programId">;
    } & {
        operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
        value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
    }, "strip", z.ZodTypeAny, {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "solana_program_instruction";
        field: "programId";
    }, {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "solana_program_instruction";
        field: "programId";
    }>, z.ZodObject<{
        field_source: z.ZodLiteral<"solana_system_program_instruction">;
        field: z.ZodUnion<[z.ZodLiteral<"instructionName">, z.ZodLiteral<"Transfer.from">, z.ZodLiteral<"Transfer.to">, z.ZodLiteral<"Transfer.lamports">]>;
    } & {
        operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
        value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
    }, "strip", z.ZodTypeAny, {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "solana_system_program_instruction";
        field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
    }, {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "solana_system_program_instruction";
        field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
    }>, z.ZodObject<{
        field_source: z.ZodLiteral<"solana_token_program_instruction">;
        field: z.ZodUnion<[z.ZodLiteral<"instructionName">, z.ZodLiteral<"TransferChecked.source">, z.ZodLiteral<"TransferChecked.destination">, z.ZodLiteral<"TransferChecked.authority">, z.ZodLiteral<"TransferChecked.amount">, z.ZodLiteral<"TransferChecked.mint">]>;
    } & {
        operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
        value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
    }, "strip", z.ZodTypeAny, {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "solana_token_program_instruction";
        field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
    }, {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "solana_token_program_instruction";
        field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
    }>]>, "many">;
    /** The action to apply if the rule conditions are true */
    action: z.ZodEnum<["ALLOW", "DENY"]>;
}, "strict", z.ZodTypeAny, {
    name: string;
    action: "ALLOW" | "DENY";
    conditions: ({
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "ethereum_transaction";
        field: "value" | "to";
    } | {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "ethereum_calldata";
        field: string;
        abi: Json;
    } | {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "ethereum_typed_data_domain";
        field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
    } | {
        value: string | string[];
        typed_data: {
            types: Record<string, {
                type: string;
                name: string;
            }[]>;
            primary_type: string;
        };
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "ethereum_typed_data_message";
        field: string;
    } | {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "solana_program_instruction";
        field: "programId";
    } | {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "solana_system_program_instruction";
        field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
    } | {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "solana_token_program_instruction";
        field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
    })[];
}, {
    name: string;
    action: "ALLOW" | "DENY";
    conditions: ({
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "ethereum_transaction";
        field: "value" | "to";
    } | {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "ethereum_calldata";
        field: string;
        abi: Json;
    } | {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "ethereum_typed_data_domain";
        field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
    } | {
        value: string | string[];
        typed_data: {
            types: Record<string, {
                type: string;
                name: string;
            }[]>;
            primary_type: string;
        };
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "ethereum_typed_data_message";
        field: string;
    } | {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "solana_program_instruction";
        field: "programId";
    } | {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "solana_system_program_instruction";
        field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
    } | {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "solana_token_program_instruction";
        field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
    })[];
}>;
type LegacyRuleType = z.infer<typeof LegacyRule>;
declare const PolicyMethod: z.ZodUnion<[z.ZodLiteral<"eth_sendTransaction">, z.ZodLiteral<"eth_signTransaction">, z.ZodLiteral<"eth_signTypedData_v4">, z.ZodLiteral<"signTransaction">, z.ZodLiteral<"signAndSendTransaction">, z.ZodLiteral<"exportPrivateKey">, z.ZodLiteral<"*">]>;
type PolicyMethodType = z.infer<typeof PolicyMethod>;
declare const LegacyMethodRules: z.ZodEffects<z.ZodObject<{
    method: z.ZodUnion<[z.ZodLiteral<"eth_sendTransaction">, z.ZodLiteral<"eth_signTransaction">, z.ZodLiteral<"eth_signTypedData_v4">, z.ZodLiteral<"signTransaction">, z.ZodLiteral<"signAndSendTransaction">, z.ZodLiteral<"exportPrivateKey">, z.ZodLiteral<"*">]>;
    rules: z.ZodArray<z.ZodObject<{
        /** The name of the rule */
        name: z.ZodString;
        /** The conditions that must be true for the rule action to be applied */
        conditions: z.ZodArray<z.ZodDiscriminatedUnion<"field_source", [z.ZodObject<{
            field_source: z.ZodLiteral<"ethereum_transaction">;
            field: z.ZodUnion<[z.ZodLiteral<"to">, z.ZodLiteral<"value">]>;
        } & {
            operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
            value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        }, "strip", z.ZodTypeAny, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        }, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        }>, z.ZodObject<{
            field_source: z.ZodLiteral<"ethereum_calldata">;
            field: z.ZodString;
            /** The ABI of the contract to decode the calldata, only used if field_source is ethereum_calldata */
            abi: z.ZodType<Json, z.ZodTypeDef, Json>;
        } & {
            operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
            value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        }, "strip", z.ZodTypeAny, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        }, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        }>, z.ZodObject<{
            field_source: z.ZodLiteral<"ethereum_typed_data_domain">;
            field: z.ZodUnion<[z.ZodLiteral<"chainId">, z.ZodLiteral<"verifyingContract">, z.ZodLiteral<"chain_id">, z.ZodLiteral<"verifying_contract">]>;
        } & {
            operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
            value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        }, "strip", z.ZodTypeAny, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        }, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        }>, z.ZodObject<{
            field_source: z.ZodLiteral<"ethereum_typed_data_message">;
            field: z.ZodString;
            typed_data: z.ZodObject<{
                types: z.ZodEffects<z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    type: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: string;
                    name: string;
                }, {
                    type: string;
                    name: string;
                }>, "many">>, Record<string, {
                    type: string;
                    name: string;
                }[]>, Record<string, {
                    type: string;
                    name: string;
                }[]>>;
                primary_type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            }, {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            }>;
        } & {
            operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
            value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        }, "strip", z.ZodTypeAny, {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        }, {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        }>, z.ZodObject<{
            field_source: z.ZodLiteral<"solana_program_instruction">;
            field: z.ZodLiteral<"programId">;
        } & {
            operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
            value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        }, "strip", z.ZodTypeAny, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        }, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        }>, z.ZodObject<{
            field_source: z.ZodLiteral<"solana_system_program_instruction">;
            field: z.ZodUnion<[z.ZodLiteral<"instructionName">, z.ZodLiteral<"Transfer.from">, z.ZodLiteral<"Transfer.to">, z.ZodLiteral<"Transfer.lamports">]>;
        } & {
            operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
            value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        }, "strip", z.ZodTypeAny, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        }, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        }>, z.ZodObject<{
            field_source: z.ZodLiteral<"solana_token_program_instruction">;
            field: z.ZodUnion<[z.ZodLiteral<"instructionName">, z.ZodLiteral<"TransferChecked.source">, z.ZodLiteral<"TransferChecked.destination">, z.ZodLiteral<"TransferChecked.authority">, z.ZodLiteral<"TransferChecked.amount">, z.ZodLiteral<"TransferChecked.mint">]>;
        } & {
            operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
            value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        }, "strip", z.ZodTypeAny, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        }, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        }>]>, "many">;
        /** The action to apply if the rule conditions are true */
        action: z.ZodEnum<["ALLOW", "DENY"]>;
    }, "strict", z.ZodTypeAny, {
        name: string;
        action: "ALLOW" | "DENY";
        conditions: ({
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        } | {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        })[];
    }, {
        name: string;
        action: "ALLOW" | "DENY";
        conditions: ({
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        } | {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        })[];
    }>, "many">;
}, "strict", z.ZodTypeAny, {
    method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
    rules: {
        name: string;
        action: "ALLOW" | "DENY";
        conditions: ({
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        } | {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        })[];
    }[];
}, {
    method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
    rules: {
        name: string;
        action: "ALLOW" | "DENY";
        conditions: ({
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        } | {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        })[];
    }[];
}>, {
    method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
    name: string;
    action: "ALLOW" | "DENY";
    conditions: ({
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "ethereum_transaction";
        field: "value" | "to";
    } | {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "ethereum_calldata";
        field: string;
        abi: Json;
    } | {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "ethereum_typed_data_domain";
        field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
    } | {
        value: string | string[];
        typed_data: {
            types: Record<string, {
                type: string;
                name: string;
            }[]>;
            primary_type: string;
        };
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "ethereum_typed_data_message";
        field: string;
    } | {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "solana_program_instruction";
        field: "programId";
    } | {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "solana_system_program_instruction";
        field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
    } | {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "solana_token_program_instruction";
        field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
    })[];
}[], {
    method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
    rules: {
        name: string;
        action: "ALLOW" | "DENY";
        conditions: ({
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        } | {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        })[];
    }[];
}>;
type LegacyMethodRulesType = z.infer<typeof LegacyMethodRules>;
declare const Rule: z.ZodObject<{
    /** The name of the rule */
    name: z.ZodString;
    /** The method the rule applies to */
    method: z.ZodUnion<[z.ZodLiteral<"eth_sendTransaction">, z.ZodLiteral<"eth_signTransaction">, z.ZodLiteral<"eth_signTypedData_v4">, z.ZodLiteral<"signTransaction">, z.ZodLiteral<"signAndSendTransaction">, z.ZodLiteral<"exportPrivateKey">, z.ZodLiteral<"*">]>;
    /** The conditions that must be true for the rule action to be applied */
    conditions: z.ZodArray<z.ZodDiscriminatedUnion<"field_source", [z.ZodObject<{
        field_source: z.ZodLiteral<"ethereum_transaction">;
        field: z.ZodUnion<[z.ZodLiteral<"to">, z.ZodLiteral<"value">]>;
    } & {
        operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
        value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
    }, "strip", z.ZodTypeAny, {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "ethereum_transaction";
        field: "value" | "to";
    }, {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "ethereum_transaction";
        field: "value" | "to";
    }>, z.ZodObject<{
        field_source: z.ZodLiteral<"ethereum_calldata">;
        field: z.ZodString;
        /** The ABI of the contract to decode the calldata, only used if field_source is ethereum_calldata */
        abi: z.ZodType<Json, z.ZodTypeDef, Json>;
    } & {
        operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
        value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
    }, "strip", z.ZodTypeAny, {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "ethereum_calldata";
        field: string;
        abi: Json;
    }, {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "ethereum_calldata";
        field: string;
        abi: Json;
    }>, z.ZodObject<{
        field_source: z.ZodLiteral<"ethereum_typed_data_domain">;
        field: z.ZodUnion<[z.ZodLiteral<"chainId">, z.ZodLiteral<"verifyingContract">, z.ZodLiteral<"chain_id">, z.ZodLiteral<"verifying_contract">]>;
    } & {
        operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
        value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
    }, "strip", z.ZodTypeAny, {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "ethereum_typed_data_domain";
        field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
    }, {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "ethereum_typed_data_domain";
        field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
    }>, z.ZodObject<{
        field_source: z.ZodLiteral<"ethereum_typed_data_message">;
        field: z.ZodString;
        typed_data: z.ZodObject<{
            types: z.ZodEffects<z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
                name: string;
            }, {
                type: string;
                name: string;
            }>, "many">>, Record<string, {
                type: string;
                name: string;
            }[]>, Record<string, {
                type: string;
                name: string;
            }[]>>;
            primary_type: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            types: Record<string, {
                type: string;
                name: string;
            }[]>;
            primary_type: string;
        }, {
            types: Record<string, {
                type: string;
                name: string;
            }[]>;
            primary_type: string;
        }>;
    } & {
        operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
        value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
    }, "strip", z.ZodTypeAny, {
        value: string | string[];
        typed_data: {
            types: Record<string, {
                type: string;
                name: string;
            }[]>;
            primary_type: string;
        };
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "ethereum_typed_data_message";
        field: string;
    }, {
        value: string | string[];
        typed_data: {
            types: Record<string, {
                type: string;
                name: string;
            }[]>;
            primary_type: string;
        };
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "ethereum_typed_data_message";
        field: string;
    }>, z.ZodObject<{
        field_source: z.ZodLiteral<"solana_program_instruction">;
        field: z.ZodLiteral<"programId">;
    } & {
        operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
        value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
    }, "strip", z.ZodTypeAny, {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "solana_program_instruction";
        field: "programId";
    }, {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "solana_program_instruction";
        field: "programId";
    }>, z.ZodObject<{
        field_source: z.ZodLiteral<"solana_system_program_instruction">;
        field: z.ZodUnion<[z.ZodLiteral<"instructionName">, z.ZodLiteral<"Transfer.from">, z.ZodLiteral<"Transfer.to">, z.ZodLiteral<"Transfer.lamports">]>;
    } & {
        operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
        value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
    }, "strip", z.ZodTypeAny, {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "solana_system_program_instruction";
        field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
    }, {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "solana_system_program_instruction";
        field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
    }>, z.ZodObject<{
        field_source: z.ZodLiteral<"solana_token_program_instruction">;
        field: z.ZodUnion<[z.ZodLiteral<"instructionName">, z.ZodLiteral<"TransferChecked.source">, z.ZodLiteral<"TransferChecked.destination">, z.ZodLiteral<"TransferChecked.authority">, z.ZodLiteral<"TransferChecked.amount">, z.ZodLiteral<"TransferChecked.mint">]>;
    } & {
        operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
        value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
    }, "strip", z.ZodTypeAny, {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "solana_token_program_instruction";
        field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
    }, {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "solana_token_program_instruction";
        field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
    }>]>, "many">;
    /** The action to apply if the rule conditions are true */
    action: z.ZodEnum<["ALLOW", "DENY"]>;
}, "strict", z.ZodTypeAny, {
    method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
    name: string;
    action: "ALLOW" | "DENY";
    conditions: ({
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "ethereum_transaction";
        field: "value" | "to";
    } | {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "ethereum_calldata";
        field: string;
        abi: Json;
    } | {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "ethereum_typed_data_domain";
        field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
    } | {
        value: string | string[];
        typed_data: {
            types: Record<string, {
                type: string;
                name: string;
            }[]>;
            primary_type: string;
        };
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "ethereum_typed_data_message";
        field: string;
    } | {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "solana_program_instruction";
        field: "programId";
    } | {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "solana_system_program_instruction";
        field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
    } | {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "solana_token_program_instruction";
        field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
    })[];
}, {
    method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
    name: string;
    action: "ALLOW" | "DENY";
    conditions: ({
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "ethereum_transaction";
        field: "value" | "to";
    } | {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "ethereum_calldata";
        field: string;
        abi: Json;
    } | {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "ethereum_typed_data_domain";
        field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
    } | {
        value: string | string[];
        typed_data: {
            types: Record<string, {
                type: string;
                name: string;
            }[]>;
            primary_type: string;
        };
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "ethereum_typed_data_message";
        field: string;
    } | {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "solana_program_instruction";
        field: "programId";
    } | {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "solana_system_program_instruction";
        field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
    } | {
        value: string | string[];
        operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
        field_source: "solana_token_program_instruction";
        field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
    })[];
}>;
type RuleType = z.infer<typeof Rule>;
declare const PolicyWithoutValidation: z.ZodEffects<z.ZodEffects<z.ZodUnion<[z.ZodObject<{
    owner: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        public_key: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        public_key: string;
    }, {
        public_key: string;
    }>>>;
    owner_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    /** The policy schema version */
    version: z.ZodLiteral<"1.0">;
    /** The name of the policy */
    name: z.ZodString;
    /** The chain type the policy applies to */
    chain_type: z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"cosmos">, z.ZodLiteral<"stellar">, z.ZodLiteral<"sui">]>, z.ZodUnion<[z.ZodLiteral<"solana">, z.ZodLiteral<"ethereum">]>]>;
    /** The rules that apply to each method the policy covers, each method can only be specified once */
    method_rules: z.ZodArray<z.ZodEffects<z.ZodObject<{
        method: z.ZodUnion<[z.ZodLiteral<"eth_sendTransaction">, z.ZodLiteral<"eth_signTransaction">, z.ZodLiteral<"eth_signTypedData_v4">, z.ZodLiteral<"signTransaction">, z.ZodLiteral<"signAndSendTransaction">, z.ZodLiteral<"exportPrivateKey">, z.ZodLiteral<"*">]>;
        rules: z.ZodArray<z.ZodObject<{
            /** The name of the rule */
            name: z.ZodString;
            /** The conditions that must be true for the rule action to be applied */
            conditions: z.ZodArray<z.ZodDiscriminatedUnion<"field_source", [z.ZodObject<{
                field_source: z.ZodLiteral<"ethereum_transaction">;
                field: z.ZodUnion<[z.ZodLiteral<"to">, z.ZodLiteral<"value">]>;
            } & {
                operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
                value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
            }, "strip", z.ZodTypeAny, {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_transaction";
                field: "value" | "to";
            }, {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_transaction";
                field: "value" | "to";
            }>, z.ZodObject<{
                field_source: z.ZodLiteral<"ethereum_calldata">;
                field: z.ZodString;
                /** The ABI of the contract to decode the calldata, only used if field_source is ethereum_calldata */
                abi: z.ZodType<Json, z.ZodTypeDef, Json>;
            } & {
                operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
                value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
            }, "strip", z.ZodTypeAny, {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_calldata";
                field: string;
                abi: Json;
            }, {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_calldata";
                field: string;
                abi: Json;
            }>, z.ZodObject<{
                field_source: z.ZodLiteral<"ethereum_typed_data_domain">;
                field: z.ZodUnion<[z.ZodLiteral<"chainId">, z.ZodLiteral<"verifyingContract">, z.ZodLiteral<"chain_id">, z.ZodLiteral<"verifying_contract">]>;
            } & {
                operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
                value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
            }, "strip", z.ZodTypeAny, {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_domain";
                field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
            }, {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_domain";
                field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
            }>, z.ZodObject<{
                field_source: z.ZodLiteral<"ethereum_typed_data_message">;
                field: z.ZodString;
                typed_data: z.ZodObject<{
                    types: z.ZodEffects<z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
                        name: z.ZodString;
                        type: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        name: string;
                    }, {
                        type: string;
                        name: string;
                    }>, "many">>, Record<string, {
                        type: string;
                        name: string;
                    }[]>, Record<string, {
                        type: string;
                        name: string;
                    }[]>>;
                    primary_type: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    types: Record<string, {
                        type: string;
                        name: string;
                    }[]>;
                    primary_type: string;
                }, {
                    types: Record<string, {
                        type: string;
                        name: string;
                    }[]>;
                    primary_type: string;
                }>;
            } & {
                operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
                value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
            }, "strip", z.ZodTypeAny, {
                value: string | string[];
                typed_data: {
                    types: Record<string, {
                        type: string;
                        name: string;
                    }[]>;
                    primary_type: string;
                };
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_message";
                field: string;
            }, {
                value: string | string[];
                typed_data: {
                    types: Record<string, {
                        type: string;
                        name: string;
                    }[]>;
                    primary_type: string;
                };
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_message";
                field: string;
            }>, z.ZodObject<{
                field_source: z.ZodLiteral<"solana_program_instruction">;
                field: z.ZodLiteral<"programId">;
            } & {
                operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
                value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
            }, "strip", z.ZodTypeAny, {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_program_instruction";
                field: "programId";
            }, {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_program_instruction";
                field: "programId";
            }>, z.ZodObject<{
                field_source: z.ZodLiteral<"solana_system_program_instruction">;
                field: z.ZodUnion<[z.ZodLiteral<"instructionName">, z.ZodLiteral<"Transfer.from">, z.ZodLiteral<"Transfer.to">, z.ZodLiteral<"Transfer.lamports">]>;
            } & {
                operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
                value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
            }, "strip", z.ZodTypeAny, {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_system_program_instruction";
                field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
            }, {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_system_program_instruction";
                field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
            }>, z.ZodObject<{
                field_source: z.ZodLiteral<"solana_token_program_instruction">;
                field: z.ZodUnion<[z.ZodLiteral<"instructionName">, z.ZodLiteral<"TransferChecked.source">, z.ZodLiteral<"TransferChecked.destination">, z.ZodLiteral<"TransferChecked.authority">, z.ZodLiteral<"TransferChecked.amount">, z.ZodLiteral<"TransferChecked.mint">]>;
            } & {
                operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
                value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
            }, "strip", z.ZodTypeAny, {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_token_program_instruction";
                field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
            }, {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_token_program_instruction";
                field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
            }>]>, "many">;
            /** The action to apply if the rule conditions are true */
            action: z.ZodEnum<["ALLOW", "DENY"]>;
        }, "strict", z.ZodTypeAny, {
            name: string;
            action: "ALLOW" | "DENY";
            conditions: ({
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_transaction";
                field: "value" | "to";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_calldata";
                field: string;
                abi: Json;
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_domain";
                field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
            } | {
                value: string | string[];
                typed_data: {
                    types: Record<string, {
                        type: string;
                        name: string;
                    }[]>;
                    primary_type: string;
                };
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_message";
                field: string;
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_program_instruction";
                field: "programId";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_system_program_instruction";
                field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_token_program_instruction";
                field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
            })[];
        }, {
            name: string;
            action: "ALLOW" | "DENY";
            conditions: ({
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_transaction";
                field: "value" | "to";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_calldata";
                field: string;
                abi: Json;
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_domain";
                field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
            } | {
                value: string | string[];
                typed_data: {
                    types: Record<string, {
                        type: string;
                        name: string;
                    }[]>;
                    primary_type: string;
                };
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_message";
                field: string;
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_program_instruction";
                field: "programId";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_system_program_instruction";
                field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_token_program_instruction";
                field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
            })[];
        }>, "many">;
    }, "strict", z.ZodTypeAny, {
        method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
        rules: {
            name: string;
            action: "ALLOW" | "DENY";
            conditions: ({
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_transaction";
                field: "value" | "to";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_calldata";
                field: string;
                abi: Json;
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_domain";
                field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
            } | {
                value: string | string[];
                typed_data: {
                    types: Record<string, {
                        type: string;
                        name: string;
                    }[]>;
                    primary_type: string;
                };
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_message";
                field: string;
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_program_instruction";
                field: "programId";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_system_program_instruction";
                field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_token_program_instruction";
                field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
            })[];
        }[];
    }, {
        method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
        rules: {
            name: string;
            action: "ALLOW" | "DENY";
            conditions: ({
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_transaction";
                field: "value" | "to";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_calldata";
                field: string;
                abi: Json;
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_domain";
                field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
            } | {
                value: string | string[];
                typed_data: {
                    types: Record<string, {
                        type: string;
                        name: string;
                    }[]>;
                    primary_type: string;
                };
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_message";
                field: string;
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_program_instruction";
                field: "programId";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_system_program_instruction";
                field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_token_program_instruction";
                field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
            })[];
        }[];
    }>, {
        method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
        name: string;
        action: "ALLOW" | "DENY";
        conditions: ({
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        } | {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        })[];
    }[], {
        method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
        rules: {
            name: string;
            action: "ALLOW" | "DENY";
            conditions: ({
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_transaction";
                field: "value" | "to";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_calldata";
                field: string;
                abi: Json;
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_domain";
                field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
            } | {
                value: string | string[];
                typed_data: {
                    types: Record<string, {
                        type: string;
                        name: string;
                    }[]>;
                    primary_type: string;
                };
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_message";
                field: string;
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_program_instruction";
                field: "programId";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_system_program_instruction";
                field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_token_program_instruction";
                field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
            })[];
        }[];
    }>, "many">;
    /** The default action to take if the request does not match the method or if no rules match for the request's method */
    default_action: z.ZodEnum<["ALLOW", "DENY"]>;
}, "strict", z.ZodTypeAny, {
    name: string;
    chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
    version: "1.0";
    method_rules: {
        method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
        name: string;
        action: "ALLOW" | "DENY";
        conditions: ({
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        } | {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        })[];
    }[][];
    default_action: "ALLOW" | "DENY";
    owner_id?: string | null | undefined;
    owner?: {
        public_key: string;
    } | null | undefined;
}, {
    name: string;
    chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
    version: "1.0";
    method_rules: {
        method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
        rules: {
            name: string;
            action: "ALLOW" | "DENY";
            conditions: ({
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_transaction";
                field: "value" | "to";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_calldata";
                field: string;
                abi: Json;
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_domain";
                field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
            } | {
                value: string | string[];
                typed_data: {
                    types: Record<string, {
                        type: string;
                        name: string;
                    }[]>;
                    primary_type: string;
                };
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_message";
                field: string;
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_program_instruction";
                field: "programId";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_system_program_instruction";
                field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_token_program_instruction";
                field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
            })[];
        }[];
    }[];
    default_action: "ALLOW" | "DENY";
    owner_id?: string | null | undefined;
    owner?: {
        public_key: string;
    } | null | undefined;
}>, z.ZodObject<{
    owner: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        public_key: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        public_key: string;
    }, {
        public_key: string;
    }>>>;
    owner_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    /** The policy schema version */
    version: z.ZodLiteral<"1.0">;
    /** The name of the policy */
    name: z.ZodString;
    /** The chain type the policy applies to */
    chain_type: z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"cosmos">, z.ZodLiteral<"stellar">, z.ZodLiteral<"sui">]>, z.ZodUnion<[z.ZodLiteral<"solana">, z.ZodLiteral<"ethereum">]>]>;
    /** The rules that apply to each method the policy covers, each method can only be specified once */
    rules: z.ZodArray<z.ZodObject<{
        /** The name of the rule */
        name: z.ZodString;
        /** The method the rule applies to */
        method: z.ZodUnion<[z.ZodLiteral<"eth_sendTransaction">, z.ZodLiteral<"eth_signTransaction">, z.ZodLiteral<"eth_signTypedData_v4">, z.ZodLiteral<"signTransaction">, z.ZodLiteral<"signAndSendTransaction">, z.ZodLiteral<"exportPrivateKey">, z.ZodLiteral<"*">]>;
        /** The conditions that must be true for the rule action to be applied */
        conditions: z.ZodArray<z.ZodDiscriminatedUnion<"field_source", [z.ZodObject<{
            field_source: z.ZodLiteral<"ethereum_transaction">;
            field: z.ZodUnion<[z.ZodLiteral<"to">, z.ZodLiteral<"value">]>;
        } & {
            operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
            value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        }, "strip", z.ZodTypeAny, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        }, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        }>, z.ZodObject<{
            field_source: z.ZodLiteral<"ethereum_calldata">;
            field: z.ZodString;
            /** The ABI of the contract to decode the calldata, only used if field_source is ethereum_calldata */
            abi: z.ZodType<Json, z.ZodTypeDef, Json>;
        } & {
            operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
            value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        }, "strip", z.ZodTypeAny, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        }, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        }>, z.ZodObject<{
            field_source: z.ZodLiteral<"ethereum_typed_data_domain">;
            field: z.ZodUnion<[z.ZodLiteral<"chainId">, z.ZodLiteral<"verifyingContract">, z.ZodLiteral<"chain_id">, z.ZodLiteral<"verifying_contract">]>;
        } & {
            operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
            value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        }, "strip", z.ZodTypeAny, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        }, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        }>, z.ZodObject<{
            field_source: z.ZodLiteral<"ethereum_typed_data_message">;
            field: z.ZodString;
            typed_data: z.ZodObject<{
                types: z.ZodEffects<z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    type: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: string;
                    name: string;
                }, {
                    type: string;
                    name: string;
                }>, "many">>, Record<string, {
                    type: string;
                    name: string;
                }[]>, Record<string, {
                    type: string;
                    name: string;
                }[]>>;
                primary_type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            }, {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            }>;
        } & {
            operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
            value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        }, "strip", z.ZodTypeAny, {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        }, {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        }>, z.ZodObject<{
            field_source: z.ZodLiteral<"solana_program_instruction">;
            field: z.ZodLiteral<"programId">;
        } & {
            operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
            value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        }, "strip", z.ZodTypeAny, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        }, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        }>, z.ZodObject<{
            field_source: z.ZodLiteral<"solana_system_program_instruction">;
            field: z.ZodUnion<[z.ZodLiteral<"instructionName">, z.ZodLiteral<"Transfer.from">, z.ZodLiteral<"Transfer.to">, z.ZodLiteral<"Transfer.lamports">]>;
        } & {
            operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
            value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        }, "strip", z.ZodTypeAny, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        }, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        }>, z.ZodObject<{
            field_source: z.ZodLiteral<"solana_token_program_instruction">;
            field: z.ZodUnion<[z.ZodLiteral<"instructionName">, z.ZodLiteral<"TransferChecked.source">, z.ZodLiteral<"TransferChecked.destination">, z.ZodLiteral<"TransferChecked.authority">, z.ZodLiteral<"TransferChecked.amount">, z.ZodLiteral<"TransferChecked.mint">]>;
        } & {
            operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
            value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        }, "strip", z.ZodTypeAny, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        }, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        }>]>, "many">;
        /** The action to apply if the rule conditions are true */
        action: z.ZodEnum<["ALLOW", "DENY"]>;
    }, "strict", z.ZodTypeAny, {
        method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
        name: string;
        action: "ALLOW" | "DENY";
        conditions: ({
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        } | {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        })[];
    }, {
        method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
        name: string;
        action: "ALLOW" | "DENY";
        conditions: ({
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        } | {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        })[];
    }>, "many">;
}, "strict", z.ZodTypeAny, {
    name: string;
    chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
    rules: {
        method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
        name: string;
        action: "ALLOW" | "DENY";
        conditions: ({
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        } | {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        })[];
    }[];
    version: "1.0";
    owner_id?: string | null | undefined;
    owner?: {
        public_key: string;
    } | null | undefined;
}, {
    name: string;
    chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
    rules: {
        method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
        name: string;
        action: "ALLOW" | "DENY";
        conditions: ({
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        } | {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        })[];
    }[];
    version: "1.0";
    owner_id?: string | null | undefined;
    owner?: {
        public_key: string;
    } | null | undefined;
}>]>, {
    name: string;
    chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
    rules: {
        method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
        name: string;
        action: "ALLOW" | "DENY";
        conditions: ({
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        } | {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        })[];
    }[];
    version: "1.0";
    owner_id?: string | null | undefined;
    owner?: {
        public_key: string;
    } | null | undefined;
}, {
    name: string;
    chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
    version: "1.0";
    method_rules: {
        method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
        rules: {
            name: string;
            action: "ALLOW" | "DENY";
            conditions: ({
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_transaction";
                field: "value" | "to";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_calldata";
                field: string;
                abi: Json;
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_domain";
                field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
            } | {
                value: string | string[];
                typed_data: {
                    types: Record<string, {
                        type: string;
                        name: string;
                    }[]>;
                    primary_type: string;
                };
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_message";
                field: string;
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_program_instruction";
                field: "programId";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_system_program_instruction";
                field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_token_program_instruction";
                field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
            })[];
        }[];
    }[];
    default_action: "ALLOW" | "DENY";
    owner_id?: string | null | undefined;
    owner?: {
        public_key: string;
    } | null | undefined;
} | {
    name: string;
    chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
    rules: {
        method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
        name: string;
        action: "ALLOW" | "DENY";
        conditions: ({
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        } | {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        })[];
    }[];
    version: "1.0";
    owner_id?: string | null | undefined;
    owner?: {
        public_key: string;
    } | null | undefined;
}>, {
    name: string;
    chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
    rules: {
        method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
        name: string;
        action: "ALLOW" | "DENY";
        conditions: ({
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        } | {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        })[];
    }[];
    version: "1.0";
    owner_id?: string | null | undefined;
    owner?: {
        public_key: string;
    } | null | undefined;
}, {
    name: string;
    chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
    version: "1.0";
    method_rules: {
        method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
        rules: {
            name: string;
            action: "ALLOW" | "DENY";
            conditions: ({
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_transaction";
                field: "value" | "to";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_calldata";
                field: string;
                abi: Json;
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_domain";
                field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
            } | {
                value: string | string[];
                typed_data: {
                    types: Record<string, {
                        type: string;
                        name: string;
                    }[]>;
                    primary_type: string;
                };
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_message";
                field: string;
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_program_instruction";
                field: "programId";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_system_program_instruction";
                field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_token_program_instruction";
                field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
            })[];
        }[];
    }[];
    default_action: "ALLOW" | "DENY";
    owner_id?: string | null | undefined;
    owner?: {
        public_key: string;
    } | null | undefined;
} | {
    name: string;
    chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
    rules: {
        method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
        name: string;
        action: "ALLOW" | "DENY";
        conditions: ({
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        } | {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        })[];
    }[];
    version: "1.0";
    owner_id?: string | null | undefined;
    owner?: {
        public_key: string;
    } | null | undefined;
}>;
type PolicyType = z.infer<typeof PolicyWithoutValidation>;
declare const PolicyResponse: z.ZodObject<Omit<{
    owner: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        public_key: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        public_key: string;
    }, {
        public_key: string;
    }>>>;
    owner_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    /** The policy schema version */
    version: z.ZodLiteral<"1.0">;
    /** The name of the policy */
    name: z.ZodString;
    /** The chain type the policy applies to */
    chain_type: z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"cosmos">, z.ZodLiteral<"stellar">, z.ZodLiteral<"sui">]>, z.ZodUnion<[z.ZodLiteral<"solana">, z.ZodLiteral<"ethereum">]>]>;
    /** The rules that apply to each method the policy covers, each method can only be specified once */
    rules: z.ZodArray<z.ZodObject<{
        /** The name of the rule */
        name: z.ZodString;
        /** The method the rule applies to */
        method: z.ZodUnion<[z.ZodLiteral<"eth_sendTransaction">, z.ZodLiteral<"eth_signTransaction">, z.ZodLiteral<"eth_signTypedData_v4">, z.ZodLiteral<"signTransaction">, z.ZodLiteral<"signAndSendTransaction">, z.ZodLiteral<"exportPrivateKey">, z.ZodLiteral<"*">]>;
        /** The conditions that must be true for the rule action to be applied */
        conditions: z.ZodArray<z.ZodDiscriminatedUnion<"field_source", [z.ZodObject<{
            field_source: z.ZodLiteral<"ethereum_transaction">;
            field: z.ZodUnion<[z.ZodLiteral<"to">, z.ZodLiteral<"value">]>;
        } & {
            operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
            value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        }, "strip", z.ZodTypeAny, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        }, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        }>, z.ZodObject<{
            field_source: z.ZodLiteral<"ethereum_calldata">;
            field: z.ZodString;
            /** The ABI of the contract to decode the calldata, only used if field_source is ethereum_calldata */
            abi: z.ZodType<Json, z.ZodTypeDef, Json>;
        } & {
            operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
            value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        }, "strip", z.ZodTypeAny, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        }, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        }>, z.ZodObject<{
            field_source: z.ZodLiteral<"ethereum_typed_data_domain">;
            field: z.ZodUnion<[z.ZodLiteral<"chainId">, z.ZodLiteral<"verifyingContract">, z.ZodLiteral<"chain_id">, z.ZodLiteral<"verifying_contract">]>;
        } & {
            operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
            value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        }, "strip", z.ZodTypeAny, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        }, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        }>, z.ZodObject<{
            field_source: z.ZodLiteral<"ethereum_typed_data_message">;
            field: z.ZodString;
            typed_data: z.ZodObject<{
                types: z.ZodEffects<z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    type: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: string;
                    name: string;
                }, {
                    type: string;
                    name: string;
                }>, "many">>, Record<string, {
                    type: string;
                    name: string;
                }[]>, Record<string, {
                    type: string;
                    name: string;
                }[]>>;
                primary_type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            }, {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            }>;
        } & {
            operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
            value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        }, "strip", z.ZodTypeAny, {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        }, {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        }>, z.ZodObject<{
            field_source: z.ZodLiteral<"solana_program_instruction">;
            field: z.ZodLiteral<"programId">;
        } & {
            operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
            value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        }, "strip", z.ZodTypeAny, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        }, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        }>, z.ZodObject<{
            field_source: z.ZodLiteral<"solana_system_program_instruction">;
            field: z.ZodUnion<[z.ZodLiteral<"instructionName">, z.ZodLiteral<"Transfer.from">, z.ZodLiteral<"Transfer.to">, z.ZodLiteral<"Transfer.lamports">]>;
        } & {
            operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
            value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        }, "strip", z.ZodTypeAny, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        }, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        }>, z.ZodObject<{
            field_source: z.ZodLiteral<"solana_token_program_instruction">;
            field: z.ZodUnion<[z.ZodLiteral<"instructionName">, z.ZodLiteral<"TransferChecked.source">, z.ZodLiteral<"TransferChecked.destination">, z.ZodLiteral<"TransferChecked.authority">, z.ZodLiteral<"TransferChecked.amount">, z.ZodLiteral<"TransferChecked.mint">]>;
        } & {
            operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
            value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        }, "strip", z.ZodTypeAny, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        }, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        }>]>, "many">;
        /** The action to apply if the rule conditions are true */
        action: z.ZodEnum<["ALLOW", "DENY"]>;
    }, "strict", z.ZodTypeAny, {
        method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
        name: string;
        action: "ALLOW" | "DENY";
        conditions: ({
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        } | {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        })[];
    }, {
        method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
        name: string;
        action: "ALLOW" | "DENY";
        conditions: ({
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        } | {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        })[];
    }>, "many">;
}, "owner_id" | "owner"> & {
    id: z.ZodString;
    created_at: z.ZodNumber;
    owner_id: z.ZodNullable<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    id: string;
    name: string;
    chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
    created_at: number;
    owner_id: string | null;
    rules: {
        method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
        name: string;
        action: "ALLOW" | "DENY";
        conditions: ({
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        } | {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        })[];
    }[];
    version: "1.0";
}, {
    id: string;
    name: string;
    chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
    created_at: number;
    owner_id: string | null;
    rules: {
        method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
        name: string;
        action: "ALLOW" | "DENY";
        conditions: ({
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        } | {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        })[];
    }[];
    version: "1.0";
}>;
type PolicyResponseType = z.infer<typeof PolicyResponse>;
/**
 * Parses a JSON representation of a URL's path variables
 * for the `policy_id`
 *
 * Throws an error if the `policy_id` is not defined
 * or is not a valid, non-empty string.
 */
declare const PolicyIdFromPath: z.ZodCatch<z.ZodObject<{
    policy_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    policy_id: string;
}, {
    policy_id: string;
}>>;
declare const UpdatePolicyInput: z.ZodEffects<z.ZodUnion<[z.ZodEffects<z.ZodObject<{
    name: z.ZodOptional<z.ZodString>;
    method_rules: z.ZodOptional<z.ZodArray<z.ZodEffects<z.ZodObject<{
        method: z.ZodUnion<[z.ZodLiteral<"eth_sendTransaction">, z.ZodLiteral<"eth_signTransaction">, z.ZodLiteral<"eth_signTypedData_v4">, z.ZodLiteral<"signTransaction">, z.ZodLiteral<"signAndSendTransaction">, z.ZodLiteral<"exportPrivateKey">, z.ZodLiteral<"*">]>;
        rules: z.ZodArray<z.ZodObject<{
            /** The name of the rule */
            name: z.ZodString;
            /** The conditions that must be true for the rule action to be applied */
            conditions: z.ZodArray<z.ZodDiscriminatedUnion<"field_source", [z.ZodObject<{
                field_source: z.ZodLiteral<"ethereum_transaction">;
                field: z.ZodUnion<[z.ZodLiteral<"to">, z.ZodLiteral<"value">]>;
            } & {
                operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
                value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
            }, "strip", z.ZodTypeAny, {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_transaction";
                field: "value" | "to";
            }, {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_transaction";
                field: "value" | "to";
            }>, z.ZodObject<{
                field_source: z.ZodLiteral<"ethereum_calldata">;
                field: z.ZodString;
                /** The ABI of the contract to decode the calldata, only used if field_source is ethereum_calldata */
                abi: z.ZodType<Json, z.ZodTypeDef, Json>;
            } & {
                operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
                value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
            }, "strip", z.ZodTypeAny, {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_calldata";
                field: string;
                abi: Json;
            }, {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_calldata";
                field: string;
                abi: Json;
            }>, z.ZodObject<{
                field_source: z.ZodLiteral<"ethereum_typed_data_domain">;
                field: z.ZodUnion<[z.ZodLiteral<"chainId">, z.ZodLiteral<"verifyingContract">, z.ZodLiteral<"chain_id">, z.ZodLiteral<"verifying_contract">]>;
            } & {
                operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
                value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
            }, "strip", z.ZodTypeAny, {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_domain";
                field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
            }, {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_domain";
                field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
            }>, z.ZodObject<{
                field_source: z.ZodLiteral<"ethereum_typed_data_message">;
                field: z.ZodString;
                typed_data: z.ZodObject<{
                    types: z.ZodEffects<z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
                        name: z.ZodString;
                        type: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: string;
                        name: string;
                    }, {
                        type: string;
                        name: string;
                    }>, "many">>, Record<string, {
                        type: string;
                        name: string;
                    }[]>, Record<string, {
                        type: string;
                        name: string;
                    }[]>>;
                    primary_type: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    types: Record<string, {
                        type: string;
                        name: string;
                    }[]>;
                    primary_type: string;
                }, {
                    types: Record<string, {
                        type: string;
                        name: string;
                    }[]>;
                    primary_type: string;
                }>;
            } & {
                operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
                value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
            }, "strip", z.ZodTypeAny, {
                value: string | string[];
                typed_data: {
                    types: Record<string, {
                        type: string;
                        name: string;
                    }[]>;
                    primary_type: string;
                };
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_message";
                field: string;
            }, {
                value: string | string[];
                typed_data: {
                    types: Record<string, {
                        type: string;
                        name: string;
                    }[]>;
                    primary_type: string;
                };
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_message";
                field: string;
            }>, z.ZodObject<{
                field_source: z.ZodLiteral<"solana_program_instruction">;
                field: z.ZodLiteral<"programId">;
            } & {
                operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
                value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
            }, "strip", z.ZodTypeAny, {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_program_instruction";
                field: "programId";
            }, {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_program_instruction";
                field: "programId";
            }>, z.ZodObject<{
                field_source: z.ZodLiteral<"solana_system_program_instruction">;
                field: z.ZodUnion<[z.ZodLiteral<"instructionName">, z.ZodLiteral<"Transfer.from">, z.ZodLiteral<"Transfer.to">, z.ZodLiteral<"Transfer.lamports">]>;
            } & {
                operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
                value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
            }, "strip", z.ZodTypeAny, {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_system_program_instruction";
                field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
            }, {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_system_program_instruction";
                field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
            }>, z.ZodObject<{
                field_source: z.ZodLiteral<"solana_token_program_instruction">;
                field: z.ZodUnion<[z.ZodLiteral<"instructionName">, z.ZodLiteral<"TransferChecked.source">, z.ZodLiteral<"TransferChecked.destination">, z.ZodLiteral<"TransferChecked.authority">, z.ZodLiteral<"TransferChecked.amount">, z.ZodLiteral<"TransferChecked.mint">]>;
            } & {
                operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
                value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
            }, "strip", z.ZodTypeAny, {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_token_program_instruction";
                field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
            }, {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_token_program_instruction";
                field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
            }>]>, "many">;
            /** The action to apply if the rule conditions are true */
            action: z.ZodEnum<["ALLOW", "DENY"]>;
        }, "strict", z.ZodTypeAny, {
            name: string;
            action: "ALLOW" | "DENY";
            conditions: ({
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_transaction";
                field: "value" | "to";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_calldata";
                field: string;
                abi: Json;
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_domain";
                field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
            } | {
                value: string | string[];
                typed_data: {
                    types: Record<string, {
                        type: string;
                        name: string;
                    }[]>;
                    primary_type: string;
                };
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_message";
                field: string;
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_program_instruction";
                field: "programId";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_system_program_instruction";
                field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_token_program_instruction";
                field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
            })[];
        }, {
            name: string;
            action: "ALLOW" | "DENY";
            conditions: ({
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_transaction";
                field: "value" | "to";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_calldata";
                field: string;
                abi: Json;
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_domain";
                field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
            } | {
                value: string | string[];
                typed_data: {
                    types: Record<string, {
                        type: string;
                        name: string;
                    }[]>;
                    primary_type: string;
                };
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_message";
                field: string;
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_program_instruction";
                field: "programId";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_system_program_instruction";
                field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_token_program_instruction";
                field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
            })[];
        }>, "many">;
    }, "strict", z.ZodTypeAny, {
        method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
        rules: {
            name: string;
            action: "ALLOW" | "DENY";
            conditions: ({
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_transaction";
                field: "value" | "to";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_calldata";
                field: string;
                abi: Json;
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_domain";
                field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
            } | {
                value: string | string[];
                typed_data: {
                    types: Record<string, {
                        type: string;
                        name: string;
                    }[]>;
                    primary_type: string;
                };
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_message";
                field: string;
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_program_instruction";
                field: "programId";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_system_program_instruction";
                field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_token_program_instruction";
                field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
            })[];
        }[];
    }, {
        method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
        rules: {
            name: string;
            action: "ALLOW" | "DENY";
            conditions: ({
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_transaction";
                field: "value" | "to";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_calldata";
                field: string;
                abi: Json;
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_domain";
                field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
            } | {
                value: string | string[];
                typed_data: {
                    types: Record<string, {
                        type: string;
                        name: string;
                    }[]>;
                    primary_type: string;
                };
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_message";
                field: string;
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_program_instruction";
                field: "programId";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_system_program_instruction";
                field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_token_program_instruction";
                field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
            })[];
        }[];
    }>, {
        method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
        name: string;
        action: "ALLOW" | "DENY";
        conditions: ({
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        } | {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        })[];
    }[], {
        method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
        rules: {
            name: string;
            action: "ALLOW" | "DENY";
            conditions: ({
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_transaction";
                field: "value" | "to";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_calldata";
                field: string;
                abi: Json;
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_domain";
                field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
            } | {
                value: string | string[];
                typed_data: {
                    types: Record<string, {
                        type: string;
                        name: string;
                    }[]>;
                    primary_type: string;
                };
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_message";
                field: string;
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_program_instruction";
                field: "programId";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_system_program_instruction";
                field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_token_program_instruction";
                field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
            })[];
        }[];
    }>, "many">>;
}, "strict", z.ZodTypeAny, {
    name?: string | undefined;
    method_rules?: {
        method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
        name: string;
        action: "ALLOW" | "DENY";
        conditions: ({
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        } | {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        })[];
    }[][] | undefined;
}, {
    name?: string | undefined;
    method_rules?: {
        method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
        rules: {
            name: string;
            action: "ALLOW" | "DENY";
            conditions: ({
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_transaction";
                field: "value" | "to";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_calldata";
                field: string;
                abi: Json;
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_domain";
                field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
            } | {
                value: string | string[];
                typed_data: {
                    types: Record<string, {
                        type: string;
                        name: string;
                    }[]>;
                    primary_type: string;
                };
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_message";
                field: string;
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_program_instruction";
                field: "programId";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_system_program_instruction";
                field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_token_program_instruction";
                field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
            })[];
        }[];
    }[] | undefined;
}>, {
    name?: string | undefined;
    method_rules?: {
        method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
        name: string;
        action: "ALLOW" | "DENY";
        conditions: ({
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        } | {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        })[];
    }[][] | undefined;
}, {
    name?: string | undefined;
    method_rules?: {
        method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
        rules: {
            name: string;
            action: "ALLOW" | "DENY";
            conditions: ({
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_transaction";
                field: "value" | "to";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_calldata";
                field: string;
                abi: Json;
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_domain";
                field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
            } | {
                value: string | string[];
                typed_data: {
                    types: Record<string, {
                        type: string;
                        name: string;
                    }[]>;
                    primary_type: string;
                };
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_message";
                field: string;
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_program_instruction";
                field: "programId";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_system_program_instruction";
                field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_token_program_instruction";
                field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
            })[];
        }[];
    }[] | undefined;
}>, z.ZodEffects<z.ZodObject<{
    name: z.ZodOptional<z.ZodString>;
    rules: z.ZodOptional<z.ZodArray<z.ZodObject<{
        /** The name of the rule */
        name: z.ZodString;
        /** The method the rule applies to */
        method: z.ZodUnion<[z.ZodLiteral<"eth_sendTransaction">, z.ZodLiteral<"eth_signTransaction">, z.ZodLiteral<"eth_signTypedData_v4">, z.ZodLiteral<"signTransaction">, z.ZodLiteral<"signAndSendTransaction">, z.ZodLiteral<"exportPrivateKey">, z.ZodLiteral<"*">]>;
        /** The conditions that must be true for the rule action to be applied */
        conditions: z.ZodArray<z.ZodDiscriminatedUnion<"field_source", [z.ZodObject<{
            field_source: z.ZodLiteral<"ethereum_transaction">;
            field: z.ZodUnion<[z.ZodLiteral<"to">, z.ZodLiteral<"value">]>;
        } & {
            operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
            value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        }, "strip", z.ZodTypeAny, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        }, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        }>, z.ZodObject<{
            field_source: z.ZodLiteral<"ethereum_calldata">;
            field: z.ZodString;
            /** The ABI of the contract to decode the calldata, only used if field_source is ethereum_calldata */
            abi: z.ZodType<Json, z.ZodTypeDef, Json>;
        } & {
            operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
            value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        }, "strip", z.ZodTypeAny, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        }, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        }>, z.ZodObject<{
            field_source: z.ZodLiteral<"ethereum_typed_data_domain">;
            field: z.ZodUnion<[z.ZodLiteral<"chainId">, z.ZodLiteral<"verifyingContract">, z.ZodLiteral<"chain_id">, z.ZodLiteral<"verifying_contract">]>;
        } & {
            operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
            value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        }, "strip", z.ZodTypeAny, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        }, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        }>, z.ZodObject<{
            field_source: z.ZodLiteral<"ethereum_typed_data_message">;
            field: z.ZodString;
            typed_data: z.ZodObject<{
                types: z.ZodEffects<z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    type: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: string;
                    name: string;
                }, {
                    type: string;
                    name: string;
                }>, "many">>, Record<string, {
                    type: string;
                    name: string;
                }[]>, Record<string, {
                    type: string;
                    name: string;
                }[]>>;
                primary_type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            }, {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            }>;
        } & {
            operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
            value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        }, "strip", z.ZodTypeAny, {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        }, {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        }>, z.ZodObject<{
            field_source: z.ZodLiteral<"solana_program_instruction">;
            field: z.ZodLiteral<"programId">;
        } & {
            operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
            value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        }, "strip", z.ZodTypeAny, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        }, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        }>, z.ZodObject<{
            field_source: z.ZodLiteral<"solana_system_program_instruction">;
            field: z.ZodUnion<[z.ZodLiteral<"instructionName">, z.ZodLiteral<"Transfer.from">, z.ZodLiteral<"Transfer.to">, z.ZodLiteral<"Transfer.lamports">]>;
        } & {
            operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
            value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        }, "strip", z.ZodTypeAny, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        }, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        }>, z.ZodObject<{
            field_source: z.ZodLiteral<"solana_token_program_instruction">;
            field: z.ZodUnion<[z.ZodLiteral<"instructionName">, z.ZodLiteral<"TransferChecked.source">, z.ZodLiteral<"TransferChecked.destination">, z.ZodLiteral<"TransferChecked.authority">, z.ZodLiteral<"TransferChecked.amount">, z.ZodLiteral<"TransferChecked.mint">]>;
        } & {
            operator: z.ZodUnion<[z.ZodLiteral<"eq">, z.ZodLiteral<"gt">, z.ZodLiteral<"gte">, z.ZodLiteral<"lt">, z.ZodLiteral<"lte">, z.ZodLiteral<"in">]>;
            value: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        }, "strip", z.ZodTypeAny, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        }, {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        }>]>, "many">;
        /** The action to apply if the rule conditions are true */
        action: z.ZodEnum<["ALLOW", "DENY"]>;
    }, "strict", z.ZodTypeAny, {
        method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
        name: string;
        action: "ALLOW" | "DENY";
        conditions: ({
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        } | {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        })[];
    }, {
        method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
        name: string;
        action: "ALLOW" | "DENY";
        conditions: ({
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        } | {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        })[];
    }>, "many">>;
}, "strict", z.ZodTypeAny, {
    name?: string | undefined;
    rules?: {
        method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
        name: string;
        action: "ALLOW" | "DENY";
        conditions: ({
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        } | {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        })[];
    }[] | undefined;
}, {
    name?: string | undefined;
    rules?: {
        method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
        name: string;
        action: "ALLOW" | "DENY";
        conditions: ({
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        } | {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        })[];
    }[] | undefined;
}>, {
    name?: string | undefined;
    rules?: {
        method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
        name: string;
        action: "ALLOW" | "DENY";
        conditions: ({
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        } | {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        })[];
    }[] | undefined;
}, {
    name?: string | undefined;
    rules?: {
        method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
        name: string;
        action: "ALLOW" | "DENY";
        conditions: ({
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        } | {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        })[];
    }[] | undefined;
}>]>, {
    name?: string | undefined;
    rules?: {
        method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
        name: string;
        action: "ALLOW" | "DENY";
        conditions: ({
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        } | {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        })[];
    }[] | undefined;
}, {
    name?: string | undefined;
    method_rules?: {
        method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
        rules: {
            name: string;
            action: "ALLOW" | "DENY";
            conditions: ({
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_transaction";
                field: "value" | "to";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_calldata";
                field: string;
                abi: Json;
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_domain";
                field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
            } | {
                value: string | string[];
                typed_data: {
                    types: Record<string, {
                        type: string;
                        name: string;
                    }[]>;
                    primary_type: string;
                };
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "ethereum_typed_data_message";
                field: string;
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_program_instruction";
                field: "programId";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_system_program_instruction";
                field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
            } | {
                value: string | string[];
                operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
                field_source: "solana_token_program_instruction";
                field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
            })[];
        }[];
    }[] | undefined;
} | {
    name?: string | undefined;
    rules?: {
        method: "signTransaction" | "signAndSendTransaction" | "eth_signTransaction" | "eth_sendTransaction" | "eth_signTypedData_v4" | "exportPrivateKey" | "*";
        name: string;
        action: "ALLOW" | "DENY";
        conditions: ({
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_transaction";
            field: "value" | "to";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_calldata";
            field: string;
            abi: Json;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_domain";
            field: "chain_id" | "chainId" | "verifyingContract" | "verifying_contract";
        } | {
            value: string | string[];
            typed_data: {
                types: Record<string, {
                    type: string;
                    name: string;
                }[]>;
                primary_type: string;
            };
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "ethereum_typed_data_message";
            field: string;
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_program_instruction";
            field: "programId";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_system_program_instruction";
            field: "instructionName" | "Transfer.from" | "Transfer.to" | "Transfer.lamports";
        } | {
            value: string | string[];
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "in";
            field_source: "solana_token_program_instruction";
            field: "instructionName" | "TransferChecked.source" | "TransferChecked.destination" | "TransferChecked.authority" | "TransferChecked.amount" | "TransferChecked.mint";
        })[];
    }[] | undefined;
}>;
type UpdatePolicyInputType = z.infer<typeof UpdatePolicyInput>;

interface PrivyRecoveryKeyMaterialInput extends z.infer<typeof RecoveryKeyMaterialInput> {
}
declare const RecoveryKeyMaterialInput: z.ZodObject<{
    chain_type: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    chain_type?: string | undefined;
}, {
    chain_type?: string | undefined;
}>;
declare const RecoveryKeyMaterialResponse: z.ZodObject<{
    recovery_type: z.ZodEnum<["user_passcode_derived_recovery_key", "privy_passcode_derived_recovery_key", "privy_generated_recovery_key", "google_drive_recovery_secret", "icloud_recovery_secret"]>;
    recovery_key_derivation_salt: z.ZodString;
    recovery_code: z.ZodString;
    recovery_key: z.ZodString;
    file_id: z.ZodString;
    icloud_record_name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    recovery_type: "user_passcode_derived_recovery_key" | "privy_passcode_derived_recovery_key" | "privy_generated_recovery_key" | "google_drive_recovery_secret" | "icloud_recovery_secret";
    recovery_key_derivation_salt: string;
    recovery_code: string;
    recovery_key: string;
    file_id: string;
    icloud_record_name: string;
}, {
    recovery_type: "user_passcode_derived_recovery_key" | "privy_passcode_derived_recovery_key" | "privy_generated_recovery_key" | "google_drive_recovery_secret" | "icloud_recovery_secret";
    recovery_key_derivation_salt: string;
    recovery_code: string;
    recovery_key: string;
    file_id: string;
    icloud_record_name: string;
}>;
interface PrivyRecoveryKeyMaterialResponse extends z.infer<typeof RecoveryKeyMaterialResponse> {
}
declare const OAuthAuthenticateRecoveryResponse: z.ZodObject<{
    access_token: z.ZodString;
}, "strip", z.ZodTypeAny, {
    access_token: string;
}, {
    access_token: string;
}>;
interface PrivyOAuthAuthenticateRecoveryResponse extends z.infer<typeof OAuthAuthenticateRecoveryResponse> {
}
declare const OAuthInitRecoveryInput: z.ZodObject<{
    redirect_to: z.ZodString;
    token: z.ZodOptional<z.ZodString>;
    state_code: z.ZodOptional<z.ZodString>;
    code_challenge: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    redirect_to: string;
    token?: string | undefined;
    state_code?: string | undefined;
    code_challenge?: string | undefined;
}, {
    redirect_to: string;
    token?: string | undefined;
    state_code?: string | undefined;
    code_challenge?: string | undefined;
}>;
interface PrivyOAuthInitRecoveryInput extends z.infer<typeof OAuthInitRecoveryInput> {
}
declare const OAuthInitICloudRecoveryInput: z.ZodObject<{
    client_type: z.ZodEnum<["web", "expo-ios"]>;
}, "strip", z.ZodTypeAny, {
    client_type: "web" | "expo-ios";
}, {
    client_type: "web" | "expo-ios";
}>;
interface PrivyOAuthInitICloudRecoveryInput extends z.infer<typeof OAuthInitICloudRecoveryInput> {
}
declare const OAuthCallbackICloudExpoInput: z.ZodCatch<z.ZodEffects<z.ZodObject<{
    /**
     * The authorization code from apple
     */
    ckWebAuthToken: z.ZodString;
}, "strip", z.ZodTypeAny, {
    ckWebAuthToken: string;
}, {
    ckWebAuthToken: string;
}>, {
    ckWebAuthToken: string;
}, {
    ckWebAuthToken: string;
}>>;
interface PrivyOAuthCallbackICloudExpoInput extends z.infer<typeof OAuthCallbackICloudExpoInput> {
}
declare const OAuthCallbackICloudExpoResponse: z.ZodRecord<z.ZodString, z.ZodNever>;
interface PrivyOAuthCallbackICloudExpoResponse extends z.infer<typeof OAuthCallbackICloudExpoResponse> {
}
declare const RecoveryConfigurationICloudInput: z.ZodObject<{
    client_type: z.ZodEnum<["web", "expo-ios"]>;
}, "strip", z.ZodTypeAny, {
    client_type: "web" | "expo-ios";
}, {
    client_type: "web" | "expo-ios";
}>;
interface PrivyRecoveryConfigurationICloudInput extends z.infer<typeof RecoveryConfigurationICloudInput> {
}
declare const RecoveryConfigurationICloudResponse: z.ZodObject<{
    api_token: z.ZodString;
    container_identifier: z.ZodString;
    environment: z.ZodString;
}, "strip", z.ZodTypeAny, {
    api_token: string;
    container_identifier: string;
    environment: string;
}, {
    api_token: string;
    container_identifier: string;
    environment: string;
}>;
interface PrivyRecoveryConfigurationICloudResponse extends z.infer<typeof RecoveryConfigurationICloudResponse> {
}

declare const SiweInput: z.ZodObject<{
    message: z.ZodString;
    signature: z.ZodString;
    chainId: z.ZodDefault<z.ZodNullable<z.ZodString>>;
    walletClientType: z.ZodDefault<z.ZodNullable<z.ZodString>>;
    connectorType: z.ZodDefault<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    message: string;
    signature: string;
    chainId: string | null;
    walletClientType: string | null;
    connectorType: string | null;
}, {
    message: string;
    signature: string;
    chainId?: string | null | undefined;
    walletClientType?: string | null | undefined;
    connectorType?: string | null | undefined;
}>;
interface PrivySiweInput extends z.input<typeof SiweInput> {
}
declare const SmartWalletSiweInput: z.ZodObject<{
    message: z.ZodString;
    signature: z.ZodString;
    smart_wallet_type: z.ZodEnum<["safe", "kernel", "biconomy", "light_account", "coinbase_smart_wallet", "thirdweb"]>;
}, "strip", z.ZodTypeAny, {
    message: string;
    signature: string;
    smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
}, {
    message: string;
    signature: string;
    smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
}>;
interface PrivySmartWalletSiweInput extends z.input<typeof SmartWalletSiweInput> {
}
declare const AuthenticateSiweInput: z.ZodObject<{
    message: z.ZodString;
    signature: z.ZodString;
    chainId: z.ZodDefault<z.ZodNullable<z.ZodString>>;
    walletClientType: z.ZodDefault<z.ZodNullable<z.ZodString>>;
    connectorType: z.ZodDefault<z.ZodNullable<z.ZodString>>;
} & {
    mode: z.ZodOptional<z.ZodEnum<["no-signup", "login-or-sign-up"]>>;
}, "strip", z.ZodTypeAny, {
    message: string;
    signature: string;
    chainId: string | null;
    walletClientType: string | null;
    connectorType: string | null;
    mode?: "no-signup" | "login-or-sign-up" | undefined;
}, {
    message: string;
    signature: string;
    mode?: "no-signup" | "login-or-sign-up" | undefined;
    chainId?: string | null | undefined;
    walletClientType?: string | null | undefined;
    connectorType?: string | null | undefined;
}>;
type PrivyAuthenticateSiweInput = z.input<typeof AuthenticateSiweInput>;
declare const SiweAddressInput: z.ZodObject<{
    address: z.ZodEffects<z.ZodString, string, string>;
}, "strip", z.ZodTypeAny, {
    address: string;
}, {
    address: string;
}>;
interface PrivySiweAddressInput extends z.infer<typeof SiweAddressInput> {
}
declare const SiweInitInput: z.ZodObject<{
    address: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    token: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    address?: string | undefined;
    token?: string | undefined;
}, {
    address?: string | undefined;
    token?: string | undefined;
}>;
interface PrivySiweInitInput extends z.infer<typeof SiweInitInput> {
}
declare const SiweNonce: z.ZodObject<{
    nonce: z.ZodString;
    address: z.ZodString;
    expires_at: z.ZodString;
}, "strip", z.ZodTypeAny, {
    address: string;
    nonce: string;
    expires_at: string;
}, {
    address: string;
    nonce: string;
    expires_at: string;
}>;
interface PrivySiweNonce extends z.infer<typeof SiweNonce> {
}
declare const TransferSiweInput: z.ZodObject<{
    nonce: z.ZodString;
} & {
    address: z.ZodEffects<z.ZodString, string, string>;
    chainId: z.ZodDefault<z.ZodNullable<z.ZodString>>;
    walletClientType: z.ZodDefault<z.ZodNullable<z.ZodString>>;
    connectorType: z.ZodDefault<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    address: string;
    nonce: string;
    chainId: string | null;
    walletClientType: string | null;
    connectorType: string | null;
}, {
    address: string;
    nonce: string;
    chainId?: string | null | undefined;
    walletClientType?: string | null | undefined;
    connectorType?: string | null | undefined;
}>;
interface PrivyTransferSiweInput extends z.infer<typeof TransferSiweInput> {
}

declare const SiwsInput: z.ZodObject<{
    message: z.ZodString;
    signature: z.ZodString;
    walletClientType: z.ZodDefault<z.ZodNullable<z.ZodString>>;
    connectorType: z.ZodDefault<z.ZodNullable<z.ZodString>>;
    message_type: z.ZodOptional<z.ZodEnum<["transaction", "plain"]>>;
}, "strip", z.ZodTypeAny, {
    message: string;
    signature: string;
    walletClientType: string | null;
    connectorType: string | null;
    message_type?: "transaction" | "plain" | undefined;
}, {
    message: string;
    signature: string;
    walletClientType?: string | null | undefined;
    connectorType?: string | null | undefined;
    message_type?: "transaction" | "plain" | undefined;
}>;
interface PrivySiwsInput extends z.input<typeof SiwsInput> {
}
declare const AuthenticateSiwsInput: z.ZodObject<{
    message: z.ZodString;
    signature: z.ZodString;
    walletClientType: z.ZodDefault<z.ZodNullable<z.ZodString>>;
    connectorType: z.ZodDefault<z.ZodNullable<z.ZodString>>;
    message_type: z.ZodOptional<z.ZodEnum<["transaction", "plain"]>>;
} & {
    mode: z.ZodOptional<z.ZodEnum<["no-signup", "login-or-sign-up"]>>;
}, "strip", z.ZodTypeAny, {
    message: string;
    signature: string;
    walletClientType: string | null;
    connectorType: string | null;
    mode?: "no-signup" | "login-or-sign-up" | undefined;
    message_type?: "transaction" | "plain" | undefined;
}, {
    message: string;
    signature: string;
    mode?: "no-signup" | "login-or-sign-up" | undefined;
    walletClientType?: string | null | undefined;
    connectorType?: string | null | undefined;
    message_type?: "transaction" | "plain" | undefined;
}>;
type PrivyAuthenticateSiwsInput = z.input<typeof AuthenticateSiwsInput>;
declare const SiwsAddressInput: z.ZodObject<{
    address: z.ZodEffects<z.ZodString, string, string>;
}, "strip", z.ZodTypeAny, {
    address: string;
}, {
    address: string;
}>;
interface PrivySiwsAddressInput extends z.infer<typeof SiwsAddressInput> {
}
declare const SiwsInitInput: z.ZodObject<{
    address: z.ZodEffects<z.ZodString, string, string>;
    token: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    address: string;
    token?: string | undefined;
}, {
    address: string;
    token?: string | undefined;
}>;
interface PrivySiwsInitInput extends z.infer<typeof SiwsInitInput> {
}
declare const SiwsNonce: z.ZodObject<{
    nonce: z.ZodString;
    address: z.ZodString;
    expires_at: z.ZodString;
}, "strip", z.ZodTypeAny, {
    address: string;
    nonce: string;
    expires_at: string;
}, {
    address: string;
    nonce: string;
    expires_at: string;
}>;
interface PrivySiwsNonce extends z.infer<typeof SiwsNonce> {
}

declare const VerifyPhoneInput: z.ZodObject<{
    code: z.ZodCatch<z.ZodString>;
    phoneNumber: z.ZodCatch<z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>>;
}, "strip", z.ZodTypeAny, {
    code: string;
    phoneNumber: string;
}, {
    code?: unknown;
    phoneNumber?: unknown;
}>;
interface PrivyVerifyPhoneInput extends z.infer<typeof VerifyPhoneInput> {
}
declare const AuthenticatePhoneInput: z.ZodObject<{
    code: z.ZodCatch<z.ZodString>;
    phoneNumber: z.ZodCatch<z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>>;
} & {
    mode: z.ZodOptional<z.ZodEnum<["no-signup", "login-or-sign-up"]>>;
}, "strip", z.ZodTypeAny, {
    code: string;
    phoneNumber: string;
    mode?: "no-signup" | "login-or-sign-up" | undefined;
}, {
    code?: unknown;
    mode?: "no-signup" | "login-or-sign-up" | undefined;
    phoneNumber?: unknown;
}>;
interface PrivyAuthenticatePhoneInput extends z.infer<typeof AuthenticatePhoneInput> {
}
declare const PasswordlessSmsPhoneInput: z.ZodObject<{
    phoneNumber: z.ZodCatch<z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>>;
    token: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    phoneNumber: string;
    token?: string | undefined;
}, {
    token?: string | undefined;
    phoneNumber?: unknown;
}>;
interface PrivyLinkPhoneInput extends z.infer<typeof PasswordlessSmsPhoneInput> {
}
declare const UnlinkPhoneInput: z.ZodObject<{
    phoneNumber: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>;
}, "strip", z.ZodTypeAny, {
    phoneNumber: string;
}, {
    phoneNumber: string;
}>;
interface PrivyUnlinkPhoneInput extends z.infer<typeof UnlinkPhoneInput> {
}
declare const UpdatePhoneInput: z.ZodObject<{
    old_phone_number: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>;
    new_phone_number: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>;
    code: z.ZodString;
}, "strip", z.ZodTypeAny, {
    code: string;
    old_phone_number: string;
    new_phone_number: string;
}, {
    code: string;
    old_phone_number: string;
    new_phone_number: string;
}>;
interface PrivyUpdatePhoneInput extends z.infer<typeof UpdatePhoneInput> {
}
declare const TransferPhoneInput: z.ZodObject<{
    nonce: z.ZodString;
} & {
    phoneNumber: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>;
}, "strip", z.ZodTypeAny, {
    nonce: string;
    phoneNumber: string;
}, {
    nonce: string;
    phoneNumber: string;
}>;
interface PrivyTransferPhoneInput extends z.infer<typeof TransferPhoneInput> {
}

declare const SAFE: "safe";
declare const KERNEL: "kernel";
declare const BICONOMY: "biconomy";
declare const LIGHT_ACCOUNT: "light_account";
declare const COINBASE_SMART_WALLET: "coinbase_smart_wallet";
declare const THIRDWEB: "thirdweb";
declare const SUPPORTED_SMART_WALLET_TYPES: readonly ["safe", "kernel", "biconomy", "light_account", "coinbase_smart_wallet", "thirdweb"];
type SmartWalletType = (typeof SUPPORTED_SMART_WALLET_TYPES)[number];

declare const SmartWalletProvider: z.ZodEnum<["safe", "kernel", "biconomy", "light_account", "coinbase_smart_wallet", "thirdweb"]>;

declare const AlchemyPaymasterContextSchema: z.ZodObject<{
    policy_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    policy_id: string;
}, {
    policy_id: string;
}>;
type AlchemyPaymasterContext = z.infer<typeof AlchemyPaymasterContextSchema>;
declare const SmartWalletNetworkConfigurationInputSchema: z.ZodObject<{
    chain_id: z.ZodString;
    bundler_url: z.ZodOptional<z.ZodString>;
    paymaster_url: z.ZodOptional<z.ZodString>;
    rpc_url: z.ZodOptional<z.ZodString>;
    chain_name: z.ZodOptional<z.ZodString>;
    paymaster_context: z.ZodOptional<z.ZodObject<{
        policy_id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        policy_id: string;
    }, {
        policy_id: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    chain_id: string;
    bundler_url?: string | undefined;
    paymaster_url?: string | undefined;
    rpc_url?: string | undefined;
    chain_name?: string | undefined;
    paymaster_context?: {
        policy_id: string;
    } | undefined;
}, {
    chain_id: string;
    bundler_url?: string | undefined;
    paymaster_url?: string | undefined;
    rpc_url?: string | undefined;
    chain_name?: string | undefined;
    paymaster_context?: {
        policy_id: string;
    } | undefined;
}>;
type SmartWalletNetworkConfigurationInput = Prettify<z.infer<typeof SmartWalletNetworkConfigurationInputSchema>>;
declare const SmartWalletConfigurationSchema: z.ZodDiscriminatedUnion<"enabled", [z.ZodObject<{
    enabled: z.ZodLiteral<false>;
}, "strip", z.ZodTypeAny, {
    enabled: false;
}, {
    enabled: false;
}>, z.ZodObject<{
    enabled: z.ZodLiteral<true>;
    smart_wallet_type: z.ZodEnum<["safe", "kernel", "biconomy", "light_account", "coinbase_smart_wallet", "thirdweb"]>;
    configured_networks: z.ZodArray<z.ZodObject<{
        chain_id: z.ZodString;
        bundler_url: z.ZodString;
        paymaster_url: z.ZodOptional<z.ZodString>;
        rpc_url: z.ZodOptional<z.ZodString>;
        chain_name: z.ZodOptional<z.ZodString>;
        paymaster_context: z.ZodOptional<z.ZodObject<{
            policy_id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            policy_id: string;
        }, {
            policy_id: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        chain_id: string;
        bundler_url: string;
        paymaster_url?: string | undefined;
        rpc_url?: string | undefined;
        chain_name?: string | undefined;
        paymaster_context?: {
            policy_id: string;
        } | undefined;
    }, {
        chain_id: string;
        bundler_url: string;
        paymaster_url?: string | undefined;
        rpc_url?: string | undefined;
        chain_name?: string | undefined;
        paymaster_context?: {
            policy_id: string;
        } | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    enabled: true;
    smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
    configured_networks: {
        chain_id: string;
        bundler_url: string;
        paymaster_url?: string | undefined;
        rpc_url?: string | undefined;
        chain_name?: string | undefined;
        paymaster_context?: {
            policy_id: string;
        } | undefined;
    }[];
}, {
    enabled: true;
    smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
    configured_networks: {
        chain_id: string;
        bundler_url: string;
        paymaster_url?: string | undefined;
        rpc_url?: string | undefined;
        chain_name?: string | undefined;
        paymaster_context?: {
            policy_id: string;
        } | undefined;
    }[];
}>]>;
declare const SmartWalletConfigurationInputSchema: z.ZodDiscriminatedUnion<"enabled", [z.ZodObject<{
    enabled: z.ZodLiteral<false>;
}, "strip", z.ZodTypeAny, {
    enabled: false;
}, {
    enabled: false;
}>, z.ZodObject<{
    enabled: z.ZodLiteral<true>;
    smart_wallet_type: z.ZodEnum<["safe", "kernel", "biconomy", "light_account", "coinbase_smart_wallet", "thirdweb"]>;
    configured_networks: z.ZodArray<z.ZodObject<{
        chain_id: z.ZodString;
        bundler_url: z.ZodOptional<z.ZodString>;
        paymaster_url: z.ZodOptional<z.ZodString>;
        rpc_url: z.ZodOptional<z.ZodString>;
        chain_name: z.ZodOptional<z.ZodString>;
        paymaster_context: z.ZodOptional<z.ZodObject<{
            policy_id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            policy_id: string;
        }, {
            policy_id: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        chain_id: string;
        bundler_url?: string | undefined;
        paymaster_url?: string | undefined;
        rpc_url?: string | undefined;
        chain_name?: string | undefined;
        paymaster_context?: {
            policy_id: string;
        } | undefined;
    }, {
        chain_id: string;
        bundler_url?: string | undefined;
        paymaster_url?: string | undefined;
        rpc_url?: string | undefined;
        chain_name?: string | undefined;
        paymaster_context?: {
            policy_id: string;
        } | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    enabled: true;
    smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
    configured_networks: {
        chain_id: string;
        bundler_url?: string | undefined;
        paymaster_url?: string | undefined;
        rpc_url?: string | undefined;
        chain_name?: string | undefined;
        paymaster_context?: {
            policy_id: string;
        } | undefined;
    }[];
}, {
    enabled: true;
    smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
    configured_networks: {
        chain_id: string;
        bundler_url?: string | undefined;
        paymaster_url?: string | undefined;
        rpc_url?: string | undefined;
        chain_name?: string | undefined;
        paymaster_context?: {
            policy_id: string;
        } | undefined;
    }[];
}>]>;
declare const SmartWalletConfigurationResponseSchema: z.ZodDiscriminatedUnion<"enabled", [z.ZodObject<{
    enabled: z.ZodLiteral<false>;
}, "strip", z.ZodTypeAny, {
    enabled: false;
}, {
    enabled: false;
}>, z.ZodObject<{
    enabled: z.ZodLiteral<true>;
    smart_wallet_type: z.ZodEnum<["safe", "kernel", "biconomy", "light_account", "coinbase_smart_wallet", "thirdweb"]>;
    configured_networks: z.ZodArray<z.ZodObject<{
        chain_id: z.ZodString;
        bundler_url: z.ZodString;
        paymaster_url: z.ZodOptional<z.ZodString>;
        rpc_url: z.ZodOptional<z.ZodString>;
        chain_name: z.ZodOptional<z.ZodString>;
        paymaster_context: z.ZodOptional<z.ZodObject<{
            policy_id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            policy_id: string;
        }, {
            policy_id: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        chain_id: string;
        bundler_url: string;
        paymaster_url?: string | undefined;
        rpc_url?: string | undefined;
        chain_name?: string | undefined;
        paymaster_context?: {
            policy_id: string;
        } | undefined;
    }, {
        chain_id: string;
        bundler_url: string;
        paymaster_url?: string | undefined;
        rpc_url?: string | undefined;
        chain_name?: string | undefined;
        paymaster_context?: {
            policy_id: string;
        } | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    enabled: true;
    smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
    configured_networks: {
        chain_id: string;
        bundler_url: string;
        paymaster_url?: string | undefined;
        rpc_url?: string | undefined;
        chain_name?: string | undefined;
        paymaster_context?: {
            policy_id: string;
        } | undefined;
    }[];
}, {
    enabled: true;
    smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
    configured_networks: {
        chain_id: string;
        bundler_url: string;
        paymaster_url?: string | undefined;
        rpc_url?: string | undefined;
        chain_name?: string | undefined;
        paymaster_context?: {
            policy_id: string;
        } | undefined;
    }[];
}>]>;
type PrivySmartWalletConfigurationInput = Prettify<z.infer<typeof SmartWalletConfigurationInputSchema>>;
type PrivySmartWalletConfigurationResponse = Prettify<z.infer<typeof SmartWalletConfigurationResponseSchema>>;

declare const TelegramAuthResult: z$1.ZodObject<{
    id: z$1.ZodNumber;
    first_name: z$1.ZodString;
    auth_date: z$1.ZodNumber;
    hash: z$1.ZodString;
    username: z$1.ZodOptional<z$1.ZodString>;
    last_name: z$1.ZodOptional<z$1.ZodString>;
    photo_url: z$1.ZodOptional<z$1.ZodString>;
}, "strip", z$1.ZodTypeAny, {
    id: number;
    first_name: string;
    hash: string;
    auth_date: number;
    username?: string | undefined;
    last_name?: string | undefined;
    photo_url?: string | undefined;
}, {
    id: number;
    first_name: string;
    hash: string;
    auth_date: number;
    username?: string | undefined;
    last_name?: string | undefined;
    photo_url?: string | undefined;
}>;
type TelegramAuthResultType = z$1.infer<typeof TelegramAuthResult>;
declare const TelegramWebAppData: z$1.ZodObject<{
    query_id: z$1.ZodOptional<z$1.ZodString>;
    auth_date: z$1.ZodNumber;
    hash: z$1.ZodString;
    user: z$1.ZodString;
    chat_instance: z$1.ZodOptional<z$1.ZodString>;
    chat_type: z$1.ZodOptional<z$1.ZodString>;
    start_param: z$1.ZodOptional<z$1.ZodString>;
    signature: z$1.ZodOptional<z$1.ZodString>;
}, "strip", z$1.ZodTypeAny, {
    user: string;
    hash: string;
    auth_date: number;
    signature?: string | undefined;
    query_id?: string | undefined;
    chat_instance?: string | undefined;
    chat_type?: string | undefined;
    start_param?: string | undefined;
}, {
    user: string;
    hash: string;
    auth_date: number;
    signature?: string | undefined;
    query_id?: string | undefined;
    chat_instance?: string | undefined;
    chat_type?: string | undefined;
    start_param?: string | undefined;
}>;
type TelegramAuthWebDataType = z$1.infer<typeof TelegramWebAppData>;
/**
 * @prop captcha_token - Captcha token
 * @prop telegram_auth_result - Auth result object returned by Telegram when a user authenticates using the login widget
 * @prop telegram_web_app_data - Auth result object returned by Telegram when a user authenticates using a mini app
 */
declare const TelegramAuthenticateInput: z$1.ZodObject<{
    captcha_token: z$1.ZodOptional<z$1.ZodString>;
    telegram_auth_result: z$1.ZodOptional<z$1.ZodObject<{
        id: z$1.ZodNumber;
        first_name: z$1.ZodString;
        auth_date: z$1.ZodNumber;
        hash: z$1.ZodString;
        username: z$1.ZodOptional<z$1.ZodString>;
        last_name: z$1.ZodOptional<z$1.ZodString>;
        photo_url: z$1.ZodOptional<z$1.ZodString>;
    }, "strip", z$1.ZodTypeAny, {
        id: number;
        first_name: string;
        hash: string;
        auth_date: number;
        username?: string | undefined;
        last_name?: string | undefined;
        photo_url?: string | undefined;
    }, {
        id: number;
        first_name: string;
        hash: string;
        auth_date: number;
        username?: string | undefined;
        last_name?: string | undefined;
        photo_url?: string | undefined;
    }>>;
    telegram_web_app_data: z$1.ZodOptional<z$1.ZodObject<{
        query_id: z$1.ZodOptional<z$1.ZodString>;
        auth_date: z$1.ZodNumber;
        hash: z$1.ZodString;
        user: z$1.ZodString;
        chat_instance: z$1.ZodOptional<z$1.ZodString>;
        chat_type: z$1.ZodOptional<z$1.ZodString>;
        start_param: z$1.ZodOptional<z$1.ZodString>;
        signature: z$1.ZodOptional<z$1.ZodString>;
    }, "strip", z$1.ZodTypeAny, {
        user: string;
        hash: string;
        auth_date: number;
        signature?: string | undefined;
        query_id?: string | undefined;
        chat_instance?: string | undefined;
        chat_type?: string | undefined;
        start_param?: string | undefined;
    }, {
        user: string;
        hash: string;
        auth_date: number;
        signature?: string | undefined;
        query_id?: string | undefined;
        chat_instance?: string | undefined;
        chat_type?: string | undefined;
        start_param?: string | undefined;
    }>>;
} & {
    mode: z$1.ZodOptional<z$1.ZodEnum<["no-signup", "login-or-sign-up"]>>;
}, "strip", z$1.ZodTypeAny, {
    mode?: "no-signup" | "login-or-sign-up" | undefined;
    captcha_token?: string | undefined;
    telegram_auth_result?: {
        id: number;
        first_name: string;
        hash: string;
        auth_date: number;
        username?: string | undefined;
        last_name?: string | undefined;
        photo_url?: string | undefined;
    } | undefined;
    telegram_web_app_data?: {
        user: string;
        hash: string;
        auth_date: number;
        signature?: string | undefined;
        query_id?: string | undefined;
        chat_instance?: string | undefined;
        chat_type?: string | undefined;
        start_param?: string | undefined;
    } | undefined;
}, {
    mode?: "no-signup" | "login-or-sign-up" | undefined;
    captcha_token?: string | undefined;
    telegram_auth_result?: {
        id: number;
        first_name: string;
        hash: string;
        auth_date: number;
        username?: string | undefined;
        last_name?: string | undefined;
        photo_url?: string | undefined;
    } | undefined;
    telegram_web_app_data?: {
        user: string;
        hash: string;
        auth_date: number;
        signature?: string | undefined;
        query_id?: string | undefined;
        chat_instance?: string | undefined;
        chat_type?: string | undefined;
        start_param?: string | undefined;
    } | undefined;
}>;
interface PrivyTelegramAuthenticateInput extends z$1.infer<typeof TelegramAuthenticateInput> {
}
declare const TelegramLinkInput: z$1.ZodObject<{
    captcha_token: z$1.ZodOptional<z$1.ZodString>;
    telegram_auth_result: z$1.ZodOptional<z$1.ZodObject<{
        id: z$1.ZodNumber;
        first_name: z$1.ZodString;
        auth_date: z$1.ZodNumber;
        hash: z$1.ZodString;
        username: z$1.ZodOptional<z$1.ZodString>;
        last_name: z$1.ZodOptional<z$1.ZodString>;
        photo_url: z$1.ZodOptional<z$1.ZodString>;
    }, "strip", z$1.ZodTypeAny, {
        id: number;
        first_name: string;
        hash: string;
        auth_date: number;
        username?: string | undefined;
        last_name?: string | undefined;
        photo_url?: string | undefined;
    }, {
        id: number;
        first_name: string;
        hash: string;
        auth_date: number;
        username?: string | undefined;
        last_name?: string | undefined;
        photo_url?: string | undefined;
    }>>;
    telegram_web_app_data: z$1.ZodOptional<z$1.ZodObject<{
        query_id: z$1.ZodOptional<z$1.ZodString>;
        auth_date: z$1.ZodNumber;
        hash: z$1.ZodString;
        user: z$1.ZodString;
        chat_instance: z$1.ZodOptional<z$1.ZodString>;
        chat_type: z$1.ZodOptional<z$1.ZodString>;
        start_param: z$1.ZodOptional<z$1.ZodString>;
        signature: z$1.ZodOptional<z$1.ZodString>;
    }, "strip", z$1.ZodTypeAny, {
        user: string;
        hash: string;
        auth_date: number;
        signature?: string | undefined;
        query_id?: string | undefined;
        chat_instance?: string | undefined;
        chat_type?: string | undefined;
        start_param?: string | undefined;
    }, {
        user: string;
        hash: string;
        auth_date: number;
        signature?: string | undefined;
        query_id?: string | undefined;
        chat_instance?: string | undefined;
        chat_type?: string | undefined;
        start_param?: string | undefined;
    }>>;
} & {
    mode: z$1.ZodOptional<z$1.ZodEnum<["no-signup", "login-or-sign-up"]>>;
}, "strip", z$1.ZodTypeAny, {
    mode?: "no-signup" | "login-or-sign-up" | undefined;
    captcha_token?: string | undefined;
    telegram_auth_result?: {
        id: number;
        first_name: string;
        hash: string;
        auth_date: number;
        username?: string | undefined;
        last_name?: string | undefined;
        photo_url?: string | undefined;
    } | undefined;
    telegram_web_app_data?: {
        user: string;
        hash: string;
        auth_date: number;
        signature?: string | undefined;
        query_id?: string | undefined;
        chat_instance?: string | undefined;
        chat_type?: string | undefined;
        start_param?: string | undefined;
    } | undefined;
}, {
    mode?: "no-signup" | "login-or-sign-up" | undefined;
    captcha_token?: string | undefined;
    telegram_auth_result?: {
        id: number;
        first_name: string;
        hash: string;
        auth_date: number;
        username?: string | undefined;
        last_name?: string | undefined;
        photo_url?: string | undefined;
    } | undefined;
    telegram_web_app_data?: {
        user: string;
        hash: string;
        auth_date: number;
        signature?: string | undefined;
        query_id?: string | undefined;
        chat_instance?: string | undefined;
        chat_type?: string | undefined;
        start_param?: string | undefined;
    } | undefined;
}>;
interface PrivyTelegramLinkInput extends z$1.infer<typeof TelegramLinkInput> {
}
declare const TelegramUnlinkInput: z$1.ZodObject<{
    telegram_user_id: z$1.ZodString;
}, "strip", z$1.ZodTypeAny, {
    telegram_user_id: string;
}, {
    telegram_user_id: string;
}>;
interface PrivyTelegramUnlinkInput extends z$1.infer<typeof TelegramUnlinkInput> {
}
declare const TransferTelegramInput: z$1.ZodObject<{
    nonce: z$1.ZodString;
} & {
    telegram_auth_result: z$1.ZodOptional<z$1.ZodObject<{
        id: z$1.ZodNumber;
        first_name: z$1.ZodString;
        auth_date: z$1.ZodNumber;
        hash: z$1.ZodString;
        username: z$1.ZodOptional<z$1.ZodString>;
        last_name: z$1.ZodOptional<z$1.ZodString>;
        photo_url: z$1.ZodOptional<z$1.ZodString>;
    }, "strip", z$1.ZodTypeAny, {
        id: number;
        first_name: string;
        hash: string;
        auth_date: number;
        username?: string | undefined;
        last_name?: string | undefined;
        photo_url?: string | undefined;
    }, {
        id: number;
        first_name: string;
        hash: string;
        auth_date: number;
        username?: string | undefined;
        last_name?: string | undefined;
        photo_url?: string | undefined;
    }>>;
    telegram_web_app_data: z$1.ZodOptional<z$1.ZodObject<{
        query_id: z$1.ZodOptional<z$1.ZodString>;
        auth_date: z$1.ZodNumber;
        hash: z$1.ZodString;
        user: z$1.ZodString;
        chat_instance: z$1.ZodOptional<z$1.ZodString>;
        chat_type: z$1.ZodOptional<z$1.ZodString>;
        start_param: z$1.ZodOptional<z$1.ZodString>;
        signature: z$1.ZodOptional<z$1.ZodString>;
    }, "strip", z$1.ZodTypeAny, {
        user: string;
        hash: string;
        auth_date: number;
        signature?: string | undefined;
        query_id?: string | undefined;
        chat_instance?: string | undefined;
        chat_type?: string | undefined;
        start_param?: string | undefined;
    }, {
        user: string;
        hash: string;
        auth_date: number;
        signature?: string | undefined;
        query_id?: string | undefined;
        chat_instance?: string | undefined;
        chat_type?: string | undefined;
        start_param?: string | undefined;
    }>>;
}, "strip", z$1.ZodTypeAny, {
    nonce: string;
    telegram_auth_result?: {
        id: number;
        first_name: string;
        hash: string;
        auth_date: number;
        username?: string | undefined;
        last_name?: string | undefined;
        photo_url?: string | undefined;
    } | undefined;
    telegram_web_app_data?: {
        user: string;
        hash: string;
        auth_date: number;
        signature?: string | undefined;
        query_id?: string | undefined;
        chat_instance?: string | undefined;
        chat_type?: string | undefined;
        start_param?: string | undefined;
    } | undefined;
}, {
    nonce: string;
    telegram_auth_result?: {
        id: number;
        first_name: string;
        hash: string;
        auth_date: number;
        username?: string | undefined;
        last_name?: string | undefined;
        photo_url?: string | undefined;
    } | undefined;
    telegram_web_app_data?: {
        user: string;
        hash: string;
        auth_date: number;
        signature?: string | undefined;
        query_id?: string | undefined;
        chat_instance?: string | undefined;
        chat_type?: string | undefined;
        start_param?: string | undefined;
    } | undefined;
}>;
interface PrivyTransferTelegramInput extends z$1.infer<typeof TransferTelegramInput> {
}

declare const RefreshTokenInput: z.ZodObject<{
    refresh_token: z.ZodString;
}, "strip", z.ZodTypeAny, {
    refresh_token: string;
}, {
    refresh_token: string;
}>;
interface PrivyRefreshTokenInput extends z.infer<typeof RefreshTokenInput> {
}
/**
 * In the case of a customer using cookies, refreshToken is in the cookies instead of the body
 */
declare const OptionalRefreshTokenInput: z.ZodObject<{
    refresh_token: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    refresh_token?: string | undefined;
}, {
    refresh_token?: string | undefined;
}>;
interface PrivyOptionalRefreshTokenInput extends z.infer<typeof OptionalRefreshTokenInput> {
}

declare const EmailAccount: z.ZodObject<{
    type: z.ZodLiteral<"email">;
    address: z.ZodString;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "email";
    address: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
}, {
    type: "email";
    address: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
}>;
interface PrivyEmailAccount extends z.infer<typeof EmailAccount> {
}
declare const PhoneAccount: z.ZodObject<{
    type: z.ZodLiteral<"phone">;
    number: z.ZodOptional<z.ZodString>;
    phoneNumber: z.ZodString;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "phone";
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    phoneNumber: string;
    number?: string | undefined;
}, {
    type: "phone";
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    phoneNumber: string;
    number?: string | undefined;
}>;
interface PrivyPhoneAccount extends z.infer<typeof PhoneAccount> {
}
declare const BaseWalletAccount: z.ZodObject<{
    type: z.ZodEnum<["wallet", "smart_wallet"]>;
    address: z.ZodString;
    chain_type: z.ZodEnum<["solana", "ethereum"]>;
}, "strip", z.ZodTypeAny, {
    type: "wallet" | "smart_wallet";
    address: string;
    chain_type: "solana" | "ethereum";
}, {
    type: "wallet" | "smart_wallet";
    address: string;
    chain_type: "solana" | "ethereum";
}>;
interface PrivyBaseWalletAccount extends z.infer<typeof BaseWalletAccount> {
}
declare const EthereumAccount: z.ZodObject<{
    type: z.ZodLiteral<"wallet">;
    address: z.ZodString;
    /**
     * @deprecated Will be removed in a future release
     */
    chain_id: z.ZodOptional<z.ZodString>;
    chain_type: z.ZodLiteral<"ethereum">;
    /**
     * @deprecated Use `wallet_client_type` instead.
     */
    wallet_client: z.ZodLiteral<"unknown">;
    wallet_client_type: z.ZodOptional<z.ZodString>;
    connector_type: z.ZodOptional<z.ZodString>;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "wallet";
    address: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    chain_type: "ethereum";
    wallet_client: "unknown";
    chain_id?: string | undefined;
    wallet_client_type?: string | undefined;
    connector_type?: string | undefined;
}, {
    type: "wallet";
    address: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    chain_type: "ethereum";
    wallet_client: "unknown";
    chain_id?: string | undefined;
    wallet_client_type?: string | undefined;
    connector_type?: string | undefined;
}>;
interface PrivyEthereumAccount extends z.infer<typeof EthereumAccount> {
}
declare const SmartWalletAccount: z.ZodObject<{
    type: z.ZodLiteral<"smart_wallet">;
    address: z.ZodString;
    smart_wallet_type: z.ZodEnum<["safe", "kernel", "biconomy", "light_account", "coinbase_smart_wallet", "thirdweb"]>;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "smart_wallet";
    address: string;
    smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
}, {
    type: "smart_wallet";
    address: string;
    smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
}>;
interface PrivySmartWalletAccount extends z.infer<typeof SmartWalletAccount> {
}
declare const SolanaAccount: z.ZodObject<{
    type: z.ZodLiteral<"wallet">;
    address: z.ZodString;
    chain_type: z.ZodLiteral<"solana">;
    /**
     * @deprecated Use `wallet_client_type` instead.
     */
    wallet_client: z.ZodLiteral<"unknown">;
    wallet_client_type: z.ZodOptional<z.ZodString>;
    connector_type: z.ZodOptional<z.ZodString>;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "wallet";
    address: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    chain_type: "solana";
    wallet_client: "unknown";
    wallet_client_type?: string | undefined;
    connector_type?: string | undefined;
}, {
    type: "wallet";
    address: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    chain_type: "solana";
    wallet_client: "unknown";
    wallet_client_type?: string | undefined;
    connector_type?: string | undefined;
}>;
interface PrivySolanaAccount extends z.infer<typeof SolanaAccount> {
}
declare const FarcasterAccount: z.ZodObject<{
    type: z.ZodLiteral<"farcaster">;
    fid: z.ZodNumber;
    owner_address: z.ZodEffects<z.ZodString, string, string>;
    username: z.ZodOptional<z.ZodString>;
    display_name: z.ZodOptional<z.ZodString>;
    bio: z.ZodOptional<z.ZodString>;
    profile_picture: z.ZodOptional<z.ZodString>;
    profile_picture_url: z.ZodOptional<z.ZodString>;
    homepage_url: z.ZodOptional<z.ZodString>;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
    signer_public_key: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "farcaster";
    fid: number;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    owner_address: string;
    username?: string | undefined;
    display_name?: string | undefined;
    bio?: string | undefined;
    profile_picture?: string | undefined;
    profile_picture_url?: string | undefined;
    homepage_url?: string | undefined;
    signer_public_key?: string | undefined;
}, {
    type: "farcaster";
    fid: number;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    owner_address: string;
    username?: string | undefined;
    display_name?: string | undefined;
    bio?: string | undefined;
    profile_picture?: string | undefined;
    profile_picture_url?: string | undefined;
    homepage_url?: string | undefined;
    signer_public_key?: string | undefined;
}>;
interface PrivyFarcasterAccount extends z.infer<typeof FarcasterAccount> {
}
declare const PasskeyAccount: z.ZodObject<{
    type: z.ZodLiteral<"passkey">;
    created_with_browser: z.ZodOptional<z.ZodString>;
    created_with_os: z.ZodOptional<z.ZodString>;
    created_with_device: z.ZodOptional<z.ZodString>;
    credential_id: z.ZodString;
    authenticator_name: z.ZodOptional<z.ZodString>;
    enrolled_in_mfa: z.ZodBoolean;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "passkey";
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    credential_id: string;
    enrolled_in_mfa: boolean;
    created_with_browser?: string | undefined;
    created_with_os?: string | undefined;
    created_with_device?: string | undefined;
    authenticator_name?: string | undefined;
}, {
    type: "passkey";
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    credential_id: string;
    enrolled_in_mfa: boolean;
    created_with_browser?: string | undefined;
    created_with_os?: string | undefined;
    created_with_device?: string | undefined;
    authenticator_name?: string | undefined;
}>;
interface PrivyPasskeyAccount extends z.infer<typeof PasskeyAccount> {
}
declare const TelegramAccount: z.ZodEffects<z.ZodObject<{
    type: z.ZodLiteral<"telegram">;
    telegram_user_id: z.ZodString;
    first_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    last_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    username: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    photo_url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "telegram";
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    telegram_user_id: string;
    username?: string | null | undefined;
    first_name?: string | null | undefined;
    last_name?: string | null | undefined;
    photo_url?: string | null | undefined;
}, {
    type: "telegram";
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    telegram_user_id: string;
    username?: string | null | undefined;
    first_name?: string | null | undefined;
    last_name?: string | null | undefined;
    photo_url?: string | null | undefined;
}>, {
    telegramUserId: string;
    firstName: string | null | undefined;
    type: "telegram";
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    telegram_user_id: string;
    username?: string | null | undefined;
    first_name?: string | null | undefined;
    last_name?: string | null | undefined;
    photo_url?: string | null | undefined;
}, {
    type: "telegram";
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    telegram_user_id: string;
    username?: string | null | undefined;
    first_name?: string | null | undefined;
    last_name?: string | null | undefined;
    photo_url?: string | null | undefined;
}>;
interface PrivyTelegramAccount extends z.infer<typeof TelegramAccount> {
}
declare const EthereumEmbeddedWalletAccount: z.ZodObject<{
    id: z.ZodDefault<z.ZodNullable<z.ZodString>>;
    type: z.ZodLiteral<"wallet">;
    address: z.ZodString;
    imported: z.ZodDefault<z.ZodBoolean>;
    delegated: z.ZodDefault<z.ZodBoolean>;
    wallet_index: z.ZodNumber;
    chain_id: z.ZodString;
    wallet_client: z.ZodLiteral<"privy">;
    wallet_client_type: z.ZodLiteral<"privy">;
    connector_type: z.ZodLiteral<"embedded">;
    recovery_method: z.ZodEnum<["privy", "user-passcode", "google-drive", "icloud", "recovery-encryption-key", "privy-v2"]>;
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
} & {
    chain_type: z.ZodLiteral<"ethereum">;
}, "strip", z.ZodTypeAny, {
    type: "wallet";
    id: string | null;
    address: string;
    chain_id: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    chain_type: "ethereum";
    wallet_client: "privy";
    wallet_client_type: "privy";
    connector_type: "embedded";
    imported: boolean;
    delegated: boolean;
    wallet_index: number;
    recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
}, {
    type: "wallet";
    address: string;
    chain_id: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    chain_type: "ethereum";
    wallet_client: "privy";
    wallet_client_type: "privy";
    connector_type: "embedded";
    wallet_index: number;
    recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
    id?: string | null | undefined;
    imported?: boolean | undefined;
    delegated?: boolean | undefined;
}>;
interface PrivyEthereumEmbeddedWalletAccount extends z.infer<typeof EthereumEmbeddedWalletAccount> {
}
declare const SolanaEmbeddedWalletAccount: z.ZodObject<{
    id: z.ZodDefault<z.ZodNullable<z.ZodString>>;
    type: z.ZodLiteral<"wallet">;
    address: z.ZodString;
    imported: z.ZodDefault<z.ZodBoolean>;
    delegated: z.ZodDefault<z.ZodBoolean>;
    wallet_index: z.ZodNumber;
    chain_id: z.ZodString;
    wallet_client: z.ZodLiteral<"privy">;
    wallet_client_type: z.ZodLiteral<"privy">;
    connector_type: z.ZodLiteral<"embedded">;
    recovery_method: z.ZodEnum<["privy", "user-passcode", "google-drive", "icloud", "recovery-encryption-key", "privy-v2"]>;
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
} & {
    chain_type: z.ZodLiteral<"solana">;
    public_key: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "wallet";
    id: string | null;
    address: string;
    public_key: string;
    chain_id: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    chain_type: "solana";
    wallet_client: "privy";
    wallet_client_type: "privy";
    connector_type: "embedded";
    imported: boolean;
    delegated: boolean;
    wallet_index: number;
    recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
}, {
    type: "wallet";
    address: string;
    public_key: string;
    chain_id: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    chain_type: "solana";
    wallet_client: "privy";
    wallet_client_type: "privy";
    connector_type: "embedded";
    wallet_index: number;
    recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
    id?: string | null | undefined;
    imported?: boolean | undefined;
    delegated?: boolean | undefined;
}>;
interface PrivySolanaEmbeddedWalletAccount extends z.infer<typeof SolanaEmbeddedWalletAccount> {
}
declare const BitcoinSegwitEmbeddedWalletAccount: z.ZodObject<{
    id: z.ZodDefault<z.ZodNullable<z.ZodString>>;
    type: z.ZodLiteral<"wallet">;
    address: z.ZodString;
    imported: z.ZodDefault<z.ZodBoolean>;
    delegated: z.ZodDefault<z.ZodBoolean>;
    wallet_index: z.ZodNumber;
    chain_id: z.ZodString;
    wallet_client: z.ZodLiteral<"privy">;
    wallet_client_type: z.ZodLiteral<"privy">;
    connector_type: z.ZodLiteral<"embedded">;
    recovery_method: z.ZodEnum<["privy", "user-passcode", "google-drive", "icloud", "recovery-encryption-key", "privy-v2"]>;
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
} & {
    chain_type: z.ZodLiteral<"bitcoin-segwit">;
    public_key: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "wallet";
    id: string | null;
    address: string;
    public_key: string;
    chain_id: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    chain_type: "bitcoin-segwit";
    wallet_client: "privy";
    wallet_client_type: "privy";
    connector_type: "embedded";
    imported: boolean;
    delegated: boolean;
    wallet_index: number;
    recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
}, {
    type: "wallet";
    address: string;
    public_key: string;
    chain_id: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    chain_type: "bitcoin-segwit";
    wallet_client: "privy";
    wallet_client_type: "privy";
    connector_type: "embedded";
    wallet_index: number;
    recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
    id?: string | null | undefined;
    imported?: boolean | undefined;
    delegated?: boolean | undefined;
}>;
interface PrivyBitcoinSegwitEmbeddedWalletAccount extends z.infer<typeof BitcoinSegwitEmbeddedWalletAccount> {
}
declare const BitcoinTaprootEmbeddedWalletAccount: z.ZodObject<{
    id: z.ZodDefault<z.ZodNullable<z.ZodString>>;
    type: z.ZodLiteral<"wallet">;
    address: z.ZodString;
    imported: z.ZodDefault<z.ZodBoolean>;
    delegated: z.ZodDefault<z.ZodBoolean>;
    wallet_index: z.ZodNumber;
    chain_id: z.ZodString;
    wallet_client: z.ZodLiteral<"privy">;
    wallet_client_type: z.ZodLiteral<"privy">;
    connector_type: z.ZodLiteral<"embedded">;
    recovery_method: z.ZodEnum<["privy", "user-passcode", "google-drive", "icloud", "recovery-encryption-key", "privy-v2"]>;
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
} & {
    chain_type: z.ZodLiteral<"bitcoin-taproot">;
    public_key: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "wallet";
    id: string | null;
    address: string;
    public_key: string;
    chain_id: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    chain_type: "bitcoin-taproot";
    wallet_client: "privy";
    wallet_client_type: "privy";
    connector_type: "embedded";
    imported: boolean;
    delegated: boolean;
    wallet_index: number;
    recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
}, {
    type: "wallet";
    address: string;
    public_key: string;
    chain_id: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    chain_type: "bitcoin-taproot";
    wallet_client: "privy";
    wallet_client_type: "privy";
    connector_type: "embedded";
    wallet_index: number;
    recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
    id?: string | null | undefined;
    imported?: boolean | undefined;
    delegated?: boolean | undefined;
}>;
interface PrivyBitcoinTaprootEmbeddedWalletAccount extends z.infer<typeof BitcoinTaprootEmbeddedWalletAccount> {
}
declare const UnifiedWalletAccount: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"wallet">;
    address: z.ZodString;
    imported: z.ZodDefault<z.ZodBoolean>;
    delegated: z.ZodDefault<z.ZodBoolean>;
    wallet_index: z.ZodNumber;
    chain_id: z.ZodString;
    wallet_client: z.ZodLiteral<"privy">;
    wallet_client_type: z.ZodLiteral<"privy">;
    connector_type: z.ZodLiteral<"embedded">;
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
    chain_type: z.ZodLiteral<"ethereum">;
} & {
    id: z.ZodString;
    recovery_method: z.ZodLiteral<"privy-v2">;
}, "strip", z.ZodTypeAny, {
    type: "wallet";
    id: string;
    address: string;
    chain_id: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    chain_type: "ethereum";
    wallet_client: "privy";
    wallet_client_type: "privy";
    connector_type: "embedded";
    imported: boolean;
    delegated: boolean;
    wallet_index: number;
    recovery_method: "privy-v2";
}, {
    type: "wallet";
    id: string;
    address: string;
    chain_id: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    chain_type: "ethereum";
    wallet_client: "privy";
    wallet_client_type: "privy";
    connector_type: "embedded";
    wallet_index: number;
    recovery_method: "privy-v2";
    imported?: boolean | undefined;
    delegated?: boolean | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"wallet">;
    address: z.ZodString;
    imported: z.ZodDefault<z.ZodBoolean>;
    delegated: z.ZodDefault<z.ZodBoolean>;
    wallet_index: z.ZodNumber;
    chain_id: z.ZodString;
    wallet_client: z.ZodLiteral<"privy">;
    wallet_client_type: z.ZodLiteral<"privy">;
    connector_type: z.ZodLiteral<"embedded">;
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
    chain_type: z.ZodLiteral<"solana">;
    public_key: z.ZodString;
} & {
    id: z.ZodString;
    recovery_method: z.ZodLiteral<"privy-v2">;
}, "strip", z.ZodTypeAny, {
    type: "wallet";
    id: string;
    address: string;
    public_key: string;
    chain_id: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    chain_type: "solana";
    wallet_client: "privy";
    wallet_client_type: "privy";
    connector_type: "embedded";
    imported: boolean;
    delegated: boolean;
    wallet_index: number;
    recovery_method: "privy-v2";
}, {
    type: "wallet";
    id: string;
    address: string;
    public_key: string;
    chain_id: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    chain_type: "solana";
    wallet_client: "privy";
    wallet_client_type: "privy";
    connector_type: "embedded";
    wallet_index: number;
    recovery_method: "privy-v2";
    imported?: boolean | undefined;
    delegated?: boolean | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"wallet">;
    address: z.ZodString;
    imported: z.ZodDefault<z.ZodBoolean>;
    delegated: z.ZodDefault<z.ZodBoolean>;
    wallet_index: z.ZodNumber;
    chain_id: z.ZodString;
    wallet_client: z.ZodLiteral<"privy">;
    wallet_client_type: z.ZodLiteral<"privy">;
    connector_type: z.ZodLiteral<"embedded">;
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
    chain_type: z.ZodLiteral<"bitcoin-segwit">;
    public_key: z.ZodString;
} & {
    id: z.ZodString;
    recovery_method: z.ZodLiteral<"privy-v2">;
}, "strip", z.ZodTypeAny, {
    type: "wallet";
    id: string;
    address: string;
    public_key: string;
    chain_id: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    chain_type: "bitcoin-segwit";
    wallet_client: "privy";
    wallet_client_type: "privy";
    connector_type: "embedded";
    imported: boolean;
    delegated: boolean;
    wallet_index: number;
    recovery_method: "privy-v2";
}, {
    type: "wallet";
    id: string;
    address: string;
    public_key: string;
    chain_id: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    chain_type: "bitcoin-segwit";
    wallet_client: "privy";
    wallet_client_type: "privy";
    connector_type: "embedded";
    wallet_index: number;
    recovery_method: "privy-v2";
    imported?: boolean | undefined;
    delegated?: boolean | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"wallet">;
    address: z.ZodString;
    imported: z.ZodDefault<z.ZodBoolean>;
    delegated: z.ZodDefault<z.ZodBoolean>;
    wallet_index: z.ZodNumber;
    chain_id: z.ZodString;
    wallet_client: z.ZodLiteral<"privy">;
    wallet_client_type: z.ZodLiteral<"privy">;
    connector_type: z.ZodLiteral<"embedded">;
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
    chain_type: z.ZodLiteral<"bitcoin-taproot">;
    public_key: z.ZodString;
} & {
    id: z.ZodString;
    recovery_method: z.ZodLiteral<"privy-v2">;
}, "strip", z.ZodTypeAny, {
    type: "wallet";
    id: string;
    address: string;
    public_key: string;
    chain_id: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    chain_type: "bitcoin-taproot";
    wallet_client: "privy";
    wallet_client_type: "privy";
    connector_type: "embedded";
    imported: boolean;
    delegated: boolean;
    wallet_index: number;
    recovery_method: "privy-v2";
}, {
    type: "wallet";
    id: string;
    address: string;
    public_key: string;
    chain_id: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    chain_type: "bitcoin-taproot";
    wallet_client: "privy";
    wallet_client_type: "privy";
    connector_type: "embedded";
    wallet_index: number;
    recovery_method: "privy-v2";
    imported?: boolean | undefined;
    delegated?: boolean | undefined;
}>]>;
type PrivyUnifiedWalletAccount = z.infer<typeof UnifiedWalletAccount>;
declare const GoogleOauthAccount: z.ZodObject<{
    type: z.ZodLiteral<"google_oauth">;
    subject: z.ZodString;
    email: z.ZodString;
    name: z.ZodNullable<z.ZodString>;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "google_oauth";
    name: string | null;
    email: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    subject: string;
}, {
    type: "google_oauth";
    name: string | null;
    email: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    subject: string;
}>;
interface PrivyGoogleOauthAccount extends z.infer<typeof GoogleOauthAccount> {
}
declare const TwitterOauthAccount: z.ZodObject<{
    type: z.ZodLiteral<"twitter_oauth">;
    subject: z.ZodString;
    username: z.ZodNullable<z.ZodString>;
    name: z.ZodNullable<z.ZodString>;
    profile_picture_url: z.ZodNullable<z.ZodString>;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "twitter_oauth";
    name: string | null;
    username: string | null;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    profile_picture_url: string | null;
    subject: string;
}, {
    type: "twitter_oauth";
    name: string | null;
    username: string | null;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    profile_picture_url: string | null;
    subject: string;
}>;
interface PrivyTwitterOauthAccount extends z.infer<typeof TwitterOauthAccount> {
}
declare const DiscordOauthAccount: z.ZodObject<{
    type: z.ZodLiteral<"discord_oauth">;
    subject: z.ZodString;
    username: z.ZodNullable<z.ZodString>;
    email: z.ZodNullable<z.ZodString>;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "discord_oauth";
    email: string | null;
    username: string | null;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    subject: string;
}, {
    type: "discord_oauth";
    email: string | null;
    username: string | null;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    subject: string;
}>;
interface PrivyDiscordOauthAccount extends z.infer<typeof DiscordOauthAccount> {
}
declare const GithubOauthAccount: z.ZodObject<{
    type: z.ZodLiteral<"github_oauth">;
    subject: z.ZodString;
    username: z.ZodNullable<z.ZodString>;
    name: z.ZodNullable<z.ZodString>;
    email: z.ZodNullable<z.ZodString>;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "github_oauth";
    name: string | null;
    email: string | null;
    username: string | null;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    subject: string;
}, {
    type: "github_oauth";
    name: string | null;
    email: string | null;
    username: string | null;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    subject: string;
}>;
interface PrivyGithubOauthAccount extends z.infer<typeof GithubOauthAccount> {
}
declare const LinkedInOauthAccount: z.ZodObject<{
    type: z.ZodLiteral<"linkedin_oauth">;
    subject: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    email: z.ZodNullable<z.ZodString>;
    vanity_name: z.ZodOptional<z.ZodString>;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "linkedin_oauth";
    email: string | null;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    subject: string;
    name?: string | undefined;
    vanity_name?: string | undefined;
}, {
    type: "linkedin_oauth";
    email: string | null;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    subject: string;
    name?: string | undefined;
    vanity_name?: string | undefined;
}>;
interface PrivyLinkedInOauthAccount extends z.infer<typeof LinkedInOauthAccount> {
}
declare const SpotifyOauthAccount: z.ZodObject<{
    type: z.ZodLiteral<"spotify_oauth">;
    subject: z.ZodString;
    email: z.ZodNullable<z.ZodString>;
    name: z.ZodNullable<z.ZodString>;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "spotify_oauth";
    name: string | null;
    email: string | null;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    subject: string;
}, {
    type: "spotify_oauth";
    name: string | null;
    email: string | null;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    subject: string;
}>;
interface PrivySpotifyOauthAccount extends z.infer<typeof SpotifyOauthAccount> {
}
declare const InstagramOauthAccount: z.ZodObject<{
    type: z.ZodLiteral<"instagram_oauth">;
    subject: z.ZodString;
    username: z.ZodNullable<z.ZodString>;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "instagram_oauth";
    username: string | null;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    subject: string;
}, {
    type: "instagram_oauth";
    username: string | null;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    subject: string;
}>;
interface PrivyInstagramOauthAccount extends z.infer<typeof InstagramOauthAccount> {
}
declare const TiktokOauthAccount: z.ZodObject<{
    type: z.ZodLiteral<"tiktok_oauth">;
    subject: z.ZodString;
    username: z.ZodNullable<z.ZodString>;
    name: z.ZodNullable<z.ZodString>;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "tiktok_oauth";
    name: string | null;
    username: string | null;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    subject: string;
}, {
    type: "tiktok_oauth";
    name: string | null;
    username: string | null;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    subject: string;
}>;
interface PrivyTiktokOauthAccount extends z.infer<typeof TiktokOauthAccount> {
}
declare const AppleOauthAccount: z.ZodObject<{
    type: z.ZodLiteral<"apple_oauth">;
    subject: z.ZodString;
    email: z.ZodNullable<z.ZodString>;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "apple_oauth";
    email: string | null;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    subject: string;
}, {
    type: "apple_oauth";
    email: string | null;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    subject: string;
}>;
interface PrivyAppleOauthAccount extends z.infer<typeof AppleOauthAccount> {
}
declare const CustomJwtAccount: z.ZodObject<{
    type: z.ZodLiteral<"custom_auth">;
    custom_user_id: z.ZodString;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "custom_auth";
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    custom_user_id: string;
}, {
    type: "custom_auth";
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    custom_user_id: string;
}>;
interface PrivyCustomJwtAccount extends z.infer<typeof CustomJwtAccount> {
}
declare const CrossAppEmbeddedWallet: z.ZodObject<{
    address: z.ZodString;
}, "strip", z.ZodTypeAny, {
    address: string;
}, {
    address: string;
}>;
declare const CrossAppSmartWallet: z.ZodObject<{
    address: z.ZodString;
}, "strip", z.ZodTypeAny, {
    address: string;
}, {
    address: string;
}>;
declare const CrossAppAccount: z.ZodObject<{
    type: z.ZodLiteral<"cross_app">;
    subject: z.ZodString;
    provider_app_id: z.ZodString;
    embedded_wallets: z.ZodArray<z.ZodObject<{
        address: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        address: string;
    }, {
        address: string;
    }>, "many">;
    smart_wallets: z.ZodArray<z.ZodObject<{
        address: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        address: string;
    }, {
        address: string;
    }>, "many">;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "cross_app";
    provider_app_id: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    subject: string;
    embedded_wallets: {
        address: string;
    }[];
    smart_wallets: {
        address: string;
    }[];
}, {
    type: "cross_app";
    provider_app_id: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    subject: string;
    embedded_wallets: {
        address: string;
    }[];
    smart_wallets: {
        address: string;
    }[];
}>;
interface PrivyCrossAppWalletAccount extends z.infer<typeof CrossAppAccount> {
}
declare const AuthorizationKeyAccount: z.ZodObject<{
    type: z.ZodLiteral<"authorization_key">;
    public_key: z.ZodString;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "authorization_key";
    public_key: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
}, {
    type: "authorization_key";
    public_key: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
}>;
interface PrivySignerAccount extends z.infer<typeof AuthorizationKeyAccount> {
}
declare const LinkedAccount: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"email">;
    address: z.ZodString;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "email";
    address: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
}, {
    type: "email";
    address: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
}>, z.ZodObject<{
    type: z.ZodLiteral<"phone">;
    number: z.ZodOptional<z.ZodString>;
    phoneNumber: z.ZodString;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "phone";
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    phoneNumber: string;
    number?: string | undefined;
}, {
    type: "phone";
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    phoneNumber: string;
    number?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"wallet">;
    address: z.ZodString;
    /**
     * @deprecated Will be removed in a future release
     */
    chain_id: z.ZodOptional<z.ZodString>;
    chain_type: z.ZodLiteral<"ethereum">;
    /**
     * @deprecated Use `wallet_client_type` instead.
     */
    wallet_client: z.ZodLiteral<"unknown">;
    wallet_client_type: z.ZodOptional<z.ZodString>;
    connector_type: z.ZodOptional<z.ZodString>;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "wallet";
    address: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    chain_type: "ethereum";
    wallet_client: "unknown";
    chain_id?: string | undefined;
    wallet_client_type?: string | undefined;
    connector_type?: string | undefined;
}, {
    type: "wallet";
    address: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    chain_type: "ethereum";
    wallet_client: "unknown";
    chain_id?: string | undefined;
    wallet_client_type?: string | undefined;
    connector_type?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"wallet">;
    address: z.ZodString;
    chain_type: z.ZodLiteral<"solana">;
    /**
     * @deprecated Use `wallet_client_type` instead.
     */
    wallet_client: z.ZodLiteral<"unknown">;
    wallet_client_type: z.ZodOptional<z.ZodString>;
    connector_type: z.ZodOptional<z.ZodString>;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "wallet";
    address: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    chain_type: "solana";
    wallet_client: "unknown";
    wallet_client_type?: string | undefined;
    connector_type?: string | undefined;
}, {
    type: "wallet";
    address: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    chain_type: "solana";
    wallet_client: "unknown";
    wallet_client_type?: string | undefined;
    connector_type?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"smart_wallet">;
    address: z.ZodString;
    smart_wallet_type: z.ZodEnum<["safe", "kernel", "biconomy", "light_account", "coinbase_smart_wallet", "thirdweb"]>;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "smart_wallet";
    address: string;
    smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
}, {
    type: "smart_wallet";
    address: string;
    smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
}>, z.ZodObject<{
    id: z.ZodDefault<z.ZodNullable<z.ZodString>>;
    type: z.ZodLiteral<"wallet">;
    address: z.ZodString;
    imported: z.ZodDefault<z.ZodBoolean>;
    delegated: z.ZodDefault<z.ZodBoolean>;
    wallet_index: z.ZodNumber;
    chain_id: z.ZodString;
    wallet_client: z.ZodLiteral<"privy">;
    wallet_client_type: z.ZodLiteral<"privy">;
    connector_type: z.ZodLiteral<"embedded">;
    recovery_method: z.ZodEnum<["privy", "user-passcode", "google-drive", "icloud", "recovery-encryption-key", "privy-v2"]>;
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
} & {
    chain_type: z.ZodLiteral<"ethereum">;
}, "strip", z.ZodTypeAny, {
    type: "wallet";
    id: string | null;
    address: string;
    chain_id: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    chain_type: "ethereum";
    wallet_client: "privy";
    wallet_client_type: "privy";
    connector_type: "embedded";
    imported: boolean;
    delegated: boolean;
    wallet_index: number;
    recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
}, {
    type: "wallet";
    address: string;
    chain_id: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    chain_type: "ethereum";
    wallet_client: "privy";
    wallet_client_type: "privy";
    connector_type: "embedded";
    wallet_index: number;
    recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
    id?: string | null | undefined;
    imported?: boolean | undefined;
    delegated?: boolean | undefined;
}>, z.ZodObject<{
    id: z.ZodDefault<z.ZodNullable<z.ZodString>>;
    type: z.ZodLiteral<"wallet">;
    address: z.ZodString;
    imported: z.ZodDefault<z.ZodBoolean>;
    delegated: z.ZodDefault<z.ZodBoolean>;
    wallet_index: z.ZodNumber;
    chain_id: z.ZodString;
    wallet_client: z.ZodLiteral<"privy">;
    wallet_client_type: z.ZodLiteral<"privy">;
    connector_type: z.ZodLiteral<"embedded">;
    recovery_method: z.ZodEnum<["privy", "user-passcode", "google-drive", "icloud", "recovery-encryption-key", "privy-v2"]>;
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
} & {
    chain_type: z.ZodLiteral<"solana">;
    public_key: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "wallet";
    id: string | null;
    address: string;
    public_key: string;
    chain_id: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    chain_type: "solana";
    wallet_client: "privy";
    wallet_client_type: "privy";
    connector_type: "embedded";
    imported: boolean;
    delegated: boolean;
    wallet_index: number;
    recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
}, {
    type: "wallet";
    address: string;
    public_key: string;
    chain_id: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    chain_type: "solana";
    wallet_client: "privy";
    wallet_client_type: "privy";
    connector_type: "embedded";
    wallet_index: number;
    recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
    id?: string | null | undefined;
    imported?: boolean | undefined;
    delegated?: boolean | undefined;
}>, z.ZodObject<{
    id: z.ZodDefault<z.ZodNullable<z.ZodString>>;
    type: z.ZodLiteral<"wallet">;
    address: z.ZodString;
    imported: z.ZodDefault<z.ZodBoolean>;
    delegated: z.ZodDefault<z.ZodBoolean>;
    wallet_index: z.ZodNumber;
    chain_id: z.ZodString;
    wallet_client: z.ZodLiteral<"privy">;
    wallet_client_type: z.ZodLiteral<"privy">;
    connector_type: z.ZodLiteral<"embedded">;
    recovery_method: z.ZodEnum<["privy", "user-passcode", "google-drive", "icloud", "recovery-encryption-key", "privy-v2"]>;
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
} & {
    chain_type: z.ZodLiteral<"bitcoin-segwit">;
    public_key: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "wallet";
    id: string | null;
    address: string;
    public_key: string;
    chain_id: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    chain_type: "bitcoin-segwit";
    wallet_client: "privy";
    wallet_client_type: "privy";
    connector_type: "embedded";
    imported: boolean;
    delegated: boolean;
    wallet_index: number;
    recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
}, {
    type: "wallet";
    address: string;
    public_key: string;
    chain_id: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    chain_type: "bitcoin-segwit";
    wallet_client: "privy";
    wallet_client_type: "privy";
    connector_type: "embedded";
    wallet_index: number;
    recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
    id?: string | null | undefined;
    imported?: boolean | undefined;
    delegated?: boolean | undefined;
}>, z.ZodObject<{
    id: z.ZodDefault<z.ZodNullable<z.ZodString>>;
    type: z.ZodLiteral<"wallet">;
    address: z.ZodString;
    imported: z.ZodDefault<z.ZodBoolean>;
    delegated: z.ZodDefault<z.ZodBoolean>;
    wallet_index: z.ZodNumber;
    chain_id: z.ZodString;
    wallet_client: z.ZodLiteral<"privy">;
    wallet_client_type: z.ZodLiteral<"privy">;
    connector_type: z.ZodLiteral<"embedded">;
    recovery_method: z.ZodEnum<["privy", "user-passcode", "google-drive", "icloud", "recovery-encryption-key", "privy-v2"]>;
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
} & {
    chain_type: z.ZodLiteral<"bitcoin-taproot">;
    public_key: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "wallet";
    id: string | null;
    address: string;
    public_key: string;
    chain_id: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    chain_type: "bitcoin-taproot";
    wallet_client: "privy";
    wallet_client_type: "privy";
    connector_type: "embedded";
    imported: boolean;
    delegated: boolean;
    wallet_index: number;
    recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
}, {
    type: "wallet";
    address: string;
    public_key: string;
    chain_id: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    chain_type: "bitcoin-taproot";
    wallet_client: "privy";
    wallet_client_type: "privy";
    connector_type: "embedded";
    wallet_index: number;
    recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
    id?: string | null | undefined;
    imported?: boolean | undefined;
    delegated?: boolean | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"google_oauth">;
    subject: z.ZodString;
    email: z.ZodString;
    name: z.ZodNullable<z.ZodString>;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "google_oauth";
    name: string | null;
    email: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    subject: string;
}, {
    type: "google_oauth";
    name: string | null;
    email: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    subject: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"twitter_oauth">;
    subject: z.ZodString;
    username: z.ZodNullable<z.ZodString>;
    name: z.ZodNullable<z.ZodString>;
    profile_picture_url: z.ZodNullable<z.ZodString>;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "twitter_oauth";
    name: string | null;
    username: string | null;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    profile_picture_url: string | null;
    subject: string;
}, {
    type: "twitter_oauth";
    name: string | null;
    username: string | null;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    profile_picture_url: string | null;
    subject: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"discord_oauth">;
    subject: z.ZodString;
    username: z.ZodNullable<z.ZodString>;
    email: z.ZodNullable<z.ZodString>;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "discord_oauth";
    email: string | null;
    username: string | null;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    subject: string;
}, {
    type: "discord_oauth";
    email: string | null;
    username: string | null;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    subject: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"github_oauth">;
    subject: z.ZodString;
    username: z.ZodNullable<z.ZodString>;
    name: z.ZodNullable<z.ZodString>;
    email: z.ZodNullable<z.ZodString>;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "github_oauth";
    name: string | null;
    email: string | null;
    username: string | null;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    subject: string;
}, {
    type: "github_oauth";
    name: string | null;
    email: string | null;
    username: string | null;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    subject: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"spotify_oauth">;
    subject: z.ZodString;
    email: z.ZodNullable<z.ZodString>;
    name: z.ZodNullable<z.ZodString>;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "spotify_oauth";
    name: string | null;
    email: string | null;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    subject: string;
}, {
    type: "spotify_oauth";
    name: string | null;
    email: string | null;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    subject: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"instagram_oauth">;
    subject: z.ZodString;
    username: z.ZodNullable<z.ZodString>;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "instagram_oauth";
    username: string | null;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    subject: string;
}, {
    type: "instagram_oauth";
    username: string | null;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    subject: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"tiktok_oauth">;
    subject: z.ZodString;
    username: z.ZodNullable<z.ZodString>;
    name: z.ZodNullable<z.ZodString>;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "tiktok_oauth";
    name: string | null;
    username: string | null;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    subject: string;
}, {
    type: "tiktok_oauth";
    name: string | null;
    username: string | null;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    subject: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"linkedin_oauth">;
    subject: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    email: z.ZodNullable<z.ZodString>;
    vanity_name: z.ZodOptional<z.ZodString>;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "linkedin_oauth";
    email: string | null;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    subject: string;
    name?: string | undefined;
    vanity_name?: string | undefined;
}, {
    type: "linkedin_oauth";
    email: string | null;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    subject: string;
    name?: string | undefined;
    vanity_name?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"apple_oauth">;
    subject: z.ZodString;
    email: z.ZodNullable<z.ZodString>;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "apple_oauth";
    email: string | null;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    subject: string;
}, {
    type: "apple_oauth";
    email: string | null;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    subject: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"custom_auth">;
    custom_user_id: z.ZodString;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "custom_auth";
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    custom_user_id: string;
}, {
    type: "custom_auth";
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    custom_user_id: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"farcaster">;
    fid: z.ZodNumber;
    owner_address: z.ZodEffects<z.ZodString, string, string>;
    username: z.ZodOptional<z.ZodString>;
    display_name: z.ZodOptional<z.ZodString>;
    bio: z.ZodOptional<z.ZodString>;
    profile_picture: z.ZodOptional<z.ZodString>;
    profile_picture_url: z.ZodOptional<z.ZodString>;
    homepage_url: z.ZodOptional<z.ZodString>;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
    signer_public_key: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "farcaster";
    fid: number;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    owner_address: string;
    username?: string | undefined;
    display_name?: string | undefined;
    bio?: string | undefined;
    profile_picture?: string | undefined;
    profile_picture_url?: string | undefined;
    homepage_url?: string | undefined;
    signer_public_key?: string | undefined;
}, {
    type: "farcaster";
    fid: number;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    owner_address: string;
    username?: string | undefined;
    display_name?: string | undefined;
    bio?: string | undefined;
    profile_picture?: string | undefined;
    profile_picture_url?: string | undefined;
    homepage_url?: string | undefined;
    signer_public_key?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"passkey">;
    created_with_browser: z.ZodOptional<z.ZodString>;
    created_with_os: z.ZodOptional<z.ZodString>;
    created_with_device: z.ZodOptional<z.ZodString>;
    credential_id: z.ZodString;
    authenticator_name: z.ZodOptional<z.ZodString>;
    enrolled_in_mfa: z.ZodBoolean;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "passkey";
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    credential_id: string;
    enrolled_in_mfa: boolean;
    created_with_browser?: string | undefined;
    created_with_os?: string | undefined;
    created_with_device?: string | undefined;
    authenticator_name?: string | undefined;
}, {
    type: "passkey";
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    credential_id: string;
    enrolled_in_mfa: boolean;
    created_with_browser?: string | undefined;
    created_with_os?: string | undefined;
    created_with_device?: string | undefined;
    authenticator_name?: string | undefined;
}>, z.ZodEffects<z.ZodObject<{
    type: z.ZodLiteral<"telegram">;
    telegram_user_id: z.ZodString;
    first_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    last_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    username: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    photo_url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "telegram";
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    telegram_user_id: string;
    username?: string | null | undefined;
    first_name?: string | null | undefined;
    last_name?: string | null | undefined;
    photo_url?: string | null | undefined;
}, {
    type: "telegram";
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    telegram_user_id: string;
    username?: string | null | undefined;
    first_name?: string | null | undefined;
    last_name?: string | null | undefined;
    photo_url?: string | null | undefined;
}>, {
    telegramUserId: string;
    firstName: string | null | undefined;
    type: "telegram";
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    telegram_user_id: string;
    username?: string | null | undefined;
    first_name?: string | null | undefined;
    last_name?: string | null | undefined;
    photo_url?: string | null | undefined;
}, {
    type: "telegram";
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    telegram_user_id: string;
    username?: string | null | undefined;
    first_name?: string | null | undefined;
    last_name?: string | null | undefined;
    photo_url?: string | null | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"cross_app">;
    subject: z.ZodString;
    provider_app_id: z.ZodString;
    embedded_wallets: z.ZodArray<z.ZodObject<{
        address: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        address: string;
    }, {
        address: string;
    }>, "many">;
    smart_wallets: z.ZodArray<z.ZodObject<{
        address: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        address: string;
    }, {
        address: string;
    }>, "many">;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "cross_app";
    provider_app_id: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    subject: string;
    embedded_wallets: {
        address: string;
    }[];
    smart_wallets: {
        address: string;
    }[];
}, {
    type: "cross_app";
    provider_app_id: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
    subject: string;
    embedded_wallets: {
        address: string;
    }[];
    smart_wallets: {
        address: string;
    }[];
}>, z.ZodObject<{
    type: z.ZodLiteral<"authorization_key">;
    public_key: z.ZodString;
    /** @deprecated use `first_verified_at` instead. */
    verified_at: z.ZodNumber;
    first_verified_at: z.ZodNullable<z.ZodNumber>;
    latest_verified_at: z.ZodNullable<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "authorization_key";
    public_key: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
}, {
    type: "authorization_key";
    public_key: string;
    verified_at: number;
    first_verified_at: number | null;
    latest_verified_at: number | null;
}>]>;
type PrivyLinkedAccount = z.infer<typeof LinkedAccount>;
declare const SmsMfaMethod: z.ZodObject<{
    type: z.ZodLiteral<"sms">;
    verified_at: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    type: "sms";
    verified_at: number;
}, {
    type: "sms";
    verified_at: number;
}>;
interface PrivySmsMfaMethod extends z.infer<typeof SmsMfaMethod> {
}
declare const TotpMfaMethod: z.ZodObject<{
    type: z.ZodLiteral<"totp">;
    verified_at: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    type: "totp";
    verified_at: number;
}, {
    type: "totp";
    verified_at: number;
}>;
interface PrivyTotpMfaMethod extends z.infer<typeof TotpMfaMethod> {
}
declare const PasskeyMfaMethod: z.ZodObject<{
    type: z.ZodLiteral<"passkey">;
    verified_at: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    type: "passkey";
    verified_at: number;
}, {
    type: "passkey";
    verified_at: number;
}>;
interface PrivyPasskeyMfaMethod extends z.infer<typeof PasskeyMfaMethod> {
}
declare const LinkedMfaMethod: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"sms">;
    verified_at: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    type: "sms";
    verified_at: number;
}, {
    type: "sms";
    verified_at: number;
}>, z.ZodObject<{
    type: z.ZodLiteral<"totp">;
    verified_at: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    type: "totp";
    verified_at: number;
}, {
    type: "totp";
    verified_at: number;
}>, z.ZodObject<{
    type: z.ZodLiteral<"passkey">;
    verified_at: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    type: "passkey";
    verified_at: number;
}, {
    type: "passkey";
    verified_at: number;
}>]>;
declare const CustomMetadata: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
type CustomMetadataType = z.infer<typeof CustomMetadata>;
declare const OAuthTokens: z.ZodObject<{
    provider: z.ZodString;
    access_token: z.ZodString;
    access_token_expires_in_seconds: z.ZodOptional<z.ZodNumber>;
    refresh_token: z.ZodOptional<z.ZodString>;
    refresh_token_expires_in_seconds: z.ZodOptional<z.ZodNumber>;
    scopes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    provider: string;
    access_token: string;
    access_token_expires_in_seconds?: number | undefined;
    refresh_token?: string | undefined;
    refresh_token_expires_in_seconds?: number | undefined;
    scopes?: string[] | undefined;
}, {
    provider: string;
    access_token: string;
    access_token_expires_in_seconds?: number | undefined;
    refresh_token?: string | undefined;
    refresh_token_expires_in_seconds?: number | undefined;
    scopes?: string[] | undefined;
}>;
declare const User: z.ZodObject<{
    id: z.ZodString;
    linked_accounts: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"email">;
        address: z.ZodString;
        /** @deprecated use `first_verified_at` instead. */
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "email";
        address: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
    }, {
        type: "email";
        address: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"phone">;
        number: z.ZodOptional<z.ZodString>;
        phoneNumber: z.ZodString;
        /** @deprecated use `first_verified_at` instead. */
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "phone";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        phoneNumber: string;
        number?: string | undefined;
    }, {
        type: "phone";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        phoneNumber: string;
        number?: string | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"wallet">;
        address: z.ZodString;
        /**
         * @deprecated Will be removed in a future release
         */
        chain_id: z.ZodOptional<z.ZodString>;
        chain_type: z.ZodLiteral<"ethereum">;
        /**
         * @deprecated Use `wallet_client_type` instead.
         */
        wallet_client: z.ZodLiteral<"unknown">;
        wallet_client_type: z.ZodOptional<z.ZodString>;
        connector_type: z.ZodOptional<z.ZodString>;
        /** @deprecated use `first_verified_at` instead. */
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "wallet";
        address: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "ethereum";
        wallet_client: "unknown";
        chain_id?: string | undefined;
        wallet_client_type?: string | undefined;
        connector_type?: string | undefined;
    }, {
        type: "wallet";
        address: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "ethereum";
        wallet_client: "unknown";
        chain_id?: string | undefined;
        wallet_client_type?: string | undefined;
        connector_type?: string | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"wallet">;
        address: z.ZodString;
        chain_type: z.ZodLiteral<"solana">;
        /**
         * @deprecated Use `wallet_client_type` instead.
         */
        wallet_client: z.ZodLiteral<"unknown">;
        wallet_client_type: z.ZodOptional<z.ZodString>;
        connector_type: z.ZodOptional<z.ZodString>;
        /** @deprecated use `first_verified_at` instead. */
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "wallet";
        address: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "solana";
        wallet_client: "unknown";
        wallet_client_type?: string | undefined;
        connector_type?: string | undefined;
    }, {
        type: "wallet";
        address: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "solana";
        wallet_client: "unknown";
        wallet_client_type?: string | undefined;
        connector_type?: string | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"smart_wallet">;
        address: z.ZodString;
        smart_wallet_type: z.ZodEnum<["safe", "kernel", "biconomy", "light_account", "coinbase_smart_wallet", "thirdweb"]>;
        /** @deprecated use `first_verified_at` instead. */
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "smart_wallet";
        address: string;
        smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
    }, {
        type: "smart_wallet";
        address: string;
        smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
    }>, z.ZodObject<{
        id: z.ZodDefault<z.ZodNullable<z.ZodString>>;
        type: z.ZodLiteral<"wallet">;
        address: z.ZodString;
        imported: z.ZodDefault<z.ZodBoolean>;
        delegated: z.ZodDefault<z.ZodBoolean>;
        wallet_index: z.ZodNumber;
        chain_id: z.ZodString;
        wallet_client: z.ZodLiteral<"privy">;
        wallet_client_type: z.ZodLiteral<"privy">;
        connector_type: z.ZodLiteral<"embedded">;
        recovery_method: z.ZodEnum<["privy", "user-passcode", "google-drive", "icloud", "recovery-encryption-key", "privy-v2"]>;
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    } & {
        chain_type: z.ZodLiteral<"ethereum">;
    }, "strip", z.ZodTypeAny, {
        type: "wallet";
        id: string | null;
        address: string;
        chain_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "ethereum";
        wallet_client: "privy";
        wallet_client_type: "privy";
        connector_type: "embedded";
        imported: boolean;
        delegated: boolean;
        wallet_index: number;
        recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
    }, {
        type: "wallet";
        address: string;
        chain_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "ethereum";
        wallet_client: "privy";
        wallet_client_type: "privy";
        connector_type: "embedded";
        wallet_index: number;
        recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        id?: string | null | undefined;
        imported?: boolean | undefined;
        delegated?: boolean | undefined;
    }>, z.ZodObject<{
        id: z.ZodDefault<z.ZodNullable<z.ZodString>>;
        type: z.ZodLiteral<"wallet">;
        address: z.ZodString;
        imported: z.ZodDefault<z.ZodBoolean>;
        delegated: z.ZodDefault<z.ZodBoolean>;
        wallet_index: z.ZodNumber;
        chain_id: z.ZodString;
        wallet_client: z.ZodLiteral<"privy">;
        wallet_client_type: z.ZodLiteral<"privy">;
        connector_type: z.ZodLiteral<"embedded">;
        recovery_method: z.ZodEnum<["privy", "user-passcode", "google-drive", "icloud", "recovery-encryption-key", "privy-v2"]>;
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    } & {
        chain_type: z.ZodLiteral<"solana">;
        public_key: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "wallet";
        id: string | null;
        address: string;
        public_key: string;
        chain_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "solana";
        wallet_client: "privy";
        wallet_client_type: "privy";
        connector_type: "embedded";
        imported: boolean;
        delegated: boolean;
        wallet_index: number;
        recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
    }, {
        type: "wallet";
        address: string;
        public_key: string;
        chain_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "solana";
        wallet_client: "privy";
        wallet_client_type: "privy";
        connector_type: "embedded";
        wallet_index: number;
        recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        id?: string | null | undefined;
        imported?: boolean | undefined;
        delegated?: boolean | undefined;
    }>, z.ZodObject<{
        id: z.ZodDefault<z.ZodNullable<z.ZodString>>;
        type: z.ZodLiteral<"wallet">;
        address: z.ZodString;
        imported: z.ZodDefault<z.ZodBoolean>;
        delegated: z.ZodDefault<z.ZodBoolean>;
        wallet_index: z.ZodNumber;
        chain_id: z.ZodString;
        wallet_client: z.ZodLiteral<"privy">;
        wallet_client_type: z.ZodLiteral<"privy">;
        connector_type: z.ZodLiteral<"embedded">;
        recovery_method: z.ZodEnum<["privy", "user-passcode", "google-drive", "icloud", "recovery-encryption-key", "privy-v2"]>;
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    } & {
        chain_type: z.ZodLiteral<"bitcoin-segwit">;
        public_key: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "wallet";
        id: string | null;
        address: string;
        public_key: string;
        chain_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "bitcoin-segwit";
        wallet_client: "privy";
        wallet_client_type: "privy";
        connector_type: "embedded";
        imported: boolean;
        delegated: boolean;
        wallet_index: number;
        recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
    }, {
        type: "wallet";
        address: string;
        public_key: string;
        chain_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "bitcoin-segwit";
        wallet_client: "privy";
        wallet_client_type: "privy";
        connector_type: "embedded";
        wallet_index: number;
        recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        id?: string | null | undefined;
        imported?: boolean | undefined;
        delegated?: boolean | undefined;
    }>, z.ZodObject<{
        id: z.ZodDefault<z.ZodNullable<z.ZodString>>;
        type: z.ZodLiteral<"wallet">;
        address: z.ZodString;
        imported: z.ZodDefault<z.ZodBoolean>;
        delegated: z.ZodDefault<z.ZodBoolean>;
        wallet_index: z.ZodNumber;
        chain_id: z.ZodString;
        wallet_client: z.ZodLiteral<"privy">;
        wallet_client_type: z.ZodLiteral<"privy">;
        connector_type: z.ZodLiteral<"embedded">;
        recovery_method: z.ZodEnum<["privy", "user-passcode", "google-drive", "icloud", "recovery-encryption-key", "privy-v2"]>;
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    } & {
        chain_type: z.ZodLiteral<"bitcoin-taproot">;
        public_key: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "wallet";
        id: string | null;
        address: string;
        public_key: string;
        chain_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "bitcoin-taproot";
        wallet_client: "privy";
        wallet_client_type: "privy";
        connector_type: "embedded";
        imported: boolean;
        delegated: boolean;
        wallet_index: number;
        recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
    }, {
        type: "wallet";
        address: string;
        public_key: string;
        chain_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "bitcoin-taproot";
        wallet_client: "privy";
        wallet_client_type: "privy";
        connector_type: "embedded";
        wallet_index: number;
        recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        id?: string | null | undefined;
        imported?: boolean | undefined;
        delegated?: boolean | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"google_oauth">;
        subject: z.ZodString;
        email: z.ZodString;
        name: z.ZodNullable<z.ZodString>;
        /** @deprecated use `first_verified_at` instead. */
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "google_oauth";
        name: string | null;
        email: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    }, {
        type: "google_oauth";
        name: string | null;
        email: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"twitter_oauth">;
        subject: z.ZodString;
        username: z.ZodNullable<z.ZodString>;
        name: z.ZodNullable<z.ZodString>;
        profile_picture_url: z.ZodNullable<z.ZodString>;
        /** @deprecated use `first_verified_at` instead. */
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "twitter_oauth";
        name: string | null;
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        profile_picture_url: string | null;
        subject: string;
    }, {
        type: "twitter_oauth";
        name: string | null;
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        profile_picture_url: string | null;
        subject: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"discord_oauth">;
        subject: z.ZodString;
        username: z.ZodNullable<z.ZodString>;
        email: z.ZodNullable<z.ZodString>;
        /** @deprecated use `first_verified_at` instead. */
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "discord_oauth";
        email: string | null;
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    }, {
        type: "discord_oauth";
        email: string | null;
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"github_oauth">;
        subject: z.ZodString;
        username: z.ZodNullable<z.ZodString>;
        name: z.ZodNullable<z.ZodString>;
        email: z.ZodNullable<z.ZodString>;
        /** @deprecated use `first_verified_at` instead. */
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "github_oauth";
        name: string | null;
        email: string | null;
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    }, {
        type: "github_oauth";
        name: string | null;
        email: string | null;
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"spotify_oauth">;
        subject: z.ZodString;
        email: z.ZodNullable<z.ZodString>;
        name: z.ZodNullable<z.ZodString>;
        /** @deprecated use `first_verified_at` instead. */
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "spotify_oauth";
        name: string | null;
        email: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    }, {
        type: "spotify_oauth";
        name: string | null;
        email: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"instagram_oauth">;
        subject: z.ZodString;
        username: z.ZodNullable<z.ZodString>;
        /** @deprecated use `first_verified_at` instead. */
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "instagram_oauth";
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    }, {
        type: "instagram_oauth";
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"tiktok_oauth">;
        subject: z.ZodString;
        username: z.ZodNullable<z.ZodString>;
        name: z.ZodNullable<z.ZodString>;
        /** @deprecated use `first_verified_at` instead. */
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "tiktok_oauth";
        name: string | null;
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    }, {
        type: "tiktok_oauth";
        name: string | null;
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"linkedin_oauth">;
        subject: z.ZodString;
        name: z.ZodOptional<z.ZodString>;
        email: z.ZodNullable<z.ZodString>;
        vanity_name: z.ZodOptional<z.ZodString>;
        /** @deprecated use `first_verified_at` instead. */
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "linkedin_oauth";
        email: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
        name?: string | undefined;
        vanity_name?: string | undefined;
    }, {
        type: "linkedin_oauth";
        email: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
        name?: string | undefined;
        vanity_name?: string | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"apple_oauth">;
        subject: z.ZodString;
        email: z.ZodNullable<z.ZodString>;
        /** @deprecated use `first_verified_at` instead. */
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "apple_oauth";
        email: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    }, {
        type: "apple_oauth";
        email: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"custom_auth">;
        custom_user_id: z.ZodString;
        /** @deprecated use `first_verified_at` instead. */
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "custom_auth";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        custom_user_id: string;
    }, {
        type: "custom_auth";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        custom_user_id: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"farcaster">;
        fid: z.ZodNumber;
        owner_address: z.ZodEffects<z.ZodString, string, string>;
        username: z.ZodOptional<z.ZodString>;
        display_name: z.ZodOptional<z.ZodString>;
        bio: z.ZodOptional<z.ZodString>;
        profile_picture: z.ZodOptional<z.ZodString>;
        profile_picture_url: z.ZodOptional<z.ZodString>;
        homepage_url: z.ZodOptional<z.ZodString>;
        /** @deprecated use `first_verified_at` instead. */
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
        signer_public_key: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "farcaster";
        fid: number;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        owner_address: string;
        username?: string | undefined;
        display_name?: string | undefined;
        bio?: string | undefined;
        profile_picture?: string | undefined;
        profile_picture_url?: string | undefined;
        homepage_url?: string | undefined;
        signer_public_key?: string | undefined;
    }, {
        type: "farcaster";
        fid: number;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        owner_address: string;
        username?: string | undefined;
        display_name?: string | undefined;
        bio?: string | undefined;
        profile_picture?: string | undefined;
        profile_picture_url?: string | undefined;
        homepage_url?: string | undefined;
        signer_public_key?: string | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"passkey">;
        created_with_browser: z.ZodOptional<z.ZodString>;
        created_with_os: z.ZodOptional<z.ZodString>;
        created_with_device: z.ZodOptional<z.ZodString>;
        credential_id: z.ZodString;
        authenticator_name: z.ZodOptional<z.ZodString>;
        enrolled_in_mfa: z.ZodBoolean;
        /** @deprecated use `first_verified_at` instead. */
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "passkey";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        credential_id: string;
        enrolled_in_mfa: boolean;
        created_with_browser?: string | undefined;
        created_with_os?: string | undefined;
        created_with_device?: string | undefined;
        authenticator_name?: string | undefined;
    }, {
        type: "passkey";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        credential_id: string;
        enrolled_in_mfa: boolean;
        created_with_browser?: string | undefined;
        created_with_os?: string | undefined;
        created_with_device?: string | undefined;
        authenticator_name?: string | undefined;
    }>, z.ZodEffects<z.ZodObject<{
        type: z.ZodLiteral<"telegram">;
        telegram_user_id: z.ZodString;
        first_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        last_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        username: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        photo_url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        /** @deprecated use `first_verified_at` instead. */
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "telegram";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        telegram_user_id: string;
        username?: string | null | undefined;
        first_name?: string | null | undefined;
        last_name?: string | null | undefined;
        photo_url?: string | null | undefined;
    }, {
        type: "telegram";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        telegram_user_id: string;
        username?: string | null | undefined;
        first_name?: string | null | undefined;
        last_name?: string | null | undefined;
        photo_url?: string | null | undefined;
    }>, {
        telegramUserId: string;
        firstName: string | null | undefined;
        type: "telegram";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        telegram_user_id: string;
        username?: string | null | undefined;
        first_name?: string | null | undefined;
        last_name?: string | null | undefined;
        photo_url?: string | null | undefined;
    }, {
        type: "telegram";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        telegram_user_id: string;
        username?: string | null | undefined;
        first_name?: string | null | undefined;
        last_name?: string | null | undefined;
        photo_url?: string | null | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"cross_app">;
        subject: z.ZodString;
        provider_app_id: z.ZodString;
        embedded_wallets: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            address: string;
        }, {
            address: string;
        }>, "many">;
        smart_wallets: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            address: string;
        }, {
            address: string;
        }>, "many">;
        /** @deprecated use `first_verified_at` instead. */
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "cross_app";
        provider_app_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
        embedded_wallets: {
            address: string;
        }[];
        smart_wallets: {
            address: string;
        }[];
    }, {
        type: "cross_app";
        provider_app_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
        embedded_wallets: {
            address: string;
        }[];
        smart_wallets: {
            address: string;
        }[];
    }>, z.ZodObject<{
        type: z.ZodLiteral<"authorization_key">;
        public_key: z.ZodString;
        /** @deprecated use `first_verified_at` instead. */
        verified_at: z.ZodNumber;
        first_verified_at: z.ZodNullable<z.ZodNumber>;
        latest_verified_at: z.ZodNullable<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "authorization_key";
        public_key: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
    }, {
        type: "authorization_key";
        public_key: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
    }>]>, "many">;
    mfa_methods: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"sms">;
        verified_at: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: "sms";
        verified_at: number;
    }, {
        type: "sms";
        verified_at: number;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"totp">;
        verified_at: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: "totp";
        verified_at: number;
    }, {
        type: "totp";
        verified_at: number;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"passkey">;
        verified_at: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: "passkey";
        verified_at: number;
    }, {
        type: "passkey";
        verified_at: number;
    }>]>, "many">;
    created_at: z.ZodNumber;
    has_accepted_terms: z.ZodBoolean;
    is_guest: z.ZodBoolean;
    custom_metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    mfa_methods: ({
        type: "sms";
        verified_at: number;
    } | {
        type: "totp";
        verified_at: number;
    } | {
        type: "passkey";
        verified_at: number;
    })[];
    linked_accounts: ({
        type: "email";
        address: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
    } | {
        type: "phone";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        phoneNumber: string;
        number?: string | undefined;
    } | {
        type: "wallet";
        address: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "ethereum";
        wallet_client: "unknown";
        chain_id?: string | undefined;
        wallet_client_type?: string | undefined;
        connector_type?: string | undefined;
    } | {
        type: "smart_wallet";
        address: string;
        smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
    } | {
        type: "wallet";
        address: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "solana";
        wallet_client: "unknown";
        wallet_client_type?: string | undefined;
        connector_type?: string | undefined;
    } | {
        type: "farcaster";
        fid: number;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        owner_address: string;
        username?: string | undefined;
        display_name?: string | undefined;
        bio?: string | undefined;
        profile_picture?: string | undefined;
        profile_picture_url?: string | undefined;
        homepage_url?: string | undefined;
        signer_public_key?: string | undefined;
    } | {
        type: "passkey";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        credential_id: string;
        enrolled_in_mfa: boolean;
        created_with_browser?: string | undefined;
        created_with_os?: string | undefined;
        created_with_device?: string | undefined;
        authenticator_name?: string | undefined;
    } | {
        telegramUserId: string;
        firstName: string | null | undefined;
        type: "telegram";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        telegram_user_id: string;
        username?: string | null | undefined;
        first_name?: string | null | undefined;
        last_name?: string | null | undefined;
        photo_url?: string | null | undefined;
    } | {
        type: "wallet";
        id: string | null;
        address: string;
        chain_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "ethereum";
        wallet_client: "privy";
        wallet_client_type: "privy";
        connector_type: "embedded";
        imported: boolean;
        delegated: boolean;
        wallet_index: number;
        recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
    } | {
        type: "wallet";
        id: string | null;
        address: string;
        public_key: string;
        chain_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "solana";
        wallet_client: "privy";
        wallet_client_type: "privy";
        connector_type: "embedded";
        imported: boolean;
        delegated: boolean;
        wallet_index: number;
        recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
    } | {
        type: "wallet";
        id: string | null;
        address: string;
        public_key: string;
        chain_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "bitcoin-segwit";
        wallet_client: "privy";
        wallet_client_type: "privy";
        connector_type: "embedded";
        imported: boolean;
        delegated: boolean;
        wallet_index: number;
        recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
    } | {
        type: "wallet";
        id: string | null;
        address: string;
        public_key: string;
        chain_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "bitcoin-taproot";
        wallet_client: "privy";
        wallet_client_type: "privy";
        connector_type: "embedded";
        imported: boolean;
        delegated: boolean;
        wallet_index: number;
        recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
    } | {
        type: "google_oauth";
        name: string | null;
        email: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    } | {
        type: "twitter_oauth";
        name: string | null;
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        profile_picture_url: string | null;
        subject: string;
    } | {
        type: "discord_oauth";
        email: string | null;
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    } | {
        type: "github_oauth";
        name: string | null;
        email: string | null;
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    } | {
        type: "linkedin_oauth";
        email: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
        name?: string | undefined;
        vanity_name?: string | undefined;
    } | {
        type: "spotify_oauth";
        name: string | null;
        email: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    } | {
        type: "instagram_oauth";
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    } | {
        type: "tiktok_oauth";
        name: string | null;
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    } | {
        type: "apple_oauth";
        email: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    } | {
        type: "custom_auth";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        custom_user_id: string;
    } | {
        type: "cross_app";
        provider_app_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
        embedded_wallets: {
            address: string;
        }[];
        smart_wallets: {
            address: string;
        }[];
    } | {
        type: "authorization_key";
        public_key: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
    })[];
    created_at: number;
    has_accepted_terms: boolean;
    is_guest: boolean;
    custom_metadata?: Record<string, string | number | boolean> | undefined;
}, {
    id: string;
    mfa_methods: ({
        type: "sms";
        verified_at: number;
    } | {
        type: "totp";
        verified_at: number;
    } | {
        type: "passkey";
        verified_at: number;
    })[];
    linked_accounts: ({
        type: "email";
        address: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
    } | {
        type: "phone";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        phoneNumber: string;
        number?: string | undefined;
    } | {
        type: "wallet";
        address: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "ethereum";
        wallet_client: "unknown";
        chain_id?: string | undefined;
        wallet_client_type?: string | undefined;
        connector_type?: string | undefined;
    } | {
        type: "smart_wallet";
        address: string;
        smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
    } | {
        type: "wallet";
        address: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "solana";
        wallet_client: "unknown";
        wallet_client_type?: string | undefined;
        connector_type?: string | undefined;
    } | {
        type: "farcaster";
        fid: number;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        owner_address: string;
        username?: string | undefined;
        display_name?: string | undefined;
        bio?: string | undefined;
        profile_picture?: string | undefined;
        profile_picture_url?: string | undefined;
        homepage_url?: string | undefined;
        signer_public_key?: string | undefined;
    } | {
        type: "passkey";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        credential_id: string;
        enrolled_in_mfa: boolean;
        created_with_browser?: string | undefined;
        created_with_os?: string | undefined;
        created_with_device?: string | undefined;
        authenticator_name?: string | undefined;
    } | {
        type: "telegram";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        telegram_user_id: string;
        username?: string | null | undefined;
        first_name?: string | null | undefined;
        last_name?: string | null | undefined;
        photo_url?: string | null | undefined;
    } | {
        type: "wallet";
        address: string;
        chain_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "ethereum";
        wallet_client: "privy";
        wallet_client_type: "privy";
        connector_type: "embedded";
        wallet_index: number;
        recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        id?: string | null | undefined;
        imported?: boolean | undefined;
        delegated?: boolean | undefined;
    } | {
        type: "wallet";
        address: string;
        public_key: string;
        chain_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "solana";
        wallet_client: "privy";
        wallet_client_type: "privy";
        connector_type: "embedded";
        wallet_index: number;
        recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        id?: string | null | undefined;
        imported?: boolean | undefined;
        delegated?: boolean | undefined;
    } | {
        type: "wallet";
        address: string;
        public_key: string;
        chain_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "bitcoin-segwit";
        wallet_client: "privy";
        wallet_client_type: "privy";
        connector_type: "embedded";
        wallet_index: number;
        recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        id?: string | null | undefined;
        imported?: boolean | undefined;
        delegated?: boolean | undefined;
    } | {
        type: "wallet";
        address: string;
        public_key: string;
        chain_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        chain_type: "bitcoin-taproot";
        wallet_client: "privy";
        wallet_client_type: "privy";
        connector_type: "embedded";
        wallet_index: number;
        recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        id?: string | null | undefined;
        imported?: boolean | undefined;
        delegated?: boolean | undefined;
    } | {
        type: "google_oauth";
        name: string | null;
        email: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    } | {
        type: "twitter_oauth";
        name: string | null;
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        profile_picture_url: string | null;
        subject: string;
    } | {
        type: "discord_oauth";
        email: string | null;
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    } | {
        type: "github_oauth";
        name: string | null;
        email: string | null;
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    } | {
        type: "linkedin_oauth";
        email: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
        name?: string | undefined;
        vanity_name?: string | undefined;
    } | {
        type: "spotify_oauth";
        name: string | null;
        email: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    } | {
        type: "instagram_oauth";
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    } | {
        type: "tiktok_oauth";
        name: string | null;
        username: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    } | {
        type: "apple_oauth";
        email: string | null;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
    } | {
        type: "custom_auth";
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        custom_user_id: string;
    } | {
        type: "cross_app";
        provider_app_id: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
        subject: string;
        embedded_wallets: {
            address: string;
        }[];
        smart_wallets: {
            address: string;
        }[];
    } | {
        type: "authorization_key";
        public_key: string;
        verified_at: number;
        first_verified_at: number | null;
        latest_verified_at: number | null;
    })[];
    created_at: number;
    has_accepted_terms: boolean;
    is_guest: boolean;
    custom_metadata?: Record<string, string | number | boolean> | undefined;
}>;
declare const SessionUpdateActionEnum: z.ZodEnum<["set", "ignore", "clear"]>;
type SessionUpdateAction = z.infer<typeof SessionUpdateActionEnum>;
declare const UserWithIdentityToken: z.ZodObject<{
    user: z.ZodObject<{
        id: z.ZodString;
        linked_accounts: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"email">;
            address: z.ZodString;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "email";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        }, {
            type: "email";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"phone">;
            number: z.ZodOptional<z.ZodString>;
            phoneNumber: z.ZodString;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "phone";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            phoneNumber: string;
            number?: string | undefined;
        }, {
            type: "phone";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            phoneNumber: string;
            number?: string | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"wallet">;
            address: z.ZodString;
            /**
             * @deprecated Will be removed in a future release
             */
            chain_id: z.ZodOptional<z.ZodString>;
            chain_type: z.ZodLiteral<"ethereum">;
            /**
             * @deprecated Use `wallet_client_type` instead.
             */
            wallet_client: z.ZodLiteral<"unknown">;
            wallet_client_type: z.ZodOptional<z.ZodString>;
            connector_type: z.ZodOptional<z.ZodString>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "wallet";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "ethereum";
            wallet_client: "unknown";
            chain_id?: string | undefined;
            wallet_client_type?: string | undefined;
            connector_type?: string | undefined;
        }, {
            type: "wallet";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "ethereum";
            wallet_client: "unknown";
            chain_id?: string | undefined;
            wallet_client_type?: string | undefined;
            connector_type?: string | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"wallet">;
            address: z.ZodString;
            chain_type: z.ZodLiteral<"solana">;
            /**
             * @deprecated Use `wallet_client_type` instead.
             */
            wallet_client: z.ZodLiteral<"unknown">;
            wallet_client_type: z.ZodOptional<z.ZodString>;
            connector_type: z.ZodOptional<z.ZodString>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "wallet";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "solana";
            wallet_client: "unknown";
            wallet_client_type?: string | undefined;
            connector_type?: string | undefined;
        }, {
            type: "wallet";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "solana";
            wallet_client: "unknown";
            wallet_client_type?: string | undefined;
            connector_type?: string | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"smart_wallet">;
            address: z.ZodString;
            smart_wallet_type: z.ZodEnum<["safe", "kernel", "biconomy", "light_account", "coinbase_smart_wallet", "thirdweb"]>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "smart_wallet";
            address: string;
            smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        }, {
            type: "smart_wallet";
            address: string;
            smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        }>, z.ZodObject<{
            id: z.ZodDefault<z.ZodNullable<z.ZodString>>;
            type: z.ZodLiteral<"wallet">;
            address: z.ZodString;
            imported: z.ZodDefault<z.ZodBoolean>;
            delegated: z.ZodDefault<z.ZodBoolean>;
            wallet_index: z.ZodNumber;
            chain_id: z.ZodString;
            wallet_client: z.ZodLiteral<"privy">;
            wallet_client_type: z.ZodLiteral<"privy">;
            connector_type: z.ZodLiteral<"embedded">;
            recovery_method: z.ZodEnum<["privy", "user-passcode", "google-drive", "icloud", "recovery-encryption-key", "privy-v2"]>;
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        } & {
            chain_type: z.ZodLiteral<"ethereum">;
        }, "strip", z.ZodTypeAny, {
            type: "wallet";
            id: string | null;
            address: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "ethereum";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            imported: boolean;
            delegated: boolean;
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        }, {
            type: "wallet";
            address: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "ethereum";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
            id?: string | null | undefined;
            imported?: boolean | undefined;
            delegated?: boolean | undefined;
        }>, z.ZodObject<{
            id: z.ZodDefault<z.ZodNullable<z.ZodString>>;
            type: z.ZodLiteral<"wallet">;
            address: z.ZodString;
            imported: z.ZodDefault<z.ZodBoolean>;
            delegated: z.ZodDefault<z.ZodBoolean>;
            wallet_index: z.ZodNumber;
            chain_id: z.ZodString;
            wallet_client: z.ZodLiteral<"privy">;
            wallet_client_type: z.ZodLiteral<"privy">;
            connector_type: z.ZodLiteral<"embedded">;
            recovery_method: z.ZodEnum<["privy", "user-passcode", "google-drive", "icloud", "recovery-encryption-key", "privy-v2"]>;
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        } & {
            chain_type: z.ZodLiteral<"solana">;
            public_key: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "wallet";
            id: string | null;
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "solana";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            imported: boolean;
            delegated: boolean;
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        }, {
            type: "wallet";
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "solana";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
            id?: string | null | undefined;
            imported?: boolean | undefined;
            delegated?: boolean | undefined;
        }>, z.ZodObject<{
            id: z.ZodDefault<z.ZodNullable<z.ZodString>>;
            type: z.ZodLiteral<"wallet">;
            address: z.ZodString;
            imported: z.ZodDefault<z.ZodBoolean>;
            delegated: z.ZodDefault<z.ZodBoolean>;
            wallet_index: z.ZodNumber;
            chain_id: z.ZodString;
            wallet_client: z.ZodLiteral<"privy">;
            wallet_client_type: z.ZodLiteral<"privy">;
            connector_type: z.ZodLiteral<"embedded">;
            recovery_method: z.ZodEnum<["privy", "user-passcode", "google-drive", "icloud", "recovery-encryption-key", "privy-v2"]>;
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        } & {
            chain_type: z.ZodLiteral<"bitcoin-segwit">;
            public_key: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "wallet";
            id: string | null;
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "bitcoin-segwit";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            imported: boolean;
            delegated: boolean;
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        }, {
            type: "wallet";
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "bitcoin-segwit";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
            id?: string | null | undefined;
            imported?: boolean | undefined;
            delegated?: boolean | undefined;
        }>, z.ZodObject<{
            id: z.ZodDefault<z.ZodNullable<z.ZodString>>;
            type: z.ZodLiteral<"wallet">;
            address: z.ZodString;
            imported: z.ZodDefault<z.ZodBoolean>;
            delegated: z.ZodDefault<z.ZodBoolean>;
            wallet_index: z.ZodNumber;
            chain_id: z.ZodString;
            wallet_client: z.ZodLiteral<"privy">;
            wallet_client_type: z.ZodLiteral<"privy">;
            connector_type: z.ZodLiteral<"embedded">;
            recovery_method: z.ZodEnum<["privy", "user-passcode", "google-drive", "icloud", "recovery-encryption-key", "privy-v2"]>;
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        } & {
            chain_type: z.ZodLiteral<"bitcoin-taproot">;
            public_key: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "wallet";
            id: string | null;
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "bitcoin-taproot";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            imported: boolean;
            delegated: boolean;
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        }, {
            type: "wallet";
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "bitcoin-taproot";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
            id?: string | null | undefined;
            imported?: boolean | undefined;
            delegated?: boolean | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"google_oauth">;
            subject: z.ZodString;
            email: z.ZodString;
            name: z.ZodNullable<z.ZodString>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "google_oauth";
            name: string | null;
            email: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }, {
            type: "google_oauth";
            name: string | null;
            email: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"twitter_oauth">;
            subject: z.ZodString;
            username: z.ZodNullable<z.ZodString>;
            name: z.ZodNullable<z.ZodString>;
            profile_picture_url: z.ZodNullable<z.ZodString>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "twitter_oauth";
            name: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            profile_picture_url: string | null;
            subject: string;
        }, {
            type: "twitter_oauth";
            name: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            profile_picture_url: string | null;
            subject: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"discord_oauth">;
            subject: z.ZodString;
            username: z.ZodNullable<z.ZodString>;
            email: z.ZodNullable<z.ZodString>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "discord_oauth";
            email: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }, {
            type: "discord_oauth";
            email: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"github_oauth">;
            subject: z.ZodString;
            username: z.ZodNullable<z.ZodString>;
            name: z.ZodNullable<z.ZodString>;
            email: z.ZodNullable<z.ZodString>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "github_oauth";
            name: string | null;
            email: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }, {
            type: "github_oauth";
            name: string | null;
            email: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"spotify_oauth">;
            subject: z.ZodString;
            email: z.ZodNullable<z.ZodString>;
            name: z.ZodNullable<z.ZodString>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "spotify_oauth";
            name: string | null;
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }, {
            type: "spotify_oauth";
            name: string | null;
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"instagram_oauth">;
            subject: z.ZodString;
            username: z.ZodNullable<z.ZodString>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "instagram_oauth";
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }, {
            type: "instagram_oauth";
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"tiktok_oauth">;
            subject: z.ZodString;
            username: z.ZodNullable<z.ZodString>;
            name: z.ZodNullable<z.ZodString>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "tiktok_oauth";
            name: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }, {
            type: "tiktok_oauth";
            name: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"linkedin_oauth">;
            subject: z.ZodString;
            name: z.ZodOptional<z.ZodString>;
            email: z.ZodNullable<z.ZodString>;
            vanity_name: z.ZodOptional<z.ZodString>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "linkedin_oauth";
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
            name?: string | undefined;
            vanity_name?: string | undefined;
        }, {
            type: "linkedin_oauth";
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
            name?: string | undefined;
            vanity_name?: string | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"apple_oauth">;
            subject: z.ZodString;
            email: z.ZodNullable<z.ZodString>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "apple_oauth";
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }, {
            type: "apple_oauth";
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"custom_auth">;
            custom_user_id: z.ZodString;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "custom_auth";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            custom_user_id: string;
        }, {
            type: "custom_auth";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            custom_user_id: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"farcaster">;
            fid: z.ZodNumber;
            owner_address: z.ZodEffects<z.ZodString, string, string>;
            username: z.ZodOptional<z.ZodString>;
            display_name: z.ZodOptional<z.ZodString>;
            bio: z.ZodOptional<z.ZodString>;
            profile_picture: z.ZodOptional<z.ZodString>;
            profile_picture_url: z.ZodOptional<z.ZodString>;
            homepage_url: z.ZodOptional<z.ZodString>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
            signer_public_key: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "farcaster";
            fid: number;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            owner_address: string;
            username?: string | undefined;
            display_name?: string | undefined;
            bio?: string | undefined;
            profile_picture?: string | undefined;
            profile_picture_url?: string | undefined;
            homepage_url?: string | undefined;
            signer_public_key?: string | undefined;
        }, {
            type: "farcaster";
            fid: number;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            owner_address: string;
            username?: string | undefined;
            display_name?: string | undefined;
            bio?: string | undefined;
            profile_picture?: string | undefined;
            profile_picture_url?: string | undefined;
            homepage_url?: string | undefined;
            signer_public_key?: string | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"passkey">;
            created_with_browser: z.ZodOptional<z.ZodString>;
            created_with_os: z.ZodOptional<z.ZodString>;
            created_with_device: z.ZodOptional<z.ZodString>;
            credential_id: z.ZodString;
            authenticator_name: z.ZodOptional<z.ZodString>;
            enrolled_in_mfa: z.ZodBoolean;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "passkey";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            credential_id: string;
            enrolled_in_mfa: boolean;
            created_with_browser?: string | undefined;
            created_with_os?: string | undefined;
            created_with_device?: string | undefined;
            authenticator_name?: string | undefined;
        }, {
            type: "passkey";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            credential_id: string;
            enrolled_in_mfa: boolean;
            created_with_browser?: string | undefined;
            created_with_os?: string | undefined;
            created_with_device?: string | undefined;
            authenticator_name?: string | undefined;
        }>, z.ZodEffects<z.ZodObject<{
            type: z.ZodLiteral<"telegram">;
            telegram_user_id: z.ZodString;
            first_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            last_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            username: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            photo_url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "telegram";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            telegram_user_id: string;
            username?: string | null | undefined;
            first_name?: string | null | undefined;
            last_name?: string | null | undefined;
            photo_url?: string | null | undefined;
        }, {
            type: "telegram";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            telegram_user_id: string;
            username?: string | null | undefined;
            first_name?: string | null | undefined;
            last_name?: string | null | undefined;
            photo_url?: string | null | undefined;
        }>, {
            telegramUserId: string;
            firstName: string | null | undefined;
            type: "telegram";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            telegram_user_id: string;
            username?: string | null | undefined;
            first_name?: string | null | undefined;
            last_name?: string | null | undefined;
            photo_url?: string | null | undefined;
        }, {
            type: "telegram";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            telegram_user_id: string;
            username?: string | null | undefined;
            first_name?: string | null | undefined;
            last_name?: string | null | undefined;
            photo_url?: string | null | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"cross_app">;
            subject: z.ZodString;
            provider_app_id: z.ZodString;
            embedded_wallets: z.ZodArray<z.ZodObject<{
                address: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                address: string;
            }, {
                address: string;
            }>, "many">;
            smart_wallets: z.ZodArray<z.ZodObject<{
                address: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                address: string;
            }, {
                address: string;
            }>, "many">;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "cross_app";
            provider_app_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
            embedded_wallets: {
                address: string;
            }[];
            smart_wallets: {
                address: string;
            }[];
        }, {
            type: "cross_app";
            provider_app_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
            embedded_wallets: {
                address: string;
            }[];
            smart_wallets: {
                address: string;
            }[];
        }>, z.ZodObject<{
            type: z.ZodLiteral<"authorization_key">;
            public_key: z.ZodString;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "authorization_key";
            public_key: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        }, {
            type: "authorization_key";
            public_key: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        }>]>, "many">;
        mfa_methods: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"sms">;
            verified_at: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "sms";
            verified_at: number;
        }, {
            type: "sms";
            verified_at: number;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"totp">;
            verified_at: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "totp";
            verified_at: number;
        }, {
            type: "totp";
            verified_at: number;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"passkey">;
            verified_at: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "passkey";
            verified_at: number;
        }, {
            type: "passkey";
            verified_at: number;
        }>]>, "many">;
        created_at: z.ZodNumber;
        has_accepted_terms: z.ZodBoolean;
        is_guest: z.ZodBoolean;
        custom_metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        mfa_methods: ({
            type: "sms";
            verified_at: number;
        } | {
            type: "totp";
            verified_at: number;
        } | {
            type: "passkey";
            verified_at: number;
        })[];
        linked_accounts: ({
            type: "email";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        } | {
            type: "phone";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            phoneNumber: string;
            number?: string | undefined;
        } | {
            type: "wallet";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "ethereum";
            wallet_client: "unknown";
            chain_id?: string | undefined;
            wallet_client_type?: string | undefined;
            connector_type?: string | undefined;
        } | {
            type: "smart_wallet";
            address: string;
            smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        } | {
            type: "wallet";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "solana";
            wallet_client: "unknown";
            wallet_client_type?: string | undefined;
            connector_type?: string | undefined;
        } | {
            type: "farcaster";
            fid: number;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            owner_address: string;
            username?: string | undefined;
            display_name?: string | undefined;
            bio?: string | undefined;
            profile_picture?: string | undefined;
            profile_picture_url?: string | undefined;
            homepage_url?: string | undefined;
            signer_public_key?: string | undefined;
        } | {
            type: "passkey";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            credential_id: string;
            enrolled_in_mfa: boolean;
            created_with_browser?: string | undefined;
            created_with_os?: string | undefined;
            created_with_device?: string | undefined;
            authenticator_name?: string | undefined;
        } | {
            telegramUserId: string;
            firstName: string | null | undefined;
            type: "telegram";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            telegram_user_id: string;
            username?: string | null | undefined;
            first_name?: string | null | undefined;
            last_name?: string | null | undefined;
            photo_url?: string | null | undefined;
        } | {
            type: "wallet";
            id: string | null;
            address: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "ethereum";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            imported: boolean;
            delegated: boolean;
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        } | {
            type: "wallet";
            id: string | null;
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "solana";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            imported: boolean;
            delegated: boolean;
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        } | {
            type: "wallet";
            id: string | null;
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "bitcoin-segwit";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            imported: boolean;
            delegated: boolean;
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        } | {
            type: "wallet";
            id: string | null;
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "bitcoin-taproot";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            imported: boolean;
            delegated: boolean;
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        } | {
            type: "google_oauth";
            name: string | null;
            email: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "twitter_oauth";
            name: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            profile_picture_url: string | null;
            subject: string;
        } | {
            type: "discord_oauth";
            email: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "github_oauth";
            name: string | null;
            email: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "linkedin_oauth";
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
            name?: string | undefined;
            vanity_name?: string | undefined;
        } | {
            type: "spotify_oauth";
            name: string | null;
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "instagram_oauth";
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "tiktok_oauth";
            name: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "apple_oauth";
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "custom_auth";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            custom_user_id: string;
        } | {
            type: "cross_app";
            provider_app_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
            embedded_wallets: {
                address: string;
            }[];
            smart_wallets: {
                address: string;
            }[];
        } | {
            type: "authorization_key";
            public_key: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        })[];
        created_at: number;
        has_accepted_terms: boolean;
        is_guest: boolean;
        custom_metadata?: Record<string, string | number | boolean> | undefined;
    }, {
        id: string;
        mfa_methods: ({
            type: "sms";
            verified_at: number;
        } | {
            type: "totp";
            verified_at: number;
        } | {
            type: "passkey";
            verified_at: number;
        })[];
        linked_accounts: ({
            type: "email";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        } | {
            type: "phone";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            phoneNumber: string;
            number?: string | undefined;
        } | {
            type: "wallet";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "ethereum";
            wallet_client: "unknown";
            chain_id?: string | undefined;
            wallet_client_type?: string | undefined;
            connector_type?: string | undefined;
        } | {
            type: "smart_wallet";
            address: string;
            smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        } | {
            type: "wallet";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "solana";
            wallet_client: "unknown";
            wallet_client_type?: string | undefined;
            connector_type?: string | undefined;
        } | {
            type: "farcaster";
            fid: number;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            owner_address: string;
            username?: string | undefined;
            display_name?: string | undefined;
            bio?: string | undefined;
            profile_picture?: string | undefined;
            profile_picture_url?: string | undefined;
            homepage_url?: string | undefined;
            signer_public_key?: string | undefined;
        } | {
            type: "passkey";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            credential_id: string;
            enrolled_in_mfa: boolean;
            created_with_browser?: string | undefined;
            created_with_os?: string | undefined;
            created_with_device?: string | undefined;
            authenticator_name?: string | undefined;
        } | {
            type: "telegram";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            telegram_user_id: string;
            username?: string | null | undefined;
            first_name?: string | null | undefined;
            last_name?: string | null | undefined;
            photo_url?: string | null | undefined;
        } | {
            type: "wallet";
            address: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "ethereum";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
            id?: string | null | undefined;
            imported?: boolean | undefined;
            delegated?: boolean | undefined;
        } | {
            type: "wallet";
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "solana";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
            id?: string | null | undefined;
            imported?: boolean | undefined;
            delegated?: boolean | undefined;
        } | {
            type: "wallet";
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "bitcoin-segwit";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
            id?: string | null | undefined;
            imported?: boolean | undefined;
            delegated?: boolean | undefined;
        } | {
            type: "wallet";
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "bitcoin-taproot";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
            id?: string | null | undefined;
            imported?: boolean | undefined;
            delegated?: boolean | undefined;
        } | {
            type: "google_oauth";
            name: string | null;
            email: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "twitter_oauth";
            name: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            profile_picture_url: string | null;
            subject: string;
        } | {
            type: "discord_oauth";
            email: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "github_oauth";
            name: string | null;
            email: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "linkedin_oauth";
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
            name?: string | undefined;
            vanity_name?: string | undefined;
        } | {
            type: "spotify_oauth";
            name: string | null;
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "instagram_oauth";
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "tiktok_oauth";
            name: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "apple_oauth";
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "custom_auth";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            custom_user_id: string;
        } | {
            type: "cross_app";
            provider_app_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
            embedded_wallets: {
                address: string;
            }[];
            smart_wallets: {
                address: string;
            }[];
        } | {
            type: "authorization_key";
            public_key: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        })[];
        created_at: number;
        has_accepted_terms: boolean;
        is_guest: boolean;
        custom_metadata?: Record<string, string | number | boolean> | undefined;
    }>;
    identity_token: z.ZodNullable<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    user: {
        id: string;
        mfa_methods: ({
            type: "sms";
            verified_at: number;
        } | {
            type: "totp";
            verified_at: number;
        } | {
            type: "passkey";
            verified_at: number;
        })[];
        linked_accounts: ({
            type: "email";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        } | {
            type: "phone";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            phoneNumber: string;
            number?: string | undefined;
        } | {
            type: "wallet";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "ethereum";
            wallet_client: "unknown";
            chain_id?: string | undefined;
            wallet_client_type?: string | undefined;
            connector_type?: string | undefined;
        } | {
            type: "smart_wallet";
            address: string;
            smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        } | {
            type: "wallet";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "solana";
            wallet_client: "unknown";
            wallet_client_type?: string | undefined;
            connector_type?: string | undefined;
        } | {
            type: "farcaster";
            fid: number;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            owner_address: string;
            username?: string | undefined;
            display_name?: string | undefined;
            bio?: string | undefined;
            profile_picture?: string | undefined;
            profile_picture_url?: string | undefined;
            homepage_url?: string | undefined;
            signer_public_key?: string | undefined;
        } | {
            type: "passkey";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            credential_id: string;
            enrolled_in_mfa: boolean;
            created_with_browser?: string | undefined;
            created_with_os?: string | undefined;
            created_with_device?: string | undefined;
            authenticator_name?: string | undefined;
        } | {
            telegramUserId: string;
            firstName: string | null | undefined;
            type: "telegram";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            telegram_user_id: string;
            username?: string | null | undefined;
            first_name?: string | null | undefined;
            last_name?: string | null | undefined;
            photo_url?: string | null | undefined;
        } | {
            type: "wallet";
            id: string | null;
            address: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "ethereum";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            imported: boolean;
            delegated: boolean;
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        } | {
            type: "wallet";
            id: string | null;
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "solana";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            imported: boolean;
            delegated: boolean;
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        } | {
            type: "wallet";
            id: string | null;
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "bitcoin-segwit";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            imported: boolean;
            delegated: boolean;
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        } | {
            type: "wallet";
            id: string | null;
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "bitcoin-taproot";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            imported: boolean;
            delegated: boolean;
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        } | {
            type: "google_oauth";
            name: string | null;
            email: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "twitter_oauth";
            name: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            profile_picture_url: string | null;
            subject: string;
        } | {
            type: "discord_oauth";
            email: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "github_oauth";
            name: string | null;
            email: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "linkedin_oauth";
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
            name?: string | undefined;
            vanity_name?: string | undefined;
        } | {
            type: "spotify_oauth";
            name: string | null;
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "instagram_oauth";
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "tiktok_oauth";
            name: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "apple_oauth";
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "custom_auth";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            custom_user_id: string;
        } | {
            type: "cross_app";
            provider_app_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
            embedded_wallets: {
                address: string;
            }[];
            smart_wallets: {
                address: string;
            }[];
        } | {
            type: "authorization_key";
            public_key: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        })[];
        created_at: number;
        has_accepted_terms: boolean;
        is_guest: boolean;
        custom_metadata?: Record<string, string | number | boolean> | undefined;
    };
    identity_token: string | null;
}, {
    user: {
        id: string;
        mfa_methods: ({
            type: "sms";
            verified_at: number;
        } | {
            type: "totp";
            verified_at: number;
        } | {
            type: "passkey";
            verified_at: number;
        })[];
        linked_accounts: ({
            type: "email";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        } | {
            type: "phone";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            phoneNumber: string;
            number?: string | undefined;
        } | {
            type: "wallet";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "ethereum";
            wallet_client: "unknown";
            chain_id?: string | undefined;
            wallet_client_type?: string | undefined;
            connector_type?: string | undefined;
        } | {
            type: "smart_wallet";
            address: string;
            smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        } | {
            type: "wallet";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "solana";
            wallet_client: "unknown";
            wallet_client_type?: string | undefined;
            connector_type?: string | undefined;
        } | {
            type: "farcaster";
            fid: number;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            owner_address: string;
            username?: string | undefined;
            display_name?: string | undefined;
            bio?: string | undefined;
            profile_picture?: string | undefined;
            profile_picture_url?: string | undefined;
            homepage_url?: string | undefined;
            signer_public_key?: string | undefined;
        } | {
            type: "passkey";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            credential_id: string;
            enrolled_in_mfa: boolean;
            created_with_browser?: string | undefined;
            created_with_os?: string | undefined;
            created_with_device?: string | undefined;
            authenticator_name?: string | undefined;
        } | {
            type: "telegram";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            telegram_user_id: string;
            username?: string | null | undefined;
            first_name?: string | null | undefined;
            last_name?: string | null | undefined;
            photo_url?: string | null | undefined;
        } | {
            type: "wallet";
            address: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "ethereum";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
            id?: string | null | undefined;
            imported?: boolean | undefined;
            delegated?: boolean | undefined;
        } | {
            type: "wallet";
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "solana";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
            id?: string | null | undefined;
            imported?: boolean | undefined;
            delegated?: boolean | undefined;
        } | {
            type: "wallet";
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "bitcoin-segwit";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
            id?: string | null | undefined;
            imported?: boolean | undefined;
            delegated?: boolean | undefined;
        } | {
            type: "wallet";
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "bitcoin-taproot";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
            id?: string | null | undefined;
            imported?: boolean | undefined;
            delegated?: boolean | undefined;
        } | {
            type: "google_oauth";
            name: string | null;
            email: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "twitter_oauth";
            name: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            profile_picture_url: string | null;
            subject: string;
        } | {
            type: "discord_oauth";
            email: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "github_oauth";
            name: string | null;
            email: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "linkedin_oauth";
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
            name?: string | undefined;
            vanity_name?: string | undefined;
        } | {
            type: "spotify_oauth";
            name: string | null;
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "instagram_oauth";
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "tiktok_oauth";
            name: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "apple_oauth";
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "custom_auth";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            custom_user_id: string;
        } | {
            type: "cross_app";
            provider_app_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
            embedded_wallets: {
                address: string;
            }[];
            smart_wallets: {
                address: string;
            }[];
        } | {
            type: "authorization_key";
            public_key: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        })[];
        created_at: number;
        has_accepted_terms: boolean;
        is_guest: boolean;
        custom_metadata?: Record<string, string | number | boolean> | undefined;
    };
    identity_token: string | null;
}>;
declare const AuthenticatedUser: z.ZodObject<{
    user: z.ZodObject<{
        id: z.ZodString;
        linked_accounts: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"email">;
            address: z.ZodString;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "email";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        }, {
            type: "email";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"phone">;
            number: z.ZodOptional<z.ZodString>;
            phoneNumber: z.ZodString;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "phone";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            phoneNumber: string;
            number?: string | undefined;
        }, {
            type: "phone";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            phoneNumber: string;
            number?: string | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"wallet">;
            address: z.ZodString;
            /**
             * @deprecated Will be removed in a future release
             */
            chain_id: z.ZodOptional<z.ZodString>;
            chain_type: z.ZodLiteral<"ethereum">;
            /**
             * @deprecated Use `wallet_client_type` instead.
             */
            wallet_client: z.ZodLiteral<"unknown">;
            wallet_client_type: z.ZodOptional<z.ZodString>;
            connector_type: z.ZodOptional<z.ZodString>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "wallet";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "ethereum";
            wallet_client: "unknown";
            chain_id?: string | undefined;
            wallet_client_type?: string | undefined;
            connector_type?: string | undefined;
        }, {
            type: "wallet";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "ethereum";
            wallet_client: "unknown";
            chain_id?: string | undefined;
            wallet_client_type?: string | undefined;
            connector_type?: string | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"wallet">;
            address: z.ZodString;
            chain_type: z.ZodLiteral<"solana">;
            /**
             * @deprecated Use `wallet_client_type` instead.
             */
            wallet_client: z.ZodLiteral<"unknown">;
            wallet_client_type: z.ZodOptional<z.ZodString>;
            connector_type: z.ZodOptional<z.ZodString>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "wallet";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "solana";
            wallet_client: "unknown";
            wallet_client_type?: string | undefined;
            connector_type?: string | undefined;
        }, {
            type: "wallet";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "solana";
            wallet_client: "unknown";
            wallet_client_type?: string | undefined;
            connector_type?: string | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"smart_wallet">;
            address: z.ZodString;
            smart_wallet_type: z.ZodEnum<["safe", "kernel", "biconomy", "light_account", "coinbase_smart_wallet", "thirdweb"]>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "smart_wallet";
            address: string;
            smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        }, {
            type: "smart_wallet";
            address: string;
            smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        }>, z.ZodObject<{
            id: z.ZodDefault<z.ZodNullable<z.ZodString>>;
            type: z.ZodLiteral<"wallet">;
            address: z.ZodString;
            imported: z.ZodDefault<z.ZodBoolean>;
            delegated: z.ZodDefault<z.ZodBoolean>;
            wallet_index: z.ZodNumber;
            chain_id: z.ZodString;
            wallet_client: z.ZodLiteral<"privy">;
            wallet_client_type: z.ZodLiteral<"privy">;
            connector_type: z.ZodLiteral<"embedded">;
            recovery_method: z.ZodEnum<["privy", "user-passcode", "google-drive", "icloud", "recovery-encryption-key", "privy-v2"]>;
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        } & {
            chain_type: z.ZodLiteral<"ethereum">;
        }, "strip", z.ZodTypeAny, {
            type: "wallet";
            id: string | null;
            address: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "ethereum";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            imported: boolean;
            delegated: boolean;
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        }, {
            type: "wallet";
            address: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "ethereum";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
            id?: string | null | undefined;
            imported?: boolean | undefined;
            delegated?: boolean | undefined;
        }>, z.ZodObject<{
            id: z.ZodDefault<z.ZodNullable<z.ZodString>>;
            type: z.ZodLiteral<"wallet">;
            address: z.ZodString;
            imported: z.ZodDefault<z.ZodBoolean>;
            delegated: z.ZodDefault<z.ZodBoolean>;
            wallet_index: z.ZodNumber;
            chain_id: z.ZodString;
            wallet_client: z.ZodLiteral<"privy">;
            wallet_client_type: z.ZodLiteral<"privy">;
            connector_type: z.ZodLiteral<"embedded">;
            recovery_method: z.ZodEnum<["privy", "user-passcode", "google-drive", "icloud", "recovery-encryption-key", "privy-v2"]>;
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        } & {
            chain_type: z.ZodLiteral<"solana">;
            public_key: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "wallet";
            id: string | null;
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "solana";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            imported: boolean;
            delegated: boolean;
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        }, {
            type: "wallet";
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "solana";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
            id?: string | null | undefined;
            imported?: boolean | undefined;
            delegated?: boolean | undefined;
        }>, z.ZodObject<{
            id: z.ZodDefault<z.ZodNullable<z.ZodString>>;
            type: z.ZodLiteral<"wallet">;
            address: z.ZodString;
            imported: z.ZodDefault<z.ZodBoolean>;
            delegated: z.ZodDefault<z.ZodBoolean>;
            wallet_index: z.ZodNumber;
            chain_id: z.ZodString;
            wallet_client: z.ZodLiteral<"privy">;
            wallet_client_type: z.ZodLiteral<"privy">;
            connector_type: z.ZodLiteral<"embedded">;
            recovery_method: z.ZodEnum<["privy", "user-passcode", "google-drive", "icloud", "recovery-encryption-key", "privy-v2"]>;
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        } & {
            chain_type: z.ZodLiteral<"bitcoin-segwit">;
            public_key: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "wallet";
            id: string | null;
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "bitcoin-segwit";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            imported: boolean;
            delegated: boolean;
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        }, {
            type: "wallet";
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "bitcoin-segwit";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
            id?: string | null | undefined;
            imported?: boolean | undefined;
            delegated?: boolean | undefined;
        }>, z.ZodObject<{
            id: z.ZodDefault<z.ZodNullable<z.ZodString>>;
            type: z.ZodLiteral<"wallet">;
            address: z.ZodString;
            imported: z.ZodDefault<z.ZodBoolean>;
            delegated: z.ZodDefault<z.ZodBoolean>;
            wallet_index: z.ZodNumber;
            chain_id: z.ZodString;
            wallet_client: z.ZodLiteral<"privy">;
            wallet_client_type: z.ZodLiteral<"privy">;
            connector_type: z.ZodLiteral<"embedded">;
            recovery_method: z.ZodEnum<["privy", "user-passcode", "google-drive", "icloud", "recovery-encryption-key", "privy-v2"]>;
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        } & {
            chain_type: z.ZodLiteral<"bitcoin-taproot">;
            public_key: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "wallet";
            id: string | null;
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "bitcoin-taproot";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            imported: boolean;
            delegated: boolean;
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        }, {
            type: "wallet";
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "bitcoin-taproot";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
            id?: string | null | undefined;
            imported?: boolean | undefined;
            delegated?: boolean | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"google_oauth">;
            subject: z.ZodString;
            email: z.ZodString;
            name: z.ZodNullable<z.ZodString>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "google_oauth";
            name: string | null;
            email: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }, {
            type: "google_oauth";
            name: string | null;
            email: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"twitter_oauth">;
            subject: z.ZodString;
            username: z.ZodNullable<z.ZodString>;
            name: z.ZodNullable<z.ZodString>;
            profile_picture_url: z.ZodNullable<z.ZodString>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "twitter_oauth";
            name: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            profile_picture_url: string | null;
            subject: string;
        }, {
            type: "twitter_oauth";
            name: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            profile_picture_url: string | null;
            subject: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"discord_oauth">;
            subject: z.ZodString;
            username: z.ZodNullable<z.ZodString>;
            email: z.ZodNullable<z.ZodString>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "discord_oauth";
            email: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }, {
            type: "discord_oauth";
            email: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"github_oauth">;
            subject: z.ZodString;
            username: z.ZodNullable<z.ZodString>;
            name: z.ZodNullable<z.ZodString>;
            email: z.ZodNullable<z.ZodString>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "github_oauth";
            name: string | null;
            email: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }, {
            type: "github_oauth";
            name: string | null;
            email: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"spotify_oauth">;
            subject: z.ZodString;
            email: z.ZodNullable<z.ZodString>;
            name: z.ZodNullable<z.ZodString>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "spotify_oauth";
            name: string | null;
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }, {
            type: "spotify_oauth";
            name: string | null;
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"instagram_oauth">;
            subject: z.ZodString;
            username: z.ZodNullable<z.ZodString>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "instagram_oauth";
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }, {
            type: "instagram_oauth";
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"tiktok_oauth">;
            subject: z.ZodString;
            username: z.ZodNullable<z.ZodString>;
            name: z.ZodNullable<z.ZodString>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "tiktok_oauth";
            name: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }, {
            type: "tiktok_oauth";
            name: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"linkedin_oauth">;
            subject: z.ZodString;
            name: z.ZodOptional<z.ZodString>;
            email: z.ZodNullable<z.ZodString>;
            vanity_name: z.ZodOptional<z.ZodString>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "linkedin_oauth";
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
            name?: string | undefined;
            vanity_name?: string | undefined;
        }, {
            type: "linkedin_oauth";
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
            name?: string | undefined;
            vanity_name?: string | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"apple_oauth">;
            subject: z.ZodString;
            email: z.ZodNullable<z.ZodString>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "apple_oauth";
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }, {
            type: "apple_oauth";
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"custom_auth">;
            custom_user_id: z.ZodString;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "custom_auth";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            custom_user_id: string;
        }, {
            type: "custom_auth";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            custom_user_id: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"farcaster">;
            fid: z.ZodNumber;
            owner_address: z.ZodEffects<z.ZodString, string, string>;
            username: z.ZodOptional<z.ZodString>;
            display_name: z.ZodOptional<z.ZodString>;
            bio: z.ZodOptional<z.ZodString>;
            profile_picture: z.ZodOptional<z.ZodString>;
            profile_picture_url: z.ZodOptional<z.ZodString>;
            homepage_url: z.ZodOptional<z.ZodString>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
            signer_public_key: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "farcaster";
            fid: number;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            owner_address: string;
            username?: string | undefined;
            display_name?: string | undefined;
            bio?: string | undefined;
            profile_picture?: string | undefined;
            profile_picture_url?: string | undefined;
            homepage_url?: string | undefined;
            signer_public_key?: string | undefined;
        }, {
            type: "farcaster";
            fid: number;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            owner_address: string;
            username?: string | undefined;
            display_name?: string | undefined;
            bio?: string | undefined;
            profile_picture?: string | undefined;
            profile_picture_url?: string | undefined;
            homepage_url?: string | undefined;
            signer_public_key?: string | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"passkey">;
            created_with_browser: z.ZodOptional<z.ZodString>;
            created_with_os: z.ZodOptional<z.ZodString>;
            created_with_device: z.ZodOptional<z.ZodString>;
            credential_id: z.ZodString;
            authenticator_name: z.ZodOptional<z.ZodString>;
            enrolled_in_mfa: z.ZodBoolean;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "passkey";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            credential_id: string;
            enrolled_in_mfa: boolean;
            created_with_browser?: string | undefined;
            created_with_os?: string | undefined;
            created_with_device?: string | undefined;
            authenticator_name?: string | undefined;
        }, {
            type: "passkey";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            credential_id: string;
            enrolled_in_mfa: boolean;
            created_with_browser?: string | undefined;
            created_with_os?: string | undefined;
            created_with_device?: string | undefined;
            authenticator_name?: string | undefined;
        }>, z.ZodEffects<z.ZodObject<{
            type: z.ZodLiteral<"telegram">;
            telegram_user_id: z.ZodString;
            first_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            last_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            username: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            photo_url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "telegram";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            telegram_user_id: string;
            username?: string | null | undefined;
            first_name?: string | null | undefined;
            last_name?: string | null | undefined;
            photo_url?: string | null | undefined;
        }, {
            type: "telegram";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            telegram_user_id: string;
            username?: string | null | undefined;
            first_name?: string | null | undefined;
            last_name?: string | null | undefined;
            photo_url?: string | null | undefined;
        }>, {
            telegramUserId: string;
            firstName: string | null | undefined;
            type: "telegram";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            telegram_user_id: string;
            username?: string | null | undefined;
            first_name?: string | null | undefined;
            last_name?: string | null | undefined;
            photo_url?: string | null | undefined;
        }, {
            type: "telegram";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            telegram_user_id: string;
            username?: string | null | undefined;
            first_name?: string | null | undefined;
            last_name?: string | null | undefined;
            photo_url?: string | null | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"cross_app">;
            subject: z.ZodString;
            provider_app_id: z.ZodString;
            embedded_wallets: z.ZodArray<z.ZodObject<{
                address: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                address: string;
            }, {
                address: string;
            }>, "many">;
            smart_wallets: z.ZodArray<z.ZodObject<{
                address: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                address: string;
            }, {
                address: string;
            }>, "many">;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "cross_app";
            provider_app_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
            embedded_wallets: {
                address: string;
            }[];
            smart_wallets: {
                address: string;
            }[];
        }, {
            type: "cross_app";
            provider_app_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
            embedded_wallets: {
                address: string;
            }[];
            smart_wallets: {
                address: string;
            }[];
        }>, z.ZodObject<{
            type: z.ZodLiteral<"authorization_key">;
            public_key: z.ZodString;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "authorization_key";
            public_key: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        }, {
            type: "authorization_key";
            public_key: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        }>]>, "many">;
        mfa_methods: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"sms">;
            verified_at: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "sms";
            verified_at: number;
        }, {
            type: "sms";
            verified_at: number;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"totp">;
            verified_at: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "totp";
            verified_at: number;
        }, {
            type: "totp";
            verified_at: number;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"passkey">;
            verified_at: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "passkey";
            verified_at: number;
        }, {
            type: "passkey";
            verified_at: number;
        }>]>, "many">;
        created_at: z.ZodNumber;
        has_accepted_terms: z.ZodBoolean;
        is_guest: z.ZodBoolean;
        custom_metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        mfa_methods: ({
            type: "sms";
            verified_at: number;
        } | {
            type: "totp";
            verified_at: number;
        } | {
            type: "passkey";
            verified_at: number;
        })[];
        linked_accounts: ({
            type: "email";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        } | {
            type: "phone";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            phoneNumber: string;
            number?: string | undefined;
        } | {
            type: "wallet";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "ethereum";
            wallet_client: "unknown";
            chain_id?: string | undefined;
            wallet_client_type?: string | undefined;
            connector_type?: string | undefined;
        } | {
            type: "smart_wallet";
            address: string;
            smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        } | {
            type: "wallet";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "solana";
            wallet_client: "unknown";
            wallet_client_type?: string | undefined;
            connector_type?: string | undefined;
        } | {
            type: "farcaster";
            fid: number;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            owner_address: string;
            username?: string | undefined;
            display_name?: string | undefined;
            bio?: string | undefined;
            profile_picture?: string | undefined;
            profile_picture_url?: string | undefined;
            homepage_url?: string | undefined;
            signer_public_key?: string | undefined;
        } | {
            type: "passkey";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            credential_id: string;
            enrolled_in_mfa: boolean;
            created_with_browser?: string | undefined;
            created_with_os?: string | undefined;
            created_with_device?: string | undefined;
            authenticator_name?: string | undefined;
        } | {
            telegramUserId: string;
            firstName: string | null | undefined;
            type: "telegram";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            telegram_user_id: string;
            username?: string | null | undefined;
            first_name?: string | null | undefined;
            last_name?: string | null | undefined;
            photo_url?: string | null | undefined;
        } | {
            type: "wallet";
            id: string | null;
            address: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "ethereum";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            imported: boolean;
            delegated: boolean;
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        } | {
            type: "wallet";
            id: string | null;
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "solana";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            imported: boolean;
            delegated: boolean;
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        } | {
            type: "wallet";
            id: string | null;
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "bitcoin-segwit";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            imported: boolean;
            delegated: boolean;
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        } | {
            type: "wallet";
            id: string | null;
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "bitcoin-taproot";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            imported: boolean;
            delegated: boolean;
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        } | {
            type: "google_oauth";
            name: string | null;
            email: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "twitter_oauth";
            name: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            profile_picture_url: string | null;
            subject: string;
        } | {
            type: "discord_oauth";
            email: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "github_oauth";
            name: string | null;
            email: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "linkedin_oauth";
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
            name?: string | undefined;
            vanity_name?: string | undefined;
        } | {
            type: "spotify_oauth";
            name: string | null;
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "instagram_oauth";
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "tiktok_oauth";
            name: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "apple_oauth";
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "custom_auth";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            custom_user_id: string;
        } | {
            type: "cross_app";
            provider_app_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
            embedded_wallets: {
                address: string;
            }[];
            smart_wallets: {
                address: string;
            }[];
        } | {
            type: "authorization_key";
            public_key: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        })[];
        created_at: number;
        has_accepted_terms: boolean;
        is_guest: boolean;
        custom_metadata?: Record<string, string | number | boolean> | undefined;
    }, {
        id: string;
        mfa_methods: ({
            type: "sms";
            verified_at: number;
        } | {
            type: "totp";
            verified_at: number;
        } | {
            type: "passkey";
            verified_at: number;
        })[];
        linked_accounts: ({
            type: "email";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        } | {
            type: "phone";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            phoneNumber: string;
            number?: string | undefined;
        } | {
            type: "wallet";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "ethereum";
            wallet_client: "unknown";
            chain_id?: string | undefined;
            wallet_client_type?: string | undefined;
            connector_type?: string | undefined;
        } | {
            type: "smart_wallet";
            address: string;
            smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        } | {
            type: "wallet";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "solana";
            wallet_client: "unknown";
            wallet_client_type?: string | undefined;
            connector_type?: string | undefined;
        } | {
            type: "farcaster";
            fid: number;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            owner_address: string;
            username?: string | undefined;
            display_name?: string | undefined;
            bio?: string | undefined;
            profile_picture?: string | undefined;
            profile_picture_url?: string | undefined;
            homepage_url?: string | undefined;
            signer_public_key?: string | undefined;
        } | {
            type: "passkey";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            credential_id: string;
            enrolled_in_mfa: boolean;
            created_with_browser?: string | undefined;
            created_with_os?: string | undefined;
            created_with_device?: string | undefined;
            authenticator_name?: string | undefined;
        } | {
            type: "telegram";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            telegram_user_id: string;
            username?: string | null | undefined;
            first_name?: string | null | undefined;
            last_name?: string | null | undefined;
            photo_url?: string | null | undefined;
        } | {
            type: "wallet";
            address: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "ethereum";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
            id?: string | null | undefined;
            imported?: boolean | undefined;
            delegated?: boolean | undefined;
        } | {
            type: "wallet";
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "solana";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
            id?: string | null | undefined;
            imported?: boolean | undefined;
            delegated?: boolean | undefined;
        } | {
            type: "wallet";
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "bitcoin-segwit";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
            id?: string | null | undefined;
            imported?: boolean | undefined;
            delegated?: boolean | undefined;
        } | {
            type: "wallet";
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "bitcoin-taproot";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
            id?: string | null | undefined;
            imported?: boolean | undefined;
            delegated?: boolean | undefined;
        } | {
            type: "google_oauth";
            name: string | null;
            email: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "twitter_oauth";
            name: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            profile_picture_url: string | null;
            subject: string;
        } | {
            type: "discord_oauth";
            email: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "github_oauth";
            name: string | null;
            email: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "linkedin_oauth";
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
            name?: string | undefined;
            vanity_name?: string | undefined;
        } | {
            type: "spotify_oauth";
            name: string | null;
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "instagram_oauth";
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "tiktok_oauth";
            name: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "apple_oauth";
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "custom_auth";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            custom_user_id: string;
        } | {
            type: "cross_app";
            provider_app_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
            embedded_wallets: {
                address: string;
            }[];
            smart_wallets: {
                address: string;
            }[];
        } | {
            type: "authorization_key";
            public_key: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        })[];
        created_at: number;
        has_accepted_terms: boolean;
        is_guest: boolean;
        custom_metadata?: Record<string, string | number | boolean> | undefined;
    }>;
    token: z.ZodNullable<z.ZodString>;
    privy_access_token: z.ZodNullable<z.ZodString>;
    refresh_token: z.ZodNullable<z.ZodString>;
    identity_token: z.ZodOptional<z.ZodString>;
    is_new_user: z.ZodOptional<z.ZodBoolean>;
    oauth_tokens: z.ZodOptional<z.ZodObject<{
        provider: z.ZodString;
        access_token: z.ZodString;
        access_token_expires_in_seconds: z.ZodOptional<z.ZodNumber>;
        refresh_token: z.ZodOptional<z.ZodString>;
        refresh_token_expires_in_seconds: z.ZodOptional<z.ZodNumber>;
        scopes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        provider: string;
        access_token: string;
        access_token_expires_in_seconds?: number | undefined;
        refresh_token?: string | undefined;
        refresh_token_expires_in_seconds?: number | undefined;
        scopes?: string[] | undefined;
    }, {
        provider: string;
        access_token: string;
        access_token_expires_in_seconds?: number | undefined;
        refresh_token?: string | undefined;
        refresh_token_expires_in_seconds?: number | undefined;
        scopes?: string[] | undefined;
    }>>;
    oauth_provider_tokens: z.ZodOptional<z.ZodObject<{
        provider: z.ZodString;
        access_token: z.ZodString;
        access_token_expires_in_seconds: z.ZodOptional<z.ZodNumber>;
        refresh_token: z.ZodOptional<z.ZodString>;
        scopes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        provider: string;
        access_token: string;
        access_token_expires_in_seconds?: number | undefined;
        refresh_token?: string | undefined;
        scopes?: string[] | undefined;
    }, {
        provider: string;
        access_token: string;
        access_token_expires_in_seconds?: number | undefined;
        refresh_token?: string | undefined;
        scopes?: string[] | undefined;
    }>>;
    /**
     * Instructs the client on how to handle tokens received from /sessions endpoint
     * Seeks to mimic the behavior of cookies with manual storage
     *
     * - `set`: _write both tokens to storage_
     * - `clear`: _remove tokens from storage_
     * - `ignore`: _leave tokens storage unchanged_
     */
    session_update_action: z.ZodEnum<["set", "ignore", "clear"]>;
}, "strip", z.ZodTypeAny, {
    token: string | null;
    refresh_token: string | null;
    user: {
        id: string;
        mfa_methods: ({
            type: "sms";
            verified_at: number;
        } | {
            type: "totp";
            verified_at: number;
        } | {
            type: "passkey";
            verified_at: number;
        })[];
        linked_accounts: ({
            type: "email";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        } | {
            type: "phone";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            phoneNumber: string;
            number?: string | undefined;
        } | {
            type: "wallet";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "ethereum";
            wallet_client: "unknown";
            chain_id?: string | undefined;
            wallet_client_type?: string | undefined;
            connector_type?: string | undefined;
        } | {
            type: "smart_wallet";
            address: string;
            smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        } | {
            type: "wallet";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "solana";
            wallet_client: "unknown";
            wallet_client_type?: string | undefined;
            connector_type?: string | undefined;
        } | {
            type: "farcaster";
            fid: number;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            owner_address: string;
            username?: string | undefined;
            display_name?: string | undefined;
            bio?: string | undefined;
            profile_picture?: string | undefined;
            profile_picture_url?: string | undefined;
            homepage_url?: string | undefined;
            signer_public_key?: string | undefined;
        } | {
            type: "passkey";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            credential_id: string;
            enrolled_in_mfa: boolean;
            created_with_browser?: string | undefined;
            created_with_os?: string | undefined;
            created_with_device?: string | undefined;
            authenticator_name?: string | undefined;
        } | {
            telegramUserId: string;
            firstName: string | null | undefined;
            type: "telegram";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            telegram_user_id: string;
            username?: string | null | undefined;
            first_name?: string | null | undefined;
            last_name?: string | null | undefined;
            photo_url?: string | null | undefined;
        } | {
            type: "wallet";
            id: string | null;
            address: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "ethereum";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            imported: boolean;
            delegated: boolean;
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        } | {
            type: "wallet";
            id: string | null;
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "solana";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            imported: boolean;
            delegated: boolean;
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        } | {
            type: "wallet";
            id: string | null;
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "bitcoin-segwit";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            imported: boolean;
            delegated: boolean;
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        } | {
            type: "wallet";
            id: string | null;
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "bitcoin-taproot";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            imported: boolean;
            delegated: boolean;
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        } | {
            type: "google_oauth";
            name: string | null;
            email: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "twitter_oauth";
            name: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            profile_picture_url: string | null;
            subject: string;
        } | {
            type: "discord_oauth";
            email: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "github_oauth";
            name: string | null;
            email: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "linkedin_oauth";
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
            name?: string | undefined;
            vanity_name?: string | undefined;
        } | {
            type: "spotify_oauth";
            name: string | null;
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "instagram_oauth";
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "tiktok_oauth";
            name: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "apple_oauth";
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "custom_auth";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            custom_user_id: string;
        } | {
            type: "cross_app";
            provider_app_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
            embedded_wallets: {
                address: string;
            }[];
            smart_wallets: {
                address: string;
            }[];
        } | {
            type: "authorization_key";
            public_key: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        })[];
        created_at: number;
        has_accepted_terms: boolean;
        is_guest: boolean;
        custom_metadata?: Record<string, string | number | boolean> | undefined;
    };
    privy_access_token: string | null;
    session_update_action: "set" | "ignore" | "clear";
    identity_token?: string | undefined;
    is_new_user?: boolean | undefined;
    oauth_tokens?: {
        provider: string;
        access_token: string;
        access_token_expires_in_seconds?: number | undefined;
        refresh_token?: string | undefined;
        refresh_token_expires_in_seconds?: number | undefined;
        scopes?: string[] | undefined;
    } | undefined;
    oauth_provider_tokens?: {
        provider: string;
        access_token: string;
        access_token_expires_in_seconds?: number | undefined;
        refresh_token?: string | undefined;
        scopes?: string[] | undefined;
    } | undefined;
}, {
    token: string | null;
    refresh_token: string | null;
    user: {
        id: string;
        mfa_methods: ({
            type: "sms";
            verified_at: number;
        } | {
            type: "totp";
            verified_at: number;
        } | {
            type: "passkey";
            verified_at: number;
        })[];
        linked_accounts: ({
            type: "email";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        } | {
            type: "phone";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            phoneNumber: string;
            number?: string | undefined;
        } | {
            type: "wallet";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "ethereum";
            wallet_client: "unknown";
            chain_id?: string | undefined;
            wallet_client_type?: string | undefined;
            connector_type?: string | undefined;
        } | {
            type: "smart_wallet";
            address: string;
            smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        } | {
            type: "wallet";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "solana";
            wallet_client: "unknown";
            wallet_client_type?: string | undefined;
            connector_type?: string | undefined;
        } | {
            type: "farcaster";
            fid: number;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            owner_address: string;
            username?: string | undefined;
            display_name?: string | undefined;
            bio?: string | undefined;
            profile_picture?: string | undefined;
            profile_picture_url?: string | undefined;
            homepage_url?: string | undefined;
            signer_public_key?: string | undefined;
        } | {
            type: "passkey";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            credential_id: string;
            enrolled_in_mfa: boolean;
            created_with_browser?: string | undefined;
            created_with_os?: string | undefined;
            created_with_device?: string | undefined;
            authenticator_name?: string | undefined;
        } | {
            type: "telegram";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            telegram_user_id: string;
            username?: string | null | undefined;
            first_name?: string | null | undefined;
            last_name?: string | null | undefined;
            photo_url?: string | null | undefined;
        } | {
            type: "wallet";
            address: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "ethereum";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
            id?: string | null | undefined;
            imported?: boolean | undefined;
            delegated?: boolean | undefined;
        } | {
            type: "wallet";
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "solana";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
            id?: string | null | undefined;
            imported?: boolean | undefined;
            delegated?: boolean | undefined;
        } | {
            type: "wallet";
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "bitcoin-segwit";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
            id?: string | null | undefined;
            imported?: boolean | undefined;
            delegated?: boolean | undefined;
        } | {
            type: "wallet";
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "bitcoin-taproot";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
            id?: string | null | undefined;
            imported?: boolean | undefined;
            delegated?: boolean | undefined;
        } | {
            type: "google_oauth";
            name: string | null;
            email: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "twitter_oauth";
            name: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            profile_picture_url: string | null;
            subject: string;
        } | {
            type: "discord_oauth";
            email: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "github_oauth";
            name: string | null;
            email: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "linkedin_oauth";
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
            name?: string | undefined;
            vanity_name?: string | undefined;
        } | {
            type: "spotify_oauth";
            name: string | null;
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "instagram_oauth";
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "tiktok_oauth";
            name: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "apple_oauth";
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "custom_auth";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            custom_user_id: string;
        } | {
            type: "cross_app";
            provider_app_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
            embedded_wallets: {
                address: string;
            }[];
            smart_wallets: {
                address: string;
            }[];
        } | {
            type: "authorization_key";
            public_key: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        })[];
        created_at: number;
        has_accepted_terms: boolean;
        is_guest: boolean;
        custom_metadata?: Record<string, string | number | boolean> | undefined;
    };
    privy_access_token: string | null;
    session_update_action: "set" | "ignore" | "clear";
    identity_token?: string | undefined;
    is_new_user?: boolean | undefined;
    oauth_tokens?: {
        provider: string;
        access_token: string;
        access_token_expires_in_seconds?: number | undefined;
        refresh_token?: string | undefined;
        refresh_token_expires_in_seconds?: number | undefined;
        scopes?: string[] | undefined;
    } | undefined;
    oauth_provider_tokens?: {
        provider: string;
        access_token: string;
        access_token_expires_in_seconds?: number | undefined;
        refresh_token?: string | undefined;
        scopes?: string[] | undefined;
    } | undefined;
}>;
interface PrivyUser extends z.infer<typeof User> {
}
interface PrivyUserWithIdentityToken extends z.infer<typeof UserWithIdentityToken> {
}
interface PrivyAuthenticatedUser extends z.infer<typeof AuthenticatedUser> {
}
declare const LoggedOutUser: z.ZodObject<{
    user: z.ZodNull;
    token: z.ZodNull;
    refresh_token: z.ZodNull;
    /** Instructs the client to clear any persisted tokens */
    session_update_action: z.ZodLiteral<"clear">;
}, "strip", z.ZodTypeAny, {
    token: null;
    refresh_token: null;
    user: null;
    session_update_action: "clear";
}, {
    token: null;
    refresh_token: null;
    user: null;
    session_update_action: "clear";
}>;
interface PrivyLoggedOutUser extends z.infer<typeof LoggedOutUser> {
}
declare const MaybeUser: z.ZodUnion<[z.ZodObject<{
    user: z.ZodObject<{
        id: z.ZodString;
        linked_accounts: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"email">;
            address: z.ZodString;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "email";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        }, {
            type: "email";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"phone">;
            number: z.ZodOptional<z.ZodString>;
            phoneNumber: z.ZodString;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "phone";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            phoneNumber: string;
            number?: string | undefined;
        }, {
            type: "phone";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            phoneNumber: string;
            number?: string | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"wallet">;
            address: z.ZodString;
            /**
             * @deprecated Will be removed in a future release
             */
            chain_id: z.ZodOptional<z.ZodString>;
            chain_type: z.ZodLiteral<"ethereum">;
            /**
             * @deprecated Use `wallet_client_type` instead.
             */
            wallet_client: z.ZodLiteral<"unknown">;
            wallet_client_type: z.ZodOptional<z.ZodString>;
            connector_type: z.ZodOptional<z.ZodString>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "wallet";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "ethereum";
            wallet_client: "unknown";
            chain_id?: string | undefined;
            wallet_client_type?: string | undefined;
            connector_type?: string | undefined;
        }, {
            type: "wallet";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "ethereum";
            wallet_client: "unknown";
            chain_id?: string | undefined;
            wallet_client_type?: string | undefined;
            connector_type?: string | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"wallet">;
            address: z.ZodString;
            chain_type: z.ZodLiteral<"solana">;
            /**
             * @deprecated Use `wallet_client_type` instead.
             */
            wallet_client: z.ZodLiteral<"unknown">;
            wallet_client_type: z.ZodOptional<z.ZodString>;
            connector_type: z.ZodOptional<z.ZodString>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "wallet";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "solana";
            wallet_client: "unknown";
            wallet_client_type?: string | undefined;
            connector_type?: string | undefined;
        }, {
            type: "wallet";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "solana";
            wallet_client: "unknown";
            wallet_client_type?: string | undefined;
            connector_type?: string | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"smart_wallet">;
            address: z.ZodString;
            smart_wallet_type: z.ZodEnum<["safe", "kernel", "biconomy", "light_account", "coinbase_smart_wallet", "thirdweb"]>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "smart_wallet";
            address: string;
            smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        }, {
            type: "smart_wallet";
            address: string;
            smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        }>, z.ZodObject<{
            id: z.ZodDefault<z.ZodNullable<z.ZodString>>;
            type: z.ZodLiteral<"wallet">;
            address: z.ZodString;
            imported: z.ZodDefault<z.ZodBoolean>;
            delegated: z.ZodDefault<z.ZodBoolean>;
            wallet_index: z.ZodNumber;
            chain_id: z.ZodString;
            wallet_client: z.ZodLiteral<"privy">;
            wallet_client_type: z.ZodLiteral<"privy">;
            connector_type: z.ZodLiteral<"embedded">;
            recovery_method: z.ZodEnum<["privy", "user-passcode", "google-drive", "icloud", "recovery-encryption-key", "privy-v2"]>;
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        } & {
            chain_type: z.ZodLiteral<"ethereum">;
        }, "strip", z.ZodTypeAny, {
            type: "wallet";
            id: string | null;
            address: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "ethereum";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            imported: boolean;
            delegated: boolean;
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        }, {
            type: "wallet";
            address: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "ethereum";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
            id?: string | null | undefined;
            imported?: boolean | undefined;
            delegated?: boolean | undefined;
        }>, z.ZodObject<{
            id: z.ZodDefault<z.ZodNullable<z.ZodString>>;
            type: z.ZodLiteral<"wallet">;
            address: z.ZodString;
            imported: z.ZodDefault<z.ZodBoolean>;
            delegated: z.ZodDefault<z.ZodBoolean>;
            wallet_index: z.ZodNumber;
            chain_id: z.ZodString;
            wallet_client: z.ZodLiteral<"privy">;
            wallet_client_type: z.ZodLiteral<"privy">;
            connector_type: z.ZodLiteral<"embedded">;
            recovery_method: z.ZodEnum<["privy", "user-passcode", "google-drive", "icloud", "recovery-encryption-key", "privy-v2"]>;
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        } & {
            chain_type: z.ZodLiteral<"solana">;
            public_key: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "wallet";
            id: string | null;
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "solana";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            imported: boolean;
            delegated: boolean;
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        }, {
            type: "wallet";
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "solana";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
            id?: string | null | undefined;
            imported?: boolean | undefined;
            delegated?: boolean | undefined;
        }>, z.ZodObject<{
            id: z.ZodDefault<z.ZodNullable<z.ZodString>>;
            type: z.ZodLiteral<"wallet">;
            address: z.ZodString;
            imported: z.ZodDefault<z.ZodBoolean>;
            delegated: z.ZodDefault<z.ZodBoolean>;
            wallet_index: z.ZodNumber;
            chain_id: z.ZodString;
            wallet_client: z.ZodLiteral<"privy">;
            wallet_client_type: z.ZodLiteral<"privy">;
            connector_type: z.ZodLiteral<"embedded">;
            recovery_method: z.ZodEnum<["privy", "user-passcode", "google-drive", "icloud", "recovery-encryption-key", "privy-v2"]>;
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        } & {
            chain_type: z.ZodLiteral<"bitcoin-segwit">;
            public_key: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "wallet";
            id: string | null;
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "bitcoin-segwit";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            imported: boolean;
            delegated: boolean;
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        }, {
            type: "wallet";
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "bitcoin-segwit";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
            id?: string | null | undefined;
            imported?: boolean | undefined;
            delegated?: boolean | undefined;
        }>, z.ZodObject<{
            id: z.ZodDefault<z.ZodNullable<z.ZodString>>;
            type: z.ZodLiteral<"wallet">;
            address: z.ZodString;
            imported: z.ZodDefault<z.ZodBoolean>;
            delegated: z.ZodDefault<z.ZodBoolean>;
            wallet_index: z.ZodNumber;
            chain_id: z.ZodString;
            wallet_client: z.ZodLiteral<"privy">;
            wallet_client_type: z.ZodLiteral<"privy">;
            connector_type: z.ZodLiteral<"embedded">;
            recovery_method: z.ZodEnum<["privy", "user-passcode", "google-drive", "icloud", "recovery-encryption-key", "privy-v2"]>;
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        } & {
            chain_type: z.ZodLiteral<"bitcoin-taproot">;
            public_key: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "wallet";
            id: string | null;
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "bitcoin-taproot";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            imported: boolean;
            delegated: boolean;
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        }, {
            type: "wallet";
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "bitcoin-taproot";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
            id?: string | null | undefined;
            imported?: boolean | undefined;
            delegated?: boolean | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"google_oauth">;
            subject: z.ZodString;
            email: z.ZodString;
            name: z.ZodNullable<z.ZodString>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "google_oauth";
            name: string | null;
            email: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }, {
            type: "google_oauth";
            name: string | null;
            email: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"twitter_oauth">;
            subject: z.ZodString;
            username: z.ZodNullable<z.ZodString>;
            name: z.ZodNullable<z.ZodString>;
            profile_picture_url: z.ZodNullable<z.ZodString>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "twitter_oauth";
            name: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            profile_picture_url: string | null;
            subject: string;
        }, {
            type: "twitter_oauth";
            name: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            profile_picture_url: string | null;
            subject: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"discord_oauth">;
            subject: z.ZodString;
            username: z.ZodNullable<z.ZodString>;
            email: z.ZodNullable<z.ZodString>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "discord_oauth";
            email: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }, {
            type: "discord_oauth";
            email: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"github_oauth">;
            subject: z.ZodString;
            username: z.ZodNullable<z.ZodString>;
            name: z.ZodNullable<z.ZodString>;
            email: z.ZodNullable<z.ZodString>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "github_oauth";
            name: string | null;
            email: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }, {
            type: "github_oauth";
            name: string | null;
            email: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"spotify_oauth">;
            subject: z.ZodString;
            email: z.ZodNullable<z.ZodString>;
            name: z.ZodNullable<z.ZodString>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "spotify_oauth";
            name: string | null;
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }, {
            type: "spotify_oauth";
            name: string | null;
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"instagram_oauth">;
            subject: z.ZodString;
            username: z.ZodNullable<z.ZodString>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "instagram_oauth";
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }, {
            type: "instagram_oauth";
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"tiktok_oauth">;
            subject: z.ZodString;
            username: z.ZodNullable<z.ZodString>;
            name: z.ZodNullable<z.ZodString>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "tiktok_oauth";
            name: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }, {
            type: "tiktok_oauth";
            name: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"linkedin_oauth">;
            subject: z.ZodString;
            name: z.ZodOptional<z.ZodString>;
            email: z.ZodNullable<z.ZodString>;
            vanity_name: z.ZodOptional<z.ZodString>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "linkedin_oauth";
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
            name?: string | undefined;
            vanity_name?: string | undefined;
        }, {
            type: "linkedin_oauth";
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
            name?: string | undefined;
            vanity_name?: string | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"apple_oauth">;
            subject: z.ZodString;
            email: z.ZodNullable<z.ZodString>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "apple_oauth";
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }, {
            type: "apple_oauth";
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"custom_auth">;
            custom_user_id: z.ZodString;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "custom_auth";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            custom_user_id: string;
        }, {
            type: "custom_auth";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            custom_user_id: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"farcaster">;
            fid: z.ZodNumber;
            owner_address: z.ZodEffects<z.ZodString, string, string>;
            username: z.ZodOptional<z.ZodString>;
            display_name: z.ZodOptional<z.ZodString>;
            bio: z.ZodOptional<z.ZodString>;
            profile_picture: z.ZodOptional<z.ZodString>;
            profile_picture_url: z.ZodOptional<z.ZodString>;
            homepage_url: z.ZodOptional<z.ZodString>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
            signer_public_key: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "farcaster";
            fid: number;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            owner_address: string;
            username?: string | undefined;
            display_name?: string | undefined;
            bio?: string | undefined;
            profile_picture?: string | undefined;
            profile_picture_url?: string | undefined;
            homepage_url?: string | undefined;
            signer_public_key?: string | undefined;
        }, {
            type: "farcaster";
            fid: number;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            owner_address: string;
            username?: string | undefined;
            display_name?: string | undefined;
            bio?: string | undefined;
            profile_picture?: string | undefined;
            profile_picture_url?: string | undefined;
            homepage_url?: string | undefined;
            signer_public_key?: string | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"passkey">;
            created_with_browser: z.ZodOptional<z.ZodString>;
            created_with_os: z.ZodOptional<z.ZodString>;
            created_with_device: z.ZodOptional<z.ZodString>;
            credential_id: z.ZodString;
            authenticator_name: z.ZodOptional<z.ZodString>;
            enrolled_in_mfa: z.ZodBoolean;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "passkey";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            credential_id: string;
            enrolled_in_mfa: boolean;
            created_with_browser?: string | undefined;
            created_with_os?: string | undefined;
            created_with_device?: string | undefined;
            authenticator_name?: string | undefined;
        }, {
            type: "passkey";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            credential_id: string;
            enrolled_in_mfa: boolean;
            created_with_browser?: string | undefined;
            created_with_os?: string | undefined;
            created_with_device?: string | undefined;
            authenticator_name?: string | undefined;
        }>, z.ZodEffects<z.ZodObject<{
            type: z.ZodLiteral<"telegram">;
            telegram_user_id: z.ZodString;
            first_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            last_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            username: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            photo_url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "telegram";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            telegram_user_id: string;
            username?: string | null | undefined;
            first_name?: string | null | undefined;
            last_name?: string | null | undefined;
            photo_url?: string | null | undefined;
        }, {
            type: "telegram";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            telegram_user_id: string;
            username?: string | null | undefined;
            first_name?: string | null | undefined;
            last_name?: string | null | undefined;
            photo_url?: string | null | undefined;
        }>, {
            telegramUserId: string;
            firstName: string | null | undefined;
            type: "telegram";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            telegram_user_id: string;
            username?: string | null | undefined;
            first_name?: string | null | undefined;
            last_name?: string | null | undefined;
            photo_url?: string | null | undefined;
        }, {
            type: "telegram";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            telegram_user_id: string;
            username?: string | null | undefined;
            first_name?: string | null | undefined;
            last_name?: string | null | undefined;
            photo_url?: string | null | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"cross_app">;
            subject: z.ZodString;
            provider_app_id: z.ZodString;
            embedded_wallets: z.ZodArray<z.ZodObject<{
                address: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                address: string;
            }, {
                address: string;
            }>, "many">;
            smart_wallets: z.ZodArray<z.ZodObject<{
                address: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                address: string;
            }, {
                address: string;
            }>, "many">;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "cross_app";
            provider_app_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
            embedded_wallets: {
                address: string;
            }[];
            smart_wallets: {
                address: string;
            }[];
        }, {
            type: "cross_app";
            provider_app_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
            embedded_wallets: {
                address: string;
            }[];
            smart_wallets: {
                address: string;
            }[];
        }>, z.ZodObject<{
            type: z.ZodLiteral<"authorization_key">;
            public_key: z.ZodString;
            /** @deprecated use `first_verified_at` instead. */
            verified_at: z.ZodNumber;
            first_verified_at: z.ZodNullable<z.ZodNumber>;
            latest_verified_at: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "authorization_key";
            public_key: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        }, {
            type: "authorization_key";
            public_key: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        }>]>, "many">;
        mfa_methods: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"sms">;
            verified_at: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "sms";
            verified_at: number;
        }, {
            type: "sms";
            verified_at: number;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"totp">;
            verified_at: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "totp";
            verified_at: number;
        }, {
            type: "totp";
            verified_at: number;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"passkey">;
            verified_at: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "passkey";
            verified_at: number;
        }, {
            type: "passkey";
            verified_at: number;
        }>]>, "many">;
        created_at: z.ZodNumber;
        has_accepted_terms: z.ZodBoolean;
        is_guest: z.ZodBoolean;
        custom_metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        mfa_methods: ({
            type: "sms";
            verified_at: number;
        } | {
            type: "totp";
            verified_at: number;
        } | {
            type: "passkey";
            verified_at: number;
        })[];
        linked_accounts: ({
            type: "email";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        } | {
            type: "phone";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            phoneNumber: string;
            number?: string | undefined;
        } | {
            type: "wallet";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "ethereum";
            wallet_client: "unknown";
            chain_id?: string | undefined;
            wallet_client_type?: string | undefined;
            connector_type?: string | undefined;
        } | {
            type: "smart_wallet";
            address: string;
            smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        } | {
            type: "wallet";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "solana";
            wallet_client: "unknown";
            wallet_client_type?: string | undefined;
            connector_type?: string | undefined;
        } | {
            type: "farcaster";
            fid: number;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            owner_address: string;
            username?: string | undefined;
            display_name?: string | undefined;
            bio?: string | undefined;
            profile_picture?: string | undefined;
            profile_picture_url?: string | undefined;
            homepage_url?: string | undefined;
            signer_public_key?: string | undefined;
        } | {
            type: "passkey";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            credential_id: string;
            enrolled_in_mfa: boolean;
            created_with_browser?: string | undefined;
            created_with_os?: string | undefined;
            created_with_device?: string | undefined;
            authenticator_name?: string | undefined;
        } | {
            telegramUserId: string;
            firstName: string | null | undefined;
            type: "telegram";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            telegram_user_id: string;
            username?: string | null | undefined;
            first_name?: string | null | undefined;
            last_name?: string | null | undefined;
            photo_url?: string | null | undefined;
        } | {
            type: "wallet";
            id: string | null;
            address: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "ethereum";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            imported: boolean;
            delegated: boolean;
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        } | {
            type: "wallet";
            id: string | null;
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "solana";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            imported: boolean;
            delegated: boolean;
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        } | {
            type: "wallet";
            id: string | null;
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "bitcoin-segwit";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            imported: boolean;
            delegated: boolean;
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        } | {
            type: "wallet";
            id: string | null;
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "bitcoin-taproot";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            imported: boolean;
            delegated: boolean;
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        } | {
            type: "google_oauth";
            name: string | null;
            email: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "twitter_oauth";
            name: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            profile_picture_url: string | null;
            subject: string;
        } | {
            type: "discord_oauth";
            email: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "github_oauth";
            name: string | null;
            email: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "linkedin_oauth";
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
            name?: string | undefined;
            vanity_name?: string | undefined;
        } | {
            type: "spotify_oauth";
            name: string | null;
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "instagram_oauth";
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "tiktok_oauth";
            name: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "apple_oauth";
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "custom_auth";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            custom_user_id: string;
        } | {
            type: "cross_app";
            provider_app_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
            embedded_wallets: {
                address: string;
            }[];
            smart_wallets: {
                address: string;
            }[];
        } | {
            type: "authorization_key";
            public_key: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        })[];
        created_at: number;
        has_accepted_terms: boolean;
        is_guest: boolean;
        custom_metadata?: Record<string, string | number | boolean> | undefined;
    }, {
        id: string;
        mfa_methods: ({
            type: "sms";
            verified_at: number;
        } | {
            type: "totp";
            verified_at: number;
        } | {
            type: "passkey";
            verified_at: number;
        })[];
        linked_accounts: ({
            type: "email";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        } | {
            type: "phone";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            phoneNumber: string;
            number?: string | undefined;
        } | {
            type: "wallet";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "ethereum";
            wallet_client: "unknown";
            chain_id?: string | undefined;
            wallet_client_type?: string | undefined;
            connector_type?: string | undefined;
        } | {
            type: "smart_wallet";
            address: string;
            smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        } | {
            type: "wallet";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "solana";
            wallet_client: "unknown";
            wallet_client_type?: string | undefined;
            connector_type?: string | undefined;
        } | {
            type: "farcaster";
            fid: number;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            owner_address: string;
            username?: string | undefined;
            display_name?: string | undefined;
            bio?: string | undefined;
            profile_picture?: string | undefined;
            profile_picture_url?: string | undefined;
            homepage_url?: string | undefined;
            signer_public_key?: string | undefined;
        } | {
            type: "passkey";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            credential_id: string;
            enrolled_in_mfa: boolean;
            created_with_browser?: string | undefined;
            created_with_os?: string | undefined;
            created_with_device?: string | undefined;
            authenticator_name?: string | undefined;
        } | {
            type: "telegram";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            telegram_user_id: string;
            username?: string | null | undefined;
            first_name?: string | null | undefined;
            last_name?: string | null | undefined;
            photo_url?: string | null | undefined;
        } | {
            type: "wallet";
            address: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "ethereum";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
            id?: string | null | undefined;
            imported?: boolean | undefined;
            delegated?: boolean | undefined;
        } | {
            type: "wallet";
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "solana";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
            id?: string | null | undefined;
            imported?: boolean | undefined;
            delegated?: boolean | undefined;
        } | {
            type: "wallet";
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "bitcoin-segwit";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
            id?: string | null | undefined;
            imported?: boolean | undefined;
            delegated?: boolean | undefined;
        } | {
            type: "wallet";
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "bitcoin-taproot";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
            id?: string | null | undefined;
            imported?: boolean | undefined;
            delegated?: boolean | undefined;
        } | {
            type: "google_oauth";
            name: string | null;
            email: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "twitter_oauth";
            name: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            profile_picture_url: string | null;
            subject: string;
        } | {
            type: "discord_oauth";
            email: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "github_oauth";
            name: string | null;
            email: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "linkedin_oauth";
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
            name?: string | undefined;
            vanity_name?: string | undefined;
        } | {
            type: "spotify_oauth";
            name: string | null;
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "instagram_oauth";
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "tiktok_oauth";
            name: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "apple_oauth";
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "custom_auth";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            custom_user_id: string;
        } | {
            type: "cross_app";
            provider_app_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
            embedded_wallets: {
                address: string;
            }[];
            smart_wallets: {
                address: string;
            }[];
        } | {
            type: "authorization_key";
            public_key: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        })[];
        created_at: number;
        has_accepted_terms: boolean;
        is_guest: boolean;
        custom_metadata?: Record<string, string | number | boolean> | undefined;
    }>;
    token: z.ZodNullable<z.ZodString>;
    privy_access_token: z.ZodNullable<z.ZodString>;
    refresh_token: z.ZodNullable<z.ZodString>;
    identity_token: z.ZodOptional<z.ZodString>;
    is_new_user: z.ZodOptional<z.ZodBoolean>;
    oauth_tokens: z.ZodOptional<z.ZodObject<{
        provider: z.ZodString;
        access_token: z.ZodString;
        access_token_expires_in_seconds: z.ZodOptional<z.ZodNumber>;
        refresh_token: z.ZodOptional<z.ZodString>;
        refresh_token_expires_in_seconds: z.ZodOptional<z.ZodNumber>;
        scopes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        provider: string;
        access_token: string;
        access_token_expires_in_seconds?: number | undefined;
        refresh_token?: string | undefined;
        refresh_token_expires_in_seconds?: number | undefined;
        scopes?: string[] | undefined;
    }, {
        provider: string;
        access_token: string;
        access_token_expires_in_seconds?: number | undefined;
        refresh_token?: string | undefined;
        refresh_token_expires_in_seconds?: number | undefined;
        scopes?: string[] | undefined;
    }>>;
    oauth_provider_tokens: z.ZodOptional<z.ZodObject<{
        provider: z.ZodString;
        access_token: z.ZodString;
        access_token_expires_in_seconds: z.ZodOptional<z.ZodNumber>;
        refresh_token: z.ZodOptional<z.ZodString>;
        scopes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        provider: string;
        access_token: string;
        access_token_expires_in_seconds?: number | undefined;
        refresh_token?: string | undefined;
        scopes?: string[] | undefined;
    }, {
        provider: string;
        access_token: string;
        access_token_expires_in_seconds?: number | undefined;
        refresh_token?: string | undefined;
        scopes?: string[] | undefined;
    }>>;
    /**
     * Instructs the client on how to handle tokens received from /sessions endpoint
     * Seeks to mimic the behavior of cookies with manual storage
     *
     * - `set`: _write both tokens to storage_
     * - `clear`: _remove tokens from storage_
     * - `ignore`: _leave tokens storage unchanged_
     */
    session_update_action: z.ZodEnum<["set", "ignore", "clear"]>;
}, "strip", z.ZodTypeAny, {
    token: string | null;
    refresh_token: string | null;
    user: {
        id: string;
        mfa_methods: ({
            type: "sms";
            verified_at: number;
        } | {
            type: "totp";
            verified_at: number;
        } | {
            type: "passkey";
            verified_at: number;
        })[];
        linked_accounts: ({
            type: "email";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        } | {
            type: "phone";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            phoneNumber: string;
            number?: string | undefined;
        } | {
            type: "wallet";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "ethereum";
            wallet_client: "unknown";
            chain_id?: string | undefined;
            wallet_client_type?: string | undefined;
            connector_type?: string | undefined;
        } | {
            type: "smart_wallet";
            address: string;
            smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        } | {
            type: "wallet";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "solana";
            wallet_client: "unknown";
            wallet_client_type?: string | undefined;
            connector_type?: string | undefined;
        } | {
            type: "farcaster";
            fid: number;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            owner_address: string;
            username?: string | undefined;
            display_name?: string | undefined;
            bio?: string | undefined;
            profile_picture?: string | undefined;
            profile_picture_url?: string | undefined;
            homepage_url?: string | undefined;
            signer_public_key?: string | undefined;
        } | {
            type: "passkey";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            credential_id: string;
            enrolled_in_mfa: boolean;
            created_with_browser?: string | undefined;
            created_with_os?: string | undefined;
            created_with_device?: string | undefined;
            authenticator_name?: string | undefined;
        } | {
            telegramUserId: string;
            firstName: string | null | undefined;
            type: "telegram";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            telegram_user_id: string;
            username?: string | null | undefined;
            first_name?: string | null | undefined;
            last_name?: string | null | undefined;
            photo_url?: string | null | undefined;
        } | {
            type: "wallet";
            id: string | null;
            address: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "ethereum";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            imported: boolean;
            delegated: boolean;
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        } | {
            type: "wallet";
            id: string | null;
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "solana";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            imported: boolean;
            delegated: boolean;
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        } | {
            type: "wallet";
            id: string | null;
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "bitcoin-segwit";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            imported: boolean;
            delegated: boolean;
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        } | {
            type: "wallet";
            id: string | null;
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "bitcoin-taproot";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            imported: boolean;
            delegated: boolean;
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
        } | {
            type: "google_oauth";
            name: string | null;
            email: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "twitter_oauth";
            name: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            profile_picture_url: string | null;
            subject: string;
        } | {
            type: "discord_oauth";
            email: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "github_oauth";
            name: string | null;
            email: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "linkedin_oauth";
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
            name?: string | undefined;
            vanity_name?: string | undefined;
        } | {
            type: "spotify_oauth";
            name: string | null;
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "instagram_oauth";
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "tiktok_oauth";
            name: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "apple_oauth";
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "custom_auth";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            custom_user_id: string;
        } | {
            type: "cross_app";
            provider_app_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
            embedded_wallets: {
                address: string;
            }[];
            smart_wallets: {
                address: string;
            }[];
        } | {
            type: "authorization_key";
            public_key: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        })[];
        created_at: number;
        has_accepted_terms: boolean;
        is_guest: boolean;
        custom_metadata?: Record<string, string | number | boolean> | undefined;
    };
    privy_access_token: string | null;
    session_update_action: "set" | "ignore" | "clear";
    identity_token?: string | undefined;
    is_new_user?: boolean | undefined;
    oauth_tokens?: {
        provider: string;
        access_token: string;
        access_token_expires_in_seconds?: number | undefined;
        refresh_token?: string | undefined;
        refresh_token_expires_in_seconds?: number | undefined;
        scopes?: string[] | undefined;
    } | undefined;
    oauth_provider_tokens?: {
        provider: string;
        access_token: string;
        access_token_expires_in_seconds?: number | undefined;
        refresh_token?: string | undefined;
        scopes?: string[] | undefined;
    } | undefined;
}, {
    token: string | null;
    refresh_token: string | null;
    user: {
        id: string;
        mfa_methods: ({
            type: "sms";
            verified_at: number;
        } | {
            type: "totp";
            verified_at: number;
        } | {
            type: "passkey";
            verified_at: number;
        })[];
        linked_accounts: ({
            type: "email";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        } | {
            type: "phone";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            phoneNumber: string;
            number?: string | undefined;
        } | {
            type: "wallet";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "ethereum";
            wallet_client: "unknown";
            chain_id?: string | undefined;
            wallet_client_type?: string | undefined;
            connector_type?: string | undefined;
        } | {
            type: "smart_wallet";
            address: string;
            smart_wallet_type: "safe" | "kernel" | "biconomy" | "light_account" | "coinbase_smart_wallet" | "thirdweb";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        } | {
            type: "wallet";
            address: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "solana";
            wallet_client: "unknown";
            wallet_client_type?: string | undefined;
            connector_type?: string | undefined;
        } | {
            type: "farcaster";
            fid: number;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            owner_address: string;
            username?: string | undefined;
            display_name?: string | undefined;
            bio?: string | undefined;
            profile_picture?: string | undefined;
            profile_picture_url?: string | undefined;
            homepage_url?: string | undefined;
            signer_public_key?: string | undefined;
        } | {
            type: "passkey";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            credential_id: string;
            enrolled_in_mfa: boolean;
            created_with_browser?: string | undefined;
            created_with_os?: string | undefined;
            created_with_device?: string | undefined;
            authenticator_name?: string | undefined;
        } | {
            type: "telegram";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            telegram_user_id: string;
            username?: string | null | undefined;
            first_name?: string | null | undefined;
            last_name?: string | null | undefined;
            photo_url?: string | null | undefined;
        } | {
            type: "wallet";
            address: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "ethereum";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
            id?: string | null | undefined;
            imported?: boolean | undefined;
            delegated?: boolean | undefined;
        } | {
            type: "wallet";
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "solana";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
            id?: string | null | undefined;
            imported?: boolean | undefined;
            delegated?: boolean | undefined;
        } | {
            type: "wallet";
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "bitcoin-segwit";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
            id?: string | null | undefined;
            imported?: boolean | undefined;
            delegated?: boolean | undefined;
        } | {
            type: "wallet";
            address: string;
            public_key: string;
            chain_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            chain_type: "bitcoin-taproot";
            wallet_client: "privy";
            wallet_client_type: "privy";
            connector_type: "embedded";
            wallet_index: number;
            recovery_method: "user-passcode" | "google-drive" | "icloud" | "privy" | "recovery-encryption-key" | "privy-v2";
            id?: string | null | undefined;
            imported?: boolean | undefined;
            delegated?: boolean | undefined;
        } | {
            type: "google_oauth";
            name: string | null;
            email: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "twitter_oauth";
            name: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            profile_picture_url: string | null;
            subject: string;
        } | {
            type: "discord_oauth";
            email: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "github_oauth";
            name: string | null;
            email: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "linkedin_oauth";
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
            name?: string | undefined;
            vanity_name?: string | undefined;
        } | {
            type: "spotify_oauth";
            name: string | null;
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "instagram_oauth";
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "tiktok_oauth";
            name: string | null;
            username: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "apple_oauth";
            email: string | null;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
        } | {
            type: "custom_auth";
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            custom_user_id: string;
        } | {
            type: "cross_app";
            provider_app_id: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
            subject: string;
            embedded_wallets: {
                address: string;
            }[];
            smart_wallets: {
                address: string;
            }[];
        } | {
            type: "authorization_key";
            public_key: string;
            verified_at: number;
            first_verified_at: number | null;
            latest_verified_at: number | null;
        })[];
        created_at: number;
        has_accepted_terms: boolean;
        is_guest: boolean;
        custom_metadata?: Record<string, string | number | boolean> | undefined;
    };
    privy_access_token: string | null;
    session_update_action: "set" | "ignore" | "clear";
    identity_token?: string | undefined;
    is_new_user?: boolean | undefined;
    oauth_tokens?: {
        provider: string;
        access_token: string;
        access_token_expires_in_seconds?: number | undefined;
        refresh_token?: string | undefined;
        refresh_token_expires_in_seconds?: number | undefined;
        scopes?: string[] | undefined;
    } | undefined;
    oauth_provider_tokens?: {
        provider: string;
        access_token: string;
        access_token_expires_in_seconds?: number | undefined;
        refresh_token?: string | undefined;
        scopes?: string[] | undefined;
    } | undefined;
}>, z.ZodObject<{
    user: z.ZodNull;
    token: z.ZodNull;
    refresh_token: z.ZodNull;
    /** Instructs the client to clear any persisted tokens */
    session_update_action: z.ZodLiteral<"clear">;
}, "strip", z.ZodTypeAny, {
    token: null;
    refresh_token: null;
    user: null;
    session_update_action: "clear";
}, {
    token: null;
    refresh_token: null;
    user: null;
    session_update_action: "clear";
}>]>;
type PrivyEmbeddedWalletAccount = PrivyEthereumEmbeddedWalletAccount | PrivySolanaEmbeddedWalletAccount | PrivyBitcoinSegwitEmbeddedWalletAccount | PrivyBitcoinTaprootEmbeddedWalletAccount;

declare const CurveType: z.ZodEnum<["secp256k1", "ed25519"]>;
type CurveType = z.infer<typeof CurveType>;
/**
 * examples of valid HDPaths:
 *
 * "m"                   // Just master key
 * "M/0"                 // Upper case M is also valid
 * "m/0'/1'/2'"         // All hardened derivation
 * "m/0/1/2"            // All non-hardened
 * "m/44'/60'/0'/0/0"    // Standard Ethereum path
 * "m/44'/501'/0'/0'"    // Standard Solana path
 * "m/84'/0'/0'/0/0"     // Bitcoin Native SegWit
 *
 * For more info on HDPaths, see:
 * https://learnmeabitcoin.com/technical/keys/hd-wallets/derivation-paths/
 */
declare const HDPath: z.ZodString;
type HDPath = z.infer<typeof HDPath>;
declare const ECDSA: z.ZodLiteral<"ECDSA">;
declare const EdDSA: z.ZodLiteral<"EdDSA">;
declare const SigningAlgorithm: z.ZodUnion<[z.ZodLiteral<"ECDSA">, z.ZodLiteral<"EdDSA">]>;
type SigningAlgorithm = z.infer<typeof SigningAlgorithm>;
/** A valid CAIP-2 chain ID */
declare const CAIP2: z.ZodString;
declare const AuthorizationKeyRole: z.ZodNullable<z.ZodEnum<["root", "manager", "delegated-actions"]>>;
type AuthorizationKeyRole = z.infer<typeof AuthorizationKeyRole>;
declare const WalletApiSolanaSignTransactionRpcInput: z.ZodObject<{
    /** RPC method to execute with the wallet. */
    method: z.ZodLiteral<"signTransaction">;
    /** Parameters for the RPC method.  */
    params: z.ZodObject<{
        /** Serialized transaction object to sign with the wallet. Must be encoded per the scheme in `encoding`. */
        transaction: z.ZodString;
        /** Encoding scheme for the transaction. */
        encoding: z.ZodLiteral<"base64">;
    }, "strict", z.ZodTypeAny, {
        transaction: string;
        encoding: "base64";
    }, {
        transaction: string;
        encoding: "base64";
    }>;
} & {
    /** Address of the wallet. */
    address: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    /** Chain type of the wallet. */
    chain_type: z.ZodOptional<z.ZodLiteral<"solana">>;
    /** The ID of the wallet. This is legacy, we now pull this from the URL path, but this needs to be in the schema so we can enforce errors on unexpected keys */
    wallet_id: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    params: {
        transaction: string;
        encoding: "base64";
    };
    method: "signTransaction";
    address?: string | undefined;
    chain_type?: "solana" | undefined;
    wallet_id?: string | undefined;
}, {
    params: {
        transaction: string;
        encoding: "base64";
    };
    method: "signTransaction";
    address?: string | undefined;
    chain_type?: "solana" | undefined;
    wallet_id?: string | undefined;
}>;
declare const WalletApiSolanaSignAndSendTransactionRpcInput: z.ZodObject<{
    /** RPC method to execute with the wallet. */
    method: z.ZodLiteral<"signAndSendTransaction">;
    /** The CAIP-2 chain id to send the transaction on. */
    caip2: z.ZodString;
    /** Parameters for the RPC method.  */
    params: z.ZodObject<{
        /** Serialized transaction object to sign and send with the wallet. Must be encoded per the scheme in `encoding`. */
        transaction: z.ZodString;
        /** Encoding scheme for the transaction. */
        encoding: z.ZodLiteral<"base64">;
    }, "strict", z.ZodTypeAny, {
        transaction: string;
        encoding: "base64";
    }, {
        transaction: string;
        encoding: "base64";
    }>;
} & {
    /** Address of the wallet. */
    address: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    /** Chain type of the wallet. */
    chain_type: z.ZodOptional<z.ZodLiteral<"solana">>;
    /** The ID of the wallet. This is legacy, we now pull this from the URL path, but this needs to be in the schema so we can enforce errors on unexpected keys */
    wallet_id: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    params: {
        transaction: string;
        encoding: "base64";
    };
    method: "signAndSendTransaction";
    caip2: string;
    address?: string | undefined;
    chain_type?: "solana" | undefined;
    wallet_id?: string | undefined;
}, {
    params: {
        transaction: string;
        encoding: "base64";
    };
    method: "signAndSendTransaction";
    caip2: string;
    address?: string | undefined;
    chain_type?: "solana" | undefined;
    wallet_id?: string | undefined;
}>;
type WalletApiSolanaSignAndSendTransactionRpcInputType = z.infer<typeof WalletApiSolanaSignAndSendTransactionRpcInput>;
declare const WalletApiSolanaSignMessageRpcInput: z.ZodObject<{
    /** RPC method to execute with the wallet. */
    method: z.ZodLiteral<"signMessage">;
    /** Parameters for the RPC method.  */
    params: z.ZodObject<{
        /** Message to sign with the wallet. Must be encoded per the scheme in `encoding`. */
        message: z.ZodString;
        /** Encoding scheme for the message. */
        encoding: z.ZodLiteral<"base64">;
    }, "strict", z.ZodTypeAny, {
        message: string;
        encoding: "base64";
    }, {
        message: string;
        encoding: "base64";
    }>;
} & {
    /** Address of the wallet. */
    address: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    /** Chain type of the wallet. */
    chain_type: z.ZodOptional<z.ZodLiteral<"solana">>;
    /** The ID of the wallet. This is legacy, we now pull this from the URL path, but this needs to be in the schema so we can enforce errors on unexpected keys */
    wallet_id: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    params: {
        message: string;
        encoding: "base64";
    };
    method: "signMessage";
    address?: string | undefined;
    chain_type?: "solana" | undefined;
    wallet_id?: string | undefined;
}, {
    params: {
        message: string;
        encoding: "base64";
    };
    method: "signMessage";
    address?: string | undefined;
    chain_type?: "solana" | undefined;
    wallet_id?: string | undefined;
}>;
declare const Hex: z.ZodEffects<z.ZodString, string, string>;
/**
 * @deprecated use {@link Hex} instead
 */
declare const Hash: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>;
declare const Quantity: z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>;
type QuantityType = z.infer<typeof Quantity>;
declare const UnsignedEthereumTransaction: z.ZodObject<{
    /** The address the transaction is sent from. Must be hexadecimal formatted. */
    from: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    /** Destination address of the transaction. */
    to: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    /** The chain ID of network your transaction will  be sent on (hexadecimal or number). */
    chain_id: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
    /** (optional) The nonce to be used for the transaction (hexadecimal or number). */
    nonce: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
    /** (optional) Data to send to the receiving address, especially when calling smart contracts. Must be hexadecimal formatted. */
    data: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    /** (optional) The value (in wei) be sent with the transaction (hexadecimal or number). */
    value: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
    /** (optional) The EIP-2718 transction type (e.g. `2` for EIP-1559 transactions). */
    type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0>, z.ZodLiteral<1>, z.ZodLiteral<2>]>>;
    /** (optional) The max units of gas that can be used by this transaction (hexadecimal or number). */
    gas_limit: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
    /** (optional) The price (in wei) per unit of gas for this transaction (hexadecimal or number), for use in non EIP-1559 transactions (type 0 or 1). */
    gas_price: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
    /** (optional) The maxFeePerGas (hexadecimal or number) to be used in this transaction, for use in EIP-1559 (type 2) transactions. */
    max_fee_per_gas: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
    /** (optional) The maxPriorityFeePerGas (hexadecimal or number) to be used in this transaction, for use in EIP-1559 (type 2) transactions. */
    max_priority_fee_per_gas: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
}, "strict", z.ZodTypeAny, {
    type?: 0 | 1 | 2 | undefined;
    value?: string | number | undefined;
    nonce?: string | number | undefined;
    chain_id?: string | number | undefined;
    from?: string | undefined;
    to?: string | undefined;
    data?: string | undefined;
    gas_limit?: string | number | undefined;
    gas_price?: string | number | undefined;
    max_fee_per_gas?: string | number | undefined;
    max_priority_fee_per_gas?: string | number | undefined;
}, {
    type?: 0 | 1 | 2 | undefined;
    value?: string | number | undefined;
    nonce?: string | number | undefined;
    chain_id?: string | number | undefined;
    from?: string | undefined;
    to?: string | undefined;
    data?: string | undefined;
    gas_limit?: string | number | undefined;
    gas_price?: string | number | undefined;
    max_fee_per_gas?: string | number | undefined;
    max_priority_fee_per_gas?: string | number | undefined;
}>;
type UnsignedEthereumTransactionType = z.infer<typeof UnsignedEthereumTransaction>;
declare const WalletApiEthereumSignTransactionRpcInput: z.ZodObject<{
    /** RPC method to execute with the wallet. */
    method: z.ZodLiteral<"eth_signTransaction">;
    /** Parameters for the RPC method.  */
    params: z.ZodObject<{
        /** Transaction object to sign with the wallet. */
        transaction: z.ZodObject<{
            /** The address the transaction is sent from. Must be hexadecimal formatted. */
            from: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
            /** Destination address of the transaction. */
            to: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
            /** The chain ID of network your transaction will  be sent on (hexadecimal or number). */
            chain_id: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The nonce to be used for the transaction (hexadecimal or number). */
            nonce: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) Data to send to the receiving address, especially when calling smart contracts. Must be hexadecimal formatted. */
            data: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
            /** (optional) The value (in wei) be sent with the transaction (hexadecimal or number). */
            value: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The EIP-2718 transction type (e.g. `2` for EIP-1559 transactions). */
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0>, z.ZodLiteral<1>, z.ZodLiteral<2>]>>;
            /** (optional) The max units of gas that can be used by this transaction (hexadecimal or number). */
            gas_limit: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The price (in wei) per unit of gas for this transaction (hexadecimal or number), for use in non EIP-1559 transactions (type 0 or 1). */
            gas_price: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The maxFeePerGas (hexadecimal or number) to be used in this transaction, for use in EIP-1559 (type 2) transactions. */
            max_fee_per_gas: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The maxPriorityFeePerGas (hexadecimal or number) to be used in this transaction, for use in EIP-1559 (type 2) transactions. */
            max_priority_fee_per_gas: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
        }, "strict", z.ZodTypeAny, {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        }, {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        }>;
    }, "strict", z.ZodTypeAny, {
        transaction: {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        };
    }, {
        transaction: {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        };
    }>;
} & {
    /** Address of the wallet. */
    address: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    /** Chain type of the wallet. */
    chain_type: z.ZodOptional<z.ZodLiteral<"ethereum">>;
    /** The ID of the wallet. This is legacy, we now pull this from the URL path, but this needs to be in the schema so we can enforce errors on unexpected keys */
    wallet_id: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    params: {
        transaction: {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        };
    };
    method: "eth_signTransaction";
    address?: string | undefined;
    chain_type?: "ethereum" | undefined;
    wallet_id?: string | undefined;
}, {
    params: {
        transaction: {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        };
    };
    method: "eth_signTransaction";
    address?: string | undefined;
    chain_type?: "ethereum" | undefined;
    wallet_id?: string | undefined;
}>;
declare const WalletApiEthereumSendTransactionRpcInput: z.ZodObject<{
    /** RPC method to execute with the wallet. */
    method: z.ZodLiteral<"eth_sendTransaction">;
    /** The CAIP-2 chain id to send the transaction on. */
    caip2: z.ZodString;
    /** Parameters for the RPC method.  */
    params: z.ZodObject<{
        /** Transaction object to sign with the wallet. */
        transaction: z.ZodObject<{
            /** The address the transaction is sent from. Must be hexadecimal formatted. */
            from: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
            /** Destination address of the transaction. */
            to: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
            /** The chain ID of network your transaction will  be sent on (hexadecimal or number). */
            chain_id: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The nonce to be used for the transaction (hexadecimal or number). */
            nonce: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) Data to send to the receiving address, especially when calling smart contracts. Must be hexadecimal formatted. */
            data: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
            /** (optional) The value (in wei) be sent with the transaction (hexadecimal or number). */
            value: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The EIP-2718 transction type (e.g. `2` for EIP-1559 transactions). */
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0>, z.ZodLiteral<1>, z.ZodLiteral<2>]>>;
            /** (optional) The max units of gas that can be used by this transaction (hexadecimal or number). */
            gas_limit: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The price (in wei) per unit of gas for this transaction (hexadecimal or number), for use in non EIP-1559 transactions (type 0 or 1). */
            gas_price: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The maxFeePerGas (hexadecimal or number) to be used in this transaction, for use in EIP-1559 (type 2) transactions. */
            max_fee_per_gas: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The maxPriorityFeePerGas (hexadecimal or number) to be used in this transaction, for use in EIP-1559 (type 2) transactions. */
            max_priority_fee_per_gas: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
        }, "strict", z.ZodTypeAny, {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        }, {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        }>;
    }, "strict", z.ZodTypeAny, {
        transaction: {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        };
    }, {
        transaction: {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        };
    }>;
} & {
    /** Address of the wallet. */
    address: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    /** Chain type of the wallet. */
    chain_type: z.ZodOptional<z.ZodLiteral<"ethereum">>;
    /** The ID of the wallet. This is legacy, we now pull this from the URL path, but this needs to be in the schema so we can enforce errors on unexpected keys */
    wallet_id: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    params: {
        transaction: {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        };
    };
    method: "eth_sendTransaction";
    caip2: string;
    address?: string | undefined;
    chain_type?: "ethereum" | undefined;
    wallet_id?: string | undefined;
}, {
    params: {
        transaction: {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        };
    };
    method: "eth_sendTransaction";
    caip2: string;
    address?: string | undefined;
    chain_type?: "ethereum" | undefined;
    wallet_id?: string | undefined;
}>;
type WalletApiEthereumSendTransactionRpcInputType = z.infer<typeof WalletApiEthereumSendTransactionRpcInput>;
declare const WalletApiEthereumPersonalSignRpcInputParams: z.ZodObject<{
    /** Message to sign with the wallet. Must be encoded per the scheme in `encoding`. */
    message: z.ZodString;
    /** Encoding scheme for the message (utf-8 for plaintext, hex for raw bytes). */
    encoding: z.ZodUnion<[z.ZodLiteral<"utf-8">, z.ZodLiteral<"hex">]>;
}, "strict", z.ZodTypeAny, {
    message: string;
    encoding: "utf-8" | "hex";
}, {
    message: string;
    encoding: "utf-8" | "hex";
}>;
type WalletApiEthereumPersonalSignRpcInputParamsType = z.infer<typeof WalletApiEthereumPersonalSignRpcInputParams>;
declare const WalletApiEthereumPersonalSignRpcInput: z.ZodObject<{
    /** RPC method to execute with the wallet. */
    method: z.ZodLiteral<"personal_sign">;
    /** Parameters for the RPC method.  */
    params: z.ZodObject<{
        /** Message to sign with the wallet. Must be encoded per the scheme in `encoding`. */
        message: z.ZodString;
        /** Encoding scheme for the message (utf-8 for plaintext, hex for raw bytes). */
        encoding: z.ZodUnion<[z.ZodLiteral<"utf-8">, z.ZodLiteral<"hex">]>;
    }, "strict", z.ZodTypeAny, {
        message: string;
        encoding: "utf-8" | "hex";
    }, {
        message: string;
        encoding: "utf-8" | "hex";
    }>;
} & {
    /** Address of the wallet. */
    address: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    /** Chain type of the wallet. */
    chain_type: z.ZodOptional<z.ZodLiteral<"ethereum">>;
    /** The ID of the wallet. This is legacy, we now pull this from the URL path, but this needs to be in the schema so we can enforce errors on unexpected keys */
    wallet_id: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    params: {
        message: string;
        encoding: "utf-8" | "hex";
    };
    method: "personal_sign";
    address?: string | undefined;
    chain_type?: "ethereum" | undefined;
    wallet_id?: string | undefined;
}, {
    params: {
        message: string;
        encoding: "utf-8" | "hex";
    };
    method: "personal_sign";
    address?: string | undefined;
    chain_type?: "ethereum" | undefined;
    wallet_id?: string | undefined;
}>;
declare const WalletApiEthereumSecp256k1SignRpcInput: z.ZodObject<{
    /** RPC method to execute with the wallet. */
    method: z.ZodLiteral<"secp256k1_sign">;
    /** Parameters for the RPC method.  */
    params: z.ZodObject<{
        /** The hash to sign. */
        hash: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>;
    }, "strict", z.ZodTypeAny, {
        hash: `0x${string}`;
    }, {
        hash: string;
    }>;
} & {
    /** Address of the wallet. */
    address: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    /** Chain type of the wallet. */
    chain_type: z.ZodOptional<z.ZodLiteral<"ethereum">>;
    /** The ID of the wallet. This is legacy, we now pull this from the URL path, but this needs to be in the schema so we can enforce errors on unexpected keys */
    wallet_id: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    params: {
        hash: `0x${string}`;
    };
    method: "secp256k1_sign";
    address?: string | undefined;
    chain_type?: "ethereum" | undefined;
    wallet_id?: string | undefined;
}, {
    params: {
        hash: string;
    };
    method: "secp256k1_sign";
    address?: string | undefined;
    chain_type?: "ethereum" | undefined;
    wallet_id?: string | undefined;
}>;
declare const WalletApiRawSignInput: z.ZodObject<{
    /** Parameters for the RPC method. */
    params: z.ZodObject<{
        /** The hash to sign. */
        hash: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>;
    }, "strict", z.ZodTypeAny, {
        hash: `0x${string}`;
    }, {
        hash: string;
    }>;
}, "strict", z.ZodTypeAny, {
    params: {
        hash: `0x${string}`;
    };
}, {
    params: {
        hash: string;
    };
}>;
type WalletApiRawSignInputType = z.infer<typeof WalletApiRawSignInput>;
declare const TypedDataDomainInputParams: z.ZodRecord<z.ZodString, z.ZodAny>;
type TypedDataDomainInputParamsType = z.infer<typeof TypedDataDomainInputParams>;
declare const TypedDataTypesInputParams: z.ZodEffects<z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
    name: z.ZodString;
    type: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    name: string;
}, {
    type: string;
    name: string;
}>, "many">>, Record<string, {
    type: string;
    name: string;
}[]>, Record<string, {
    type: string;
    name: string;
}[]>>;
type TypedDataTypesInputParamsType = z.infer<typeof TypedDataTypesInputParams>;
declare const WalletApiEthereumSignTypedDataRpcInput: z.ZodObject<{
    /** RPC method to execute with the wallet. */
    method: z.ZodLiteral<"eth_signTypedData_v4">;
    /** Parameters for the RPC method.  */
    params: z.ZodObject<{
        /** The JSON typed data to sign with the wallet. */
        typed_data: z.ZodObject<{
            domain: z.ZodRecord<z.ZodString, z.ZodAny>;
            types: z.ZodEffects<z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
                name: string;
            }, {
                type: string;
                name: string;
            }>, "many">>, Record<string, {
                type: string;
                name: string;
            }[]>, Record<string, {
                type: string;
                name: string;
            }[]>>;
            message: z.ZodRecord<z.ZodString, z.ZodAny>;
            primary_type: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            message: Record<string, any>;
            domain: Record<string, any>;
            types: Record<string, {
                type: string;
                name: string;
            }[]>;
            primary_type: string;
        }, {
            message: Record<string, any>;
            domain: Record<string, any>;
            types: Record<string, {
                type: string;
                name: string;
            }[]>;
            primary_type: string;
        }>;
    }, "strict", z.ZodTypeAny, {
        typed_data: {
            message: Record<string, any>;
            domain: Record<string, any>;
            types: Record<string, {
                type: string;
                name: string;
            }[]>;
            primary_type: string;
        };
    }, {
        typed_data: {
            message: Record<string, any>;
            domain: Record<string, any>;
            types: Record<string, {
                type: string;
                name: string;
            }[]>;
            primary_type: string;
        };
    }>;
} & {
    /** Address of the wallet. */
    address: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    /** Chain type of the wallet. */
    chain_type: z.ZodOptional<z.ZodLiteral<"ethereum">>;
    /** The ID of the wallet. This is legacy, we now pull this from the URL path, but this needs to be in the schema so we can enforce errors on unexpected keys */
    wallet_id: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    params: {
        typed_data: {
            message: Record<string, any>;
            domain: Record<string, any>;
            types: Record<string, {
                type: string;
                name: string;
            }[]>;
            primary_type: string;
        };
    };
    method: "eth_signTypedData_v4";
    address?: string | undefined;
    chain_type?: "ethereum" | undefined;
    wallet_id?: string | undefined;
}, {
    params: {
        typed_data: {
            message: Record<string, any>;
            domain: Record<string, any>;
            types: Record<string, {
                type: string;
                name: string;
            }[]>;
            primary_type: string;
        };
    };
    method: "eth_signTypedData_v4";
    address?: string | undefined;
    chain_type?: "ethereum" | undefined;
    wallet_id?: string | undefined;
}>;
declare const WalletApiExportPrivateKeyRpcInput: z.ZodObject<{
    address: z.ZodString;
    /** RPC method to export the private key with the wallet. */
    method: z.ZodLiteral<"exportPrivateKey">;
    /** Parameters for the RPC method. */
    params: z.ZodObject<{
        encryption_type: z.ZodLiteral<"HPKE">;
        recipient_public_key: z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodString]>;
    }, "strict", z.ZodTypeAny, {
        encryption_type: "HPKE";
        recipient_public_key: string;
    }, {
        encryption_type: "HPKE";
        recipient_public_key: string;
    }>;
}, "strict", z.ZodTypeAny, {
    params: {
        encryption_type: "HPKE";
        recipient_public_key: string;
    };
    method: "exportPrivateKey";
    address: string;
}, {
    params: {
        encryption_type: "HPKE";
        recipient_public_key: string;
    };
    method: "exportPrivateKey";
    address: string;
}>;
type WalletApiExportPrivateKeyRpcInputType = z.infer<typeof WalletApiExportPrivateKeyRpcInput>;
declare const WalletApiEthereumRpcInput: z.ZodDiscriminatedUnion<"method", [z.ZodObject<{
    /** RPC method to execute with the wallet. */
    method: z.ZodLiteral<"eth_signTransaction">;
    /** Parameters for the RPC method.  */
    params: z.ZodObject<{
        /** Transaction object to sign with the wallet. */
        transaction: z.ZodObject<{
            /** The address the transaction is sent from. Must be hexadecimal formatted. */
            from: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
            /** Destination address of the transaction. */
            to: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
            /** The chain ID of network your transaction will  be sent on (hexadecimal or number). */
            chain_id: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The nonce to be used for the transaction (hexadecimal or number). */
            nonce: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) Data to send to the receiving address, especially when calling smart contracts. Must be hexadecimal formatted. */
            data: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
            /** (optional) The value (in wei) be sent with the transaction (hexadecimal or number). */
            value: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The EIP-2718 transction type (e.g. `2` for EIP-1559 transactions). */
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0>, z.ZodLiteral<1>, z.ZodLiteral<2>]>>;
            /** (optional) The max units of gas that can be used by this transaction (hexadecimal or number). */
            gas_limit: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The price (in wei) per unit of gas for this transaction (hexadecimal or number), for use in non EIP-1559 transactions (type 0 or 1). */
            gas_price: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The maxFeePerGas (hexadecimal or number) to be used in this transaction, for use in EIP-1559 (type 2) transactions. */
            max_fee_per_gas: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The maxPriorityFeePerGas (hexadecimal or number) to be used in this transaction, for use in EIP-1559 (type 2) transactions. */
            max_priority_fee_per_gas: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
        }, "strict", z.ZodTypeAny, {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        }, {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        }>;
    }, "strict", z.ZodTypeAny, {
        transaction: {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        };
    }, {
        transaction: {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        };
    }>;
} & {
    /** Address of the wallet. */
    address: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    /** Chain type of the wallet. */
    chain_type: z.ZodOptional<z.ZodLiteral<"ethereum">>;
    /** The ID of the wallet. This is legacy, we now pull this from the URL path, but this needs to be in the schema so we can enforce errors on unexpected keys */
    wallet_id: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    params: {
        transaction: {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        };
    };
    method: "eth_signTransaction";
    address?: string | undefined;
    chain_type?: "ethereum" | undefined;
    wallet_id?: string | undefined;
}, {
    params: {
        transaction: {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        };
    };
    method: "eth_signTransaction";
    address?: string | undefined;
    chain_type?: "ethereum" | undefined;
    wallet_id?: string | undefined;
}>, z.ZodObject<{
    /** RPC method to execute with the wallet. */
    method: z.ZodLiteral<"eth_sendTransaction">;
    /** The CAIP-2 chain id to send the transaction on. */
    caip2: z.ZodString;
    /** Parameters for the RPC method.  */
    params: z.ZodObject<{
        /** Transaction object to sign with the wallet. */
        transaction: z.ZodObject<{
            /** The address the transaction is sent from. Must be hexadecimal formatted. */
            from: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
            /** Destination address of the transaction. */
            to: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
            /** The chain ID of network your transaction will  be sent on (hexadecimal or number). */
            chain_id: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The nonce to be used for the transaction (hexadecimal or number). */
            nonce: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) Data to send to the receiving address, especially when calling smart contracts. Must be hexadecimal formatted. */
            data: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
            /** (optional) The value (in wei) be sent with the transaction (hexadecimal or number). */
            value: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The EIP-2718 transction type (e.g. `2` for EIP-1559 transactions). */
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0>, z.ZodLiteral<1>, z.ZodLiteral<2>]>>;
            /** (optional) The max units of gas that can be used by this transaction (hexadecimal or number). */
            gas_limit: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The price (in wei) per unit of gas for this transaction (hexadecimal or number), for use in non EIP-1559 transactions (type 0 or 1). */
            gas_price: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The maxFeePerGas (hexadecimal or number) to be used in this transaction, for use in EIP-1559 (type 2) transactions. */
            max_fee_per_gas: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The maxPriorityFeePerGas (hexadecimal or number) to be used in this transaction, for use in EIP-1559 (type 2) transactions. */
            max_priority_fee_per_gas: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
        }, "strict", z.ZodTypeAny, {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        }, {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        }>;
    }, "strict", z.ZodTypeAny, {
        transaction: {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        };
    }, {
        transaction: {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        };
    }>;
} & {
    /** Address of the wallet. */
    address: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    /** Chain type of the wallet. */
    chain_type: z.ZodOptional<z.ZodLiteral<"ethereum">>;
    /** The ID of the wallet. This is legacy, we now pull this from the URL path, but this needs to be in the schema so we can enforce errors on unexpected keys */
    wallet_id: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    params: {
        transaction: {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        };
    };
    method: "eth_sendTransaction";
    caip2: string;
    address?: string | undefined;
    chain_type?: "ethereum" | undefined;
    wallet_id?: string | undefined;
}, {
    params: {
        transaction: {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        };
    };
    method: "eth_sendTransaction";
    caip2: string;
    address?: string | undefined;
    chain_type?: "ethereum" | undefined;
    wallet_id?: string | undefined;
}>, z.ZodObject<{
    /** RPC method to execute with the wallet. */
    method: z.ZodLiteral<"personal_sign">;
    /** Parameters for the RPC method.  */
    params: z.ZodObject<{
        /** Message to sign with the wallet. Must be encoded per the scheme in `encoding`. */
        message: z.ZodString;
        /** Encoding scheme for the message (utf-8 for plaintext, hex for raw bytes). */
        encoding: z.ZodUnion<[z.ZodLiteral<"utf-8">, z.ZodLiteral<"hex">]>;
    }, "strict", z.ZodTypeAny, {
        message: string;
        encoding: "utf-8" | "hex";
    }, {
        message: string;
        encoding: "utf-8" | "hex";
    }>;
} & {
    /** Address of the wallet. */
    address: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    /** Chain type of the wallet. */
    chain_type: z.ZodOptional<z.ZodLiteral<"ethereum">>;
    /** The ID of the wallet. This is legacy, we now pull this from the URL path, but this needs to be in the schema so we can enforce errors on unexpected keys */
    wallet_id: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    params: {
        message: string;
        encoding: "utf-8" | "hex";
    };
    method: "personal_sign";
    address?: string | undefined;
    chain_type?: "ethereum" | undefined;
    wallet_id?: string | undefined;
}, {
    params: {
        message: string;
        encoding: "utf-8" | "hex";
    };
    method: "personal_sign";
    address?: string | undefined;
    chain_type?: "ethereum" | undefined;
    wallet_id?: string | undefined;
}>, z.ZodObject<{
    /** RPC method to execute with the wallet. */
    method: z.ZodLiteral<"eth_signTypedData_v4">;
    /** Parameters for the RPC method.  */
    params: z.ZodObject<{
        /** The JSON typed data to sign with the wallet. */
        typed_data: z.ZodObject<{
            domain: z.ZodRecord<z.ZodString, z.ZodAny>;
            types: z.ZodEffects<z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
                name: string;
            }, {
                type: string;
                name: string;
            }>, "many">>, Record<string, {
                type: string;
                name: string;
            }[]>, Record<string, {
                type: string;
                name: string;
            }[]>>;
            message: z.ZodRecord<z.ZodString, z.ZodAny>;
            primary_type: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            message: Record<string, any>;
            domain: Record<string, any>;
            types: Record<string, {
                type: string;
                name: string;
            }[]>;
            primary_type: string;
        }, {
            message: Record<string, any>;
            domain: Record<string, any>;
            types: Record<string, {
                type: string;
                name: string;
            }[]>;
            primary_type: string;
        }>;
    }, "strict", z.ZodTypeAny, {
        typed_data: {
            message: Record<string, any>;
            domain: Record<string, any>;
            types: Record<string, {
                type: string;
                name: string;
            }[]>;
            primary_type: string;
        };
    }, {
        typed_data: {
            message: Record<string, any>;
            domain: Record<string, any>;
            types: Record<string, {
                type: string;
                name: string;
            }[]>;
            primary_type: string;
        };
    }>;
} & {
    /** Address of the wallet. */
    address: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    /** Chain type of the wallet. */
    chain_type: z.ZodOptional<z.ZodLiteral<"ethereum">>;
    /** The ID of the wallet. This is legacy, we now pull this from the URL path, but this needs to be in the schema so we can enforce errors on unexpected keys */
    wallet_id: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    params: {
        typed_data: {
            message: Record<string, any>;
            domain: Record<string, any>;
            types: Record<string, {
                type: string;
                name: string;
            }[]>;
            primary_type: string;
        };
    };
    method: "eth_signTypedData_v4";
    address?: string | undefined;
    chain_type?: "ethereum" | undefined;
    wallet_id?: string | undefined;
}, {
    params: {
        typed_data: {
            message: Record<string, any>;
            domain: Record<string, any>;
            types: Record<string, {
                type: string;
                name: string;
            }[]>;
            primary_type: string;
        };
    };
    method: "eth_signTypedData_v4";
    address?: string | undefined;
    chain_type?: "ethereum" | undefined;
    wallet_id?: string | undefined;
}>, z.ZodObject<{
    /** RPC method to execute with the wallet. */
    method: z.ZodLiteral<"secp256k1_sign">;
    /** Parameters for the RPC method.  */
    params: z.ZodObject<{
        /** The hash to sign. */
        hash: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>;
    }, "strict", z.ZodTypeAny, {
        hash: `0x${string}`;
    }, {
        hash: string;
    }>;
} & {
    /** Address of the wallet. */
    address: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    /** Chain type of the wallet. */
    chain_type: z.ZodOptional<z.ZodLiteral<"ethereum">>;
    /** The ID of the wallet. This is legacy, we now pull this from the URL path, but this needs to be in the schema so we can enforce errors on unexpected keys */
    wallet_id: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    params: {
        hash: `0x${string}`;
    };
    method: "secp256k1_sign";
    address?: string | undefined;
    chain_type?: "ethereum" | undefined;
    wallet_id?: string | undefined;
}, {
    params: {
        hash: string;
    };
    method: "secp256k1_sign";
    address?: string | undefined;
    chain_type?: "ethereum" | undefined;
    wallet_id?: string | undefined;
}>]>;
declare const WalletApiSolanaRpcInput: z.ZodDiscriminatedUnion<"method", [z.ZodObject<{
    /** RPC method to execute with the wallet. */
    method: z.ZodLiteral<"signTransaction">;
    /** Parameters for the RPC method.  */
    params: z.ZodObject<{
        /** Serialized transaction object to sign with the wallet. Must be encoded per the scheme in `encoding`. */
        transaction: z.ZodString;
        /** Encoding scheme for the transaction. */
        encoding: z.ZodLiteral<"base64">;
    }, "strict", z.ZodTypeAny, {
        transaction: string;
        encoding: "base64";
    }, {
        transaction: string;
        encoding: "base64";
    }>;
} & {
    /** Address of the wallet. */
    address: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    /** Chain type of the wallet. */
    chain_type: z.ZodOptional<z.ZodLiteral<"solana">>;
    /** The ID of the wallet. This is legacy, we now pull this from the URL path, but this needs to be in the schema so we can enforce errors on unexpected keys */
    wallet_id: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    params: {
        transaction: string;
        encoding: "base64";
    };
    method: "signTransaction";
    address?: string | undefined;
    chain_type?: "solana" | undefined;
    wallet_id?: string | undefined;
}, {
    params: {
        transaction: string;
        encoding: "base64";
    };
    method: "signTransaction";
    address?: string | undefined;
    chain_type?: "solana" | undefined;
    wallet_id?: string | undefined;
}>, z.ZodObject<{
    /** RPC method to execute with the wallet. */
    method: z.ZodLiteral<"signAndSendTransaction">;
    /** The CAIP-2 chain id to send the transaction on. */
    caip2: z.ZodString;
    /** Parameters for the RPC method.  */
    params: z.ZodObject<{
        /** Serialized transaction object to sign and send with the wallet. Must be encoded per the scheme in `encoding`. */
        transaction: z.ZodString;
        /** Encoding scheme for the transaction. */
        encoding: z.ZodLiteral<"base64">;
    }, "strict", z.ZodTypeAny, {
        transaction: string;
        encoding: "base64";
    }, {
        transaction: string;
        encoding: "base64";
    }>;
} & {
    /** Address of the wallet. */
    address: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    /** Chain type of the wallet. */
    chain_type: z.ZodOptional<z.ZodLiteral<"solana">>;
    /** The ID of the wallet. This is legacy, we now pull this from the URL path, but this needs to be in the schema so we can enforce errors on unexpected keys */
    wallet_id: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    params: {
        transaction: string;
        encoding: "base64";
    };
    method: "signAndSendTransaction";
    caip2: string;
    address?: string | undefined;
    chain_type?: "solana" | undefined;
    wallet_id?: string | undefined;
}, {
    params: {
        transaction: string;
        encoding: "base64";
    };
    method: "signAndSendTransaction";
    caip2: string;
    address?: string | undefined;
    chain_type?: "solana" | undefined;
    wallet_id?: string | undefined;
}>, z.ZodObject<{
    /** RPC method to execute with the wallet. */
    method: z.ZodLiteral<"signMessage">;
    /** Parameters for the RPC method.  */
    params: z.ZodObject<{
        /** Message to sign with the wallet. Must be encoded per the scheme in `encoding`. */
        message: z.ZodString;
        /** Encoding scheme for the message. */
        encoding: z.ZodLiteral<"base64">;
    }, "strict", z.ZodTypeAny, {
        message: string;
        encoding: "base64";
    }, {
        message: string;
        encoding: "base64";
    }>;
} & {
    /** Address of the wallet. */
    address: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    /** Chain type of the wallet. */
    chain_type: z.ZodOptional<z.ZodLiteral<"solana">>;
    /** The ID of the wallet. This is legacy, we now pull this from the URL path, but this needs to be in the schema so we can enforce errors on unexpected keys */
    wallet_id: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    params: {
        message: string;
        encoding: "base64";
    };
    method: "signMessage";
    address?: string | undefined;
    chain_type?: "solana" | undefined;
    wallet_id?: string | undefined;
}, {
    params: {
        message: string;
        encoding: "base64";
    };
    method: "signMessage";
    address?: string | undefined;
    chain_type?: "solana" | undefined;
    wallet_id?: string | undefined;
}>]>;
declare const WalletApiRpcInput: z.ZodUnion<[z.ZodDiscriminatedUnion<"method", [z.ZodObject<{
    /** RPC method to execute with the wallet. */
    method: z.ZodLiteral<"eth_signTransaction">;
    /** Parameters for the RPC method.  */
    params: z.ZodObject<{
        /** Transaction object to sign with the wallet. */
        transaction: z.ZodObject<{
            /** The address the transaction is sent from. Must be hexadecimal formatted. */
            from: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
            /** Destination address of the transaction. */
            to: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
            /** The chain ID of network your transaction will  be sent on (hexadecimal or number). */
            chain_id: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The nonce to be used for the transaction (hexadecimal or number). */
            nonce: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) Data to send to the receiving address, especially when calling smart contracts. Must be hexadecimal formatted. */
            data: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
            /** (optional) The value (in wei) be sent with the transaction (hexadecimal or number). */
            value: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The EIP-2718 transction type (e.g. `2` for EIP-1559 transactions). */
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0>, z.ZodLiteral<1>, z.ZodLiteral<2>]>>;
            /** (optional) The max units of gas that can be used by this transaction (hexadecimal or number). */
            gas_limit: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The price (in wei) per unit of gas for this transaction (hexadecimal or number), for use in non EIP-1559 transactions (type 0 or 1). */
            gas_price: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The maxFeePerGas (hexadecimal or number) to be used in this transaction, for use in EIP-1559 (type 2) transactions. */
            max_fee_per_gas: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The maxPriorityFeePerGas (hexadecimal or number) to be used in this transaction, for use in EIP-1559 (type 2) transactions. */
            max_priority_fee_per_gas: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
        }, "strict", z.ZodTypeAny, {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        }, {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        }>;
    }, "strict", z.ZodTypeAny, {
        transaction: {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        };
    }, {
        transaction: {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        };
    }>;
} & {
    /** Address of the wallet. */
    address: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    /** Chain type of the wallet. */
    chain_type: z.ZodOptional<z.ZodLiteral<"ethereum">>;
    /** The ID of the wallet. This is legacy, we now pull this from the URL path, but this needs to be in the schema so we can enforce errors on unexpected keys */
    wallet_id: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    params: {
        transaction: {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        };
    };
    method: "eth_signTransaction";
    address?: string | undefined;
    chain_type?: "ethereum" | undefined;
    wallet_id?: string | undefined;
}, {
    params: {
        transaction: {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        };
    };
    method: "eth_signTransaction";
    address?: string | undefined;
    chain_type?: "ethereum" | undefined;
    wallet_id?: string | undefined;
}>, z.ZodObject<{
    /** RPC method to execute with the wallet. */
    method: z.ZodLiteral<"eth_sendTransaction">;
    /** The CAIP-2 chain id to send the transaction on. */
    caip2: z.ZodString;
    /** Parameters for the RPC method.  */
    params: z.ZodObject<{
        /** Transaction object to sign with the wallet. */
        transaction: z.ZodObject<{
            /** The address the transaction is sent from. Must be hexadecimal formatted. */
            from: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
            /** Destination address of the transaction. */
            to: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
            /** The chain ID of network your transaction will  be sent on (hexadecimal or number). */
            chain_id: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The nonce to be used for the transaction (hexadecimal or number). */
            nonce: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) Data to send to the receiving address, especially when calling smart contracts. Must be hexadecimal formatted. */
            data: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
            /** (optional) The value (in wei) be sent with the transaction (hexadecimal or number). */
            value: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The EIP-2718 transction type (e.g. `2` for EIP-1559 transactions). */
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0>, z.ZodLiteral<1>, z.ZodLiteral<2>]>>;
            /** (optional) The max units of gas that can be used by this transaction (hexadecimal or number). */
            gas_limit: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The price (in wei) per unit of gas for this transaction (hexadecimal or number), for use in non EIP-1559 transactions (type 0 or 1). */
            gas_price: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The maxFeePerGas (hexadecimal or number) to be used in this transaction, for use in EIP-1559 (type 2) transactions. */
            max_fee_per_gas: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The maxPriorityFeePerGas (hexadecimal or number) to be used in this transaction, for use in EIP-1559 (type 2) transactions. */
            max_priority_fee_per_gas: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
        }, "strict", z.ZodTypeAny, {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        }, {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        }>;
    }, "strict", z.ZodTypeAny, {
        transaction: {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        };
    }, {
        transaction: {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        };
    }>;
} & {
    /** Address of the wallet. */
    address: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    /** Chain type of the wallet. */
    chain_type: z.ZodOptional<z.ZodLiteral<"ethereum">>;
    /** The ID of the wallet. This is legacy, we now pull this from the URL path, but this needs to be in the schema so we can enforce errors on unexpected keys */
    wallet_id: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    params: {
        transaction: {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        };
    };
    method: "eth_sendTransaction";
    caip2: string;
    address?: string | undefined;
    chain_type?: "ethereum" | undefined;
    wallet_id?: string | undefined;
}, {
    params: {
        transaction: {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        };
    };
    method: "eth_sendTransaction";
    caip2: string;
    address?: string | undefined;
    chain_type?: "ethereum" | undefined;
    wallet_id?: string | undefined;
}>, z.ZodObject<{
    /** RPC method to execute with the wallet. */
    method: z.ZodLiteral<"personal_sign">;
    /** Parameters for the RPC method.  */
    params: z.ZodObject<{
        /** Message to sign with the wallet. Must be encoded per the scheme in `encoding`. */
        message: z.ZodString;
        /** Encoding scheme for the message (utf-8 for plaintext, hex for raw bytes). */
        encoding: z.ZodUnion<[z.ZodLiteral<"utf-8">, z.ZodLiteral<"hex">]>;
    }, "strict", z.ZodTypeAny, {
        message: string;
        encoding: "utf-8" | "hex";
    }, {
        message: string;
        encoding: "utf-8" | "hex";
    }>;
} & {
    /** Address of the wallet. */
    address: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    /** Chain type of the wallet. */
    chain_type: z.ZodOptional<z.ZodLiteral<"ethereum">>;
    /** The ID of the wallet. This is legacy, we now pull this from the URL path, but this needs to be in the schema so we can enforce errors on unexpected keys */
    wallet_id: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    params: {
        message: string;
        encoding: "utf-8" | "hex";
    };
    method: "personal_sign";
    address?: string | undefined;
    chain_type?: "ethereum" | undefined;
    wallet_id?: string | undefined;
}, {
    params: {
        message: string;
        encoding: "utf-8" | "hex";
    };
    method: "personal_sign";
    address?: string | undefined;
    chain_type?: "ethereum" | undefined;
    wallet_id?: string | undefined;
}>, z.ZodObject<{
    /** RPC method to execute with the wallet. */
    method: z.ZodLiteral<"eth_signTypedData_v4">;
    /** Parameters for the RPC method.  */
    params: z.ZodObject<{
        /** The JSON typed data to sign with the wallet. */
        typed_data: z.ZodObject<{
            domain: z.ZodRecord<z.ZodString, z.ZodAny>;
            types: z.ZodEffects<z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
                name: string;
            }, {
                type: string;
                name: string;
            }>, "many">>, Record<string, {
                type: string;
                name: string;
            }[]>, Record<string, {
                type: string;
                name: string;
            }[]>>;
            message: z.ZodRecord<z.ZodString, z.ZodAny>;
            primary_type: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            message: Record<string, any>;
            domain: Record<string, any>;
            types: Record<string, {
                type: string;
                name: string;
            }[]>;
            primary_type: string;
        }, {
            message: Record<string, any>;
            domain: Record<string, any>;
            types: Record<string, {
                type: string;
                name: string;
            }[]>;
            primary_type: string;
        }>;
    }, "strict", z.ZodTypeAny, {
        typed_data: {
            message: Record<string, any>;
            domain: Record<string, any>;
            types: Record<string, {
                type: string;
                name: string;
            }[]>;
            primary_type: string;
        };
    }, {
        typed_data: {
            message: Record<string, any>;
            domain: Record<string, any>;
            types: Record<string, {
                type: string;
                name: string;
            }[]>;
            primary_type: string;
        };
    }>;
} & {
    /** Address of the wallet. */
    address: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    /** Chain type of the wallet. */
    chain_type: z.ZodOptional<z.ZodLiteral<"ethereum">>;
    /** The ID of the wallet. This is legacy, we now pull this from the URL path, but this needs to be in the schema so we can enforce errors on unexpected keys */
    wallet_id: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    params: {
        typed_data: {
            message: Record<string, any>;
            domain: Record<string, any>;
            types: Record<string, {
                type: string;
                name: string;
            }[]>;
            primary_type: string;
        };
    };
    method: "eth_signTypedData_v4";
    address?: string | undefined;
    chain_type?: "ethereum" | undefined;
    wallet_id?: string | undefined;
}, {
    params: {
        typed_data: {
            message: Record<string, any>;
            domain: Record<string, any>;
            types: Record<string, {
                type: string;
                name: string;
            }[]>;
            primary_type: string;
        };
    };
    method: "eth_signTypedData_v4";
    address?: string | undefined;
    chain_type?: "ethereum" | undefined;
    wallet_id?: string | undefined;
}>, z.ZodObject<{
    /** RPC method to execute with the wallet. */
    method: z.ZodLiteral<"secp256k1_sign">;
    /** Parameters for the RPC method.  */
    params: z.ZodObject<{
        /** The hash to sign. */
        hash: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, `0x${string}`, string>;
    }, "strict", z.ZodTypeAny, {
        hash: `0x${string}`;
    }, {
        hash: string;
    }>;
} & {
    /** Address of the wallet. */
    address: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    /** Chain type of the wallet. */
    chain_type: z.ZodOptional<z.ZodLiteral<"ethereum">>;
    /** The ID of the wallet. This is legacy, we now pull this from the URL path, but this needs to be in the schema so we can enforce errors on unexpected keys */
    wallet_id: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    params: {
        hash: `0x${string}`;
    };
    method: "secp256k1_sign";
    address?: string | undefined;
    chain_type?: "ethereum" | undefined;
    wallet_id?: string | undefined;
}, {
    params: {
        hash: string;
    };
    method: "secp256k1_sign";
    address?: string | undefined;
    chain_type?: "ethereum" | undefined;
    wallet_id?: string | undefined;
}>]>, z.ZodDiscriminatedUnion<"method", [z.ZodObject<{
    /** RPC method to execute with the wallet. */
    method: z.ZodLiteral<"signTransaction">;
    /** Parameters for the RPC method.  */
    params: z.ZodObject<{
        /** Serialized transaction object to sign with the wallet. Must be encoded per the scheme in `encoding`. */
        transaction: z.ZodString;
        /** Encoding scheme for the transaction. */
        encoding: z.ZodLiteral<"base64">;
    }, "strict", z.ZodTypeAny, {
        transaction: string;
        encoding: "base64";
    }, {
        transaction: string;
        encoding: "base64";
    }>;
} & {
    /** Address of the wallet. */
    address: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    /** Chain type of the wallet. */
    chain_type: z.ZodOptional<z.ZodLiteral<"solana">>;
    /** The ID of the wallet. This is legacy, we now pull this from the URL path, but this needs to be in the schema so we can enforce errors on unexpected keys */
    wallet_id: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    params: {
        transaction: string;
        encoding: "base64";
    };
    method: "signTransaction";
    address?: string | undefined;
    chain_type?: "solana" | undefined;
    wallet_id?: string | undefined;
}, {
    params: {
        transaction: string;
        encoding: "base64";
    };
    method: "signTransaction";
    address?: string | undefined;
    chain_type?: "solana" | undefined;
    wallet_id?: string | undefined;
}>, z.ZodObject<{
    /** RPC method to execute with the wallet. */
    method: z.ZodLiteral<"signAndSendTransaction">;
    /** The CAIP-2 chain id to send the transaction on. */
    caip2: z.ZodString;
    /** Parameters for the RPC method.  */
    params: z.ZodObject<{
        /** Serialized transaction object to sign and send with the wallet. Must be encoded per the scheme in `encoding`. */
        transaction: z.ZodString;
        /** Encoding scheme for the transaction. */
        encoding: z.ZodLiteral<"base64">;
    }, "strict", z.ZodTypeAny, {
        transaction: string;
        encoding: "base64";
    }, {
        transaction: string;
        encoding: "base64";
    }>;
} & {
    /** Address of the wallet. */
    address: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    /** Chain type of the wallet. */
    chain_type: z.ZodOptional<z.ZodLiteral<"solana">>;
    /** The ID of the wallet. This is legacy, we now pull this from the URL path, but this needs to be in the schema so we can enforce errors on unexpected keys */
    wallet_id: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    params: {
        transaction: string;
        encoding: "base64";
    };
    method: "signAndSendTransaction";
    caip2: string;
    address?: string | undefined;
    chain_type?: "solana" | undefined;
    wallet_id?: string | undefined;
}, {
    params: {
        transaction: string;
        encoding: "base64";
    };
    method: "signAndSendTransaction";
    caip2: string;
    address?: string | undefined;
    chain_type?: "solana" | undefined;
    wallet_id?: string | undefined;
}>, z.ZodObject<{
    /** RPC method to execute with the wallet. */
    method: z.ZodLiteral<"signMessage">;
    /** Parameters for the RPC method.  */
    params: z.ZodObject<{
        /** Message to sign with the wallet. Must be encoded per the scheme in `encoding`. */
        message: z.ZodString;
        /** Encoding scheme for the message. */
        encoding: z.ZodLiteral<"base64">;
    }, "strict", z.ZodTypeAny, {
        message: string;
        encoding: "base64";
    }, {
        message: string;
        encoding: "base64";
    }>;
} & {
    /** Address of the wallet. */
    address: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    /** Chain type of the wallet. */
    chain_type: z.ZodOptional<z.ZodLiteral<"solana">>;
    /** The ID of the wallet. This is legacy, we now pull this from the URL path, but this needs to be in the schema so we can enforce errors on unexpected keys */
    wallet_id: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    params: {
        message: string;
        encoding: "base64";
    };
    method: "signMessage";
    address?: string | undefined;
    chain_type?: "solana" | undefined;
    wallet_id?: string | undefined;
}, {
    params: {
        message: string;
        encoding: "base64";
    };
    method: "signMessage";
    address?: string | undefined;
    chain_type?: "solana" | undefined;
    wallet_id?: string | undefined;
}>]>, z.ZodObject<{
    address: z.ZodString;
    /** RPC method to export the private key with the wallet. */
    method: z.ZodLiteral<"exportPrivateKey">;
    /** Parameters for the RPC method. */
    params: z.ZodObject<{
        encryption_type: z.ZodLiteral<"HPKE">;
        recipient_public_key: z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodString]>;
    }, "strict", z.ZodTypeAny, {
        encryption_type: "HPKE";
        recipient_public_key: string;
    }, {
        encryption_type: "HPKE";
        recipient_public_key: string;
    }>;
}, "strict", z.ZodTypeAny, {
    params: {
        encryption_type: "HPKE";
        recipient_public_key: string;
    };
    method: "exportPrivateKey";
    address: string;
}, {
    params: {
        encryption_type: "HPKE";
        recipient_public_key: string;
    };
    method: "exportPrivateKey";
    address: string;
}>]>;
type WalletApiRpcInputType = z.infer<typeof WalletApiRpcInput>;
declare const WalletApiSolanaSignTransactionRpcResponse: z.ZodObject<{
    /** RPC method executed by the wallet */
    method: z.ZodLiteral<"signTransaction">;
    /** Data returned by the RPC method. */
    data: z.ZodObject<{
        /** Signature produced by the wallet. */
        signed_transaction: z.ZodString;
        /** Encoding of the signature */
        encoding: z.ZodLiteral<"base64">;
    }, "strip", z.ZodTypeAny, {
        encoding: "base64";
        signed_transaction: string;
    }, {
        encoding: "base64";
        signed_transaction: string;
    }>;
}, "strip", z.ZodTypeAny, {
    method: "signTransaction";
    data: {
        encoding: "base64";
        signed_transaction: string;
    };
}, {
    method: "signTransaction";
    data: {
        encoding: "base64";
        signed_transaction: string;
    };
}>;
type WalletApiSolanaSignTransactionRpcResponseType = z.infer<typeof WalletApiSolanaSignTransactionRpcResponse>;
declare const WalletApiSolanaSignAndSendTransactionRpcResponse: z.ZodObject<{
    /** RPC method executed by the wallet */
    method: z.ZodLiteral<"signAndSendTransaction">;
    /** Data returned by the RPC method. */
    data: z.ZodOptional<z.ZodObject<{
        transaction_id: z.ZodOptional<z.ZodString>;
        /** Blockchain hash of the sent transaction. */
        hash: z.ZodString;
        /** The CAIP-2 chain id the transaction was sent on. */
        caip2: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        caip2: string;
        hash: string;
        transaction_id?: string | undefined;
    }, {
        caip2: string;
        hash: string;
        transaction_id?: string | undefined;
    }>>;
    /** Error object returned by the RPC method. */
    error: z.ZodOptional<z.ZodObject<{
        /** Error code */
        code: z.ZodString;
        /** Error message */
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        code: string;
        message: string;
    }, {
        code: string;
        message: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    method: "signAndSendTransaction";
    error?: {
        code: string;
        message: string;
    } | undefined;
    data?: {
        caip2: string;
        hash: string;
        transaction_id?: string | undefined;
    } | undefined;
}, {
    method: "signAndSendTransaction";
    error?: {
        code: string;
        message: string;
    } | undefined;
    data?: {
        caip2: string;
        hash: string;
        transaction_id?: string | undefined;
    } | undefined;
}>;
type WalletApiSolanaSignAndSendTransactionRpcResponseType = z.infer<typeof WalletApiSolanaSignAndSendTransactionRpcResponse>;
declare const WalletApiSolanaSignMessageRpcResponse: z.ZodObject<{
    /** RPC method executed by the wallet */
    method: z.ZodLiteral<"signMessage">;
    /** Data returned by the RPC method. */
    data: z.ZodObject<{
        /** Signature produced by the wallet. */
        signature: z.ZodString;
        /** Encoding of the signature */
        encoding: z.ZodLiteral<"base64">;
    }, "strip", z.ZodTypeAny, {
        signature: string;
        encoding: "base64";
    }, {
        signature: string;
        encoding: "base64";
    }>;
}, "strip", z.ZodTypeAny, {
    method: "signMessage";
    data: {
        signature: string;
        encoding: "base64";
    };
}, {
    method: "signMessage";
    data: {
        signature: string;
        encoding: "base64";
    };
}>;
type WalletApiSolanaSignMessageRpcResponseType = z.infer<typeof WalletApiSolanaSignMessageRpcResponse>;
declare const WalletApiEthereumSignTransactionRpcResponse: z.ZodObject<{
    /** RPC method executed by the wallet */
    method: z.ZodLiteral<"eth_signTransaction">;
    /** Data returned by the RPC method. */
    data: z.ZodObject<{
        /** Signature produced by the wallet. */
        signed_transaction: z.ZodString;
        /** Encoding of the signed transaction */
        encoding: z.ZodLiteral<"rlp">;
    }, "strip", z.ZodTypeAny, {
        encoding: "rlp";
        signed_transaction: string;
    }, {
        encoding: "rlp";
        signed_transaction: string;
    }>;
}, "strip", z.ZodTypeAny, {
    method: "eth_signTransaction";
    data: {
        encoding: "rlp";
        signed_transaction: string;
    };
}, {
    method: "eth_signTransaction";
    data: {
        encoding: "rlp";
        signed_transaction: string;
    };
}>;
type WalletApiEthereumSignTransactionRpcResponseType = z.infer<typeof WalletApiEthereumSignTransactionRpcResponse>;
declare const WalletApiEthereumSendTransactionRpcResponse: z.ZodObject<{
    /** RPC method executed by the wallet */
    method: z.ZodLiteral<"eth_sendTransaction">;
    /** Data returned by the RPC method. */
    data: z.ZodOptional<z.ZodObject<{
        transaction_id: z.ZodOptional<z.ZodString>;
        /** Blockchain hash of the sent transaction. */
        hash: z.ZodString;
        /** The CAIP-2 chain id the transaction was sent on. */
        caip2: z.ZodString;
        /** The transaction object. */
        transaction_request: z.ZodOptional<z.ZodObject<{
            /** The address the transaction is sent from. Must be hexadecimal formatted. */
            from: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
            /** Destination address of the transaction. */
            to: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
            /** The chain ID of network your transaction will  be sent on (hexadecimal or number). */
            chain_id: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The nonce to be used for the transaction (hexadecimal or number). */
            nonce: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) Data to send to the receiving address, especially when calling smart contracts. Must be hexadecimal formatted. */
            data: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
            /** (optional) The value (in wei) be sent with the transaction (hexadecimal or number). */
            value: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The EIP-2718 transction type (e.g. `2` for EIP-1559 transactions). */
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0>, z.ZodLiteral<1>, z.ZodLiteral<2>]>>;
            /** (optional) The max units of gas that can be used by this transaction (hexadecimal or number). */
            gas_limit: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The price (in wei) per unit of gas for this transaction (hexadecimal or number), for use in non EIP-1559 transactions (type 0 or 1). */
            gas_price: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The maxFeePerGas (hexadecimal or number) to be used in this transaction, for use in EIP-1559 (type 2) transactions. */
            max_fee_per_gas: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The maxPriorityFeePerGas (hexadecimal or number) to be used in this transaction, for use in EIP-1559 (type 2) transactions. */
            max_priority_fee_per_gas: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
        }, "strict", z.ZodTypeAny, {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        }, {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        caip2: string;
        hash: string;
        transaction_id?: string | undefined;
        transaction_request?: {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        } | undefined;
    }, {
        caip2: string;
        hash: string;
        transaction_id?: string | undefined;
        transaction_request?: {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        } | undefined;
    }>>;
    /** Error object returned by the RPC method. */
    error: z.ZodOptional<z.ZodObject<{
        /** Error code */
        code: z.ZodString;
        /** Error message */
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        code: string;
        message: string;
    }, {
        code: string;
        message: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    method: "eth_sendTransaction";
    error?: {
        code: string;
        message: string;
    } | undefined;
    data?: {
        caip2: string;
        hash: string;
        transaction_id?: string | undefined;
        transaction_request?: {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        } | undefined;
    } | undefined;
}, {
    method: "eth_sendTransaction";
    error?: {
        code: string;
        message: string;
    } | undefined;
    data?: {
        caip2: string;
        hash: string;
        transaction_id?: string | undefined;
        transaction_request?: {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        } | undefined;
    } | undefined;
}>;
type WalletApiEthereumSendTransactionRpcResponseType = z.infer<typeof WalletApiEthereumSendTransactionRpcResponse>;
declare const WalletApiEthereumPersonalSignRpcResponse: z.ZodObject<{
    /** RPC method executed by the wallet */
    method: z.ZodLiteral<"personal_sign">;
    /** Data returned by the RPC method. */
    data: z.ZodObject<{
        /** Signature produced by the wallet. */
        signature: z.ZodString;
        /** Encoding of the signature */
        encoding: z.ZodLiteral<"hex">;
    }, "strip", z.ZodTypeAny, {
        signature: string;
        encoding: "hex";
    }, {
        signature: string;
        encoding: "hex";
    }>;
}, "strip", z.ZodTypeAny, {
    method: "personal_sign";
    data: {
        signature: string;
        encoding: "hex";
    };
}, {
    method: "personal_sign";
    data: {
        signature: string;
        encoding: "hex";
    };
}>;
type WalletApiEthereumPersonalSignRpcResponseType = z.infer<typeof WalletApiEthereumPersonalSignRpcResponse>;
declare const WalletApiEthereumSecp256k1SignRpcResponse: z.ZodObject<{
    /** RPC method executed by the wallet */
    method: z.ZodLiteral<"secp256k1_sign">;
    /** Data returned by the RPC method. */
    data: z.ZodObject<{
        /** Signature produced by the wallet. */
        signature: z.ZodEffects<z.ZodString, string, string>;
        /** Encoding of the signature */
        encoding: z.ZodLiteral<"hex">;
    }, "strip", z.ZodTypeAny, {
        signature: string;
        encoding: "hex";
    }, {
        signature: string;
        encoding: "hex";
    }>;
}, "strip", z.ZodTypeAny, {
    method: "secp256k1_sign";
    data: {
        signature: string;
        encoding: "hex";
    };
}, {
    method: "secp256k1_sign";
    data: {
        signature: string;
        encoding: "hex";
    };
}>;
type WalletApiEthereumSecp256k1SignRpcResponseType = z.infer<typeof WalletApiEthereumSecp256k1SignRpcResponse>;
declare const WalletApiEthereumSignTypedDataRpcResponse: z.ZodObject<{
    /** RPC method executed by the wallet */
    method: z.ZodLiteral<"eth_signTypedData_v4">;
    /** Data returned by the RPC method. */
    data: z.ZodObject<{
        /** Signature produced by the wallet. */
        signature: z.ZodString;
        /** Encoding of the signature */
        encoding: z.ZodLiteral<"hex">;
    }, "strip", z.ZodTypeAny, {
        signature: string;
        encoding: "hex";
    }, {
        signature: string;
        encoding: "hex";
    }>;
}, "strip", z.ZodTypeAny, {
    method: "eth_signTypedData_v4";
    data: {
        signature: string;
        encoding: "hex";
    };
}, {
    method: "eth_signTypedData_v4";
    data: {
        signature: string;
        encoding: "hex";
    };
}>;
type WalletApiEthereumSignTypedDataRpcResponseType = z.infer<typeof WalletApiEthereumSignTypedDataRpcResponse>;
declare const WalletApiExportPrivateKeyRpcResponse: z.ZodObject<{
    /** RPC method executed by the wallet */
    method: z.ZodLiteral<"exportPrivateKey">;
    /** Data returned by the RPC method. */
    data: z.ZodObject<{
        encryption_type: z.ZodLiteral<"HPKE">;
        recipient_public_key: z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodString]>;
    }, "strict", z.ZodTypeAny, {
        encryption_type: "HPKE";
        recipient_public_key: string;
    }, {
        encryption_type: "HPKE";
        recipient_public_key: string;
    }>;
}, "strip", z.ZodTypeAny, {
    method: "exportPrivateKey";
    data: {
        encryption_type: "HPKE";
        recipient_public_key: string;
    };
}, {
    method: "exportPrivateKey";
    data: {
        encryption_type: "HPKE";
        recipient_public_key: string;
    };
}>;
type WalletApiExportPrivateKeyRpcResponseType = z.infer<typeof WalletApiExportPrivateKeyRpcResponse>;
declare const WalletApiRawSignResponse: z.ZodObject<{
    /** Data returned by the RPC method. */
    data: z.ZodOptional<z.ZodObject<{
        signature: z.ZodEffects<z.ZodString, string, string>;
        encoding: z.ZodLiteral<"hex">;
    }, "strip", z.ZodTypeAny, {
        signature: string;
        encoding: "hex";
    }, {
        signature: string;
        encoding: "hex";
    }>>;
    error: z.ZodOptional<z.ZodObject<{
        code: z.ZodString;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        code: string;
        message: string;
    }, {
        code: string;
        message: string;
    }>>;
}, "strict", z.ZodTypeAny, {
    error?: {
        code: string;
        message: string;
    } | undefined;
    data?: {
        signature: string;
        encoding: "hex";
    } | undefined;
}, {
    error?: {
        code: string;
        message: string;
    } | undefined;
    data?: {
        signature: string;
        encoding: "hex";
    } | undefined;
}>;
type WalletApiRawSignResponseType = z.infer<typeof WalletApiRawSignResponse>;
declare const WalletApiRpcResponse: z.ZodDiscriminatedUnion<"method", [z.ZodObject<{
    /** RPC method executed by the wallet */
    method: z.ZodLiteral<"signTransaction">;
    /** Data returned by the RPC method. */
    data: z.ZodObject<{
        /** Signature produced by the wallet. */
        signed_transaction: z.ZodString;
        /** Encoding of the signature */
        encoding: z.ZodLiteral<"base64">;
    }, "strip", z.ZodTypeAny, {
        encoding: "base64";
        signed_transaction: string;
    }, {
        encoding: "base64";
        signed_transaction: string;
    }>;
}, "strip", z.ZodTypeAny, {
    method: "signTransaction";
    data: {
        encoding: "base64";
        signed_transaction: string;
    };
}, {
    method: "signTransaction";
    data: {
        encoding: "base64";
        signed_transaction: string;
    };
}>, z.ZodObject<{
    /** RPC method executed by the wallet */
    method: z.ZodLiteral<"signAndSendTransaction">;
    /** Data returned by the RPC method. */
    data: z.ZodOptional<z.ZodObject<{
        transaction_id: z.ZodOptional<z.ZodString>;
        /** Blockchain hash of the sent transaction. */
        hash: z.ZodString;
        /** The CAIP-2 chain id the transaction was sent on. */
        caip2: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        caip2: string;
        hash: string;
        transaction_id?: string | undefined;
    }, {
        caip2: string;
        hash: string;
        transaction_id?: string | undefined;
    }>>;
    /** Error object returned by the RPC method. */
    error: z.ZodOptional<z.ZodObject<{
        /** Error code */
        code: z.ZodString;
        /** Error message */
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        code: string;
        message: string;
    }, {
        code: string;
        message: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    method: "signAndSendTransaction";
    error?: {
        code: string;
        message: string;
    } | undefined;
    data?: {
        caip2: string;
        hash: string;
        transaction_id?: string | undefined;
    } | undefined;
}, {
    method: "signAndSendTransaction";
    error?: {
        code: string;
        message: string;
    } | undefined;
    data?: {
        caip2: string;
        hash: string;
        transaction_id?: string | undefined;
    } | undefined;
}>, z.ZodObject<{
    /** RPC method executed by the wallet */
    method: z.ZodLiteral<"signMessage">;
    /** Data returned by the RPC method. */
    data: z.ZodObject<{
        /** Signature produced by the wallet. */
        signature: z.ZodString;
        /** Encoding of the signature */
        encoding: z.ZodLiteral<"base64">;
    }, "strip", z.ZodTypeAny, {
        signature: string;
        encoding: "base64";
    }, {
        signature: string;
        encoding: "base64";
    }>;
}, "strip", z.ZodTypeAny, {
    method: "signMessage";
    data: {
        signature: string;
        encoding: "base64";
    };
}, {
    method: "signMessage";
    data: {
        signature: string;
        encoding: "base64";
    };
}>, z.ZodObject<{
    /** RPC method executed by the wallet */
    method: z.ZodLiteral<"eth_signTransaction">;
    /** Data returned by the RPC method. */
    data: z.ZodObject<{
        /** Signature produced by the wallet. */
        signed_transaction: z.ZodString;
        /** Encoding of the signed transaction */
        encoding: z.ZodLiteral<"rlp">;
    }, "strip", z.ZodTypeAny, {
        encoding: "rlp";
        signed_transaction: string;
    }, {
        encoding: "rlp";
        signed_transaction: string;
    }>;
}, "strip", z.ZodTypeAny, {
    method: "eth_signTransaction";
    data: {
        encoding: "rlp";
        signed_transaction: string;
    };
}, {
    method: "eth_signTransaction";
    data: {
        encoding: "rlp";
        signed_transaction: string;
    };
}>, z.ZodObject<{
    /** RPC method executed by the wallet */
    method: z.ZodLiteral<"eth_sendTransaction">;
    /** Data returned by the RPC method. */
    data: z.ZodOptional<z.ZodObject<{
        transaction_id: z.ZodOptional<z.ZodString>;
        /** Blockchain hash of the sent transaction. */
        hash: z.ZodString;
        /** The CAIP-2 chain id the transaction was sent on. */
        caip2: z.ZodString;
        /** The transaction object. */
        transaction_request: z.ZodOptional<z.ZodObject<{
            /** The address the transaction is sent from. Must be hexadecimal formatted. */
            from: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
            /** Destination address of the transaction. */
            to: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
            /** The chain ID of network your transaction will  be sent on (hexadecimal or number). */
            chain_id: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The nonce to be used for the transaction (hexadecimal or number). */
            nonce: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) Data to send to the receiving address, especially when calling smart contracts. Must be hexadecimal formatted. */
            data: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
            /** (optional) The value (in wei) be sent with the transaction (hexadecimal or number). */
            value: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The EIP-2718 transction type (e.g. `2` for EIP-1559 transactions). */
            type: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0>, z.ZodLiteral<1>, z.ZodLiteral<2>]>>;
            /** (optional) The max units of gas that can be used by this transaction (hexadecimal or number). */
            gas_limit: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The price (in wei) per unit of gas for this transaction (hexadecimal or number), for use in non EIP-1559 transactions (type 0 or 1). */
            gas_price: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The maxFeePerGas (hexadecimal or number) to be used in this transaction, for use in EIP-1559 (type 2) transactions. */
            max_fee_per_gas: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
            /** (optional) The maxPriorityFeePerGas (hexadecimal or number) to be used in this transaction, for use in EIP-1559 (type 2) transactions. */
            max_priority_fee_per_gas: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodNumber]>>;
        }, "strict", z.ZodTypeAny, {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        }, {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        caip2: string;
        hash: string;
        transaction_id?: string | undefined;
        transaction_request?: {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        } | undefined;
    }, {
        caip2: string;
        hash: string;
        transaction_id?: string | undefined;
        transaction_request?: {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        } | undefined;
    }>>;
    /** Error object returned by the RPC method. */
    error: z.ZodOptional<z.ZodObject<{
        /** Error code */
        code: z.ZodString;
        /** Error message */
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        code: string;
        message: string;
    }, {
        code: string;
        message: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    method: "eth_sendTransaction";
    error?: {
        code: string;
        message: string;
    } | undefined;
    data?: {
        caip2: string;
        hash: string;
        transaction_id?: string | undefined;
        transaction_request?: {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        } | undefined;
    } | undefined;
}, {
    method: "eth_sendTransaction";
    error?: {
        code: string;
        message: string;
    } | undefined;
    data?: {
        caip2: string;
        hash: string;
        transaction_id?: string | undefined;
        transaction_request?: {
            type?: 0 | 1 | 2 | undefined;
            value?: string | number | undefined;
            nonce?: string | number | undefined;
            chain_id?: string | number | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_limit?: string | number | undefined;
            gas_price?: string | number | undefined;
            max_fee_per_gas?: string | number | undefined;
            max_priority_fee_per_gas?: string | number | undefined;
        } | undefined;
    } | undefined;
}>, z.ZodObject<{
    /** RPC method executed by the wallet */
    method: z.ZodLiteral<"personal_sign">;
    /** Data returned by the RPC method. */
    data: z.ZodObject<{
        /** Signature produced by the wallet. */
        signature: z.ZodString;
        /** Encoding of the signature */
        encoding: z.ZodLiteral<"hex">;
    }, "strip", z.ZodTypeAny, {
        signature: string;
        encoding: "hex";
    }, {
        signature: string;
        encoding: "hex";
    }>;
}, "strip", z.ZodTypeAny, {
    method: "personal_sign";
    data: {
        signature: string;
        encoding: "hex";
    };
}, {
    method: "personal_sign";
    data: {
        signature: string;
        encoding: "hex";
    };
}>, z.ZodObject<{
    /** RPC method executed by the wallet */
    method: z.ZodLiteral<"secp256k1_sign">;
    /** Data returned by the RPC method. */
    data: z.ZodObject<{
        /** Signature produced by the wallet. */
        signature: z.ZodEffects<z.ZodString, string, string>;
        /** Encoding of the signature */
        encoding: z.ZodLiteral<"hex">;
    }, "strip", z.ZodTypeAny, {
        signature: string;
        encoding: "hex";
    }, {
        signature: string;
        encoding: "hex";
    }>;
}, "strip", z.ZodTypeAny, {
    method: "secp256k1_sign";
    data: {
        signature: string;
        encoding: "hex";
    };
}, {
    method: "secp256k1_sign";
    data: {
        signature: string;
        encoding: "hex";
    };
}>, z.ZodObject<{
    /** RPC method executed by the wallet */
    method: z.ZodLiteral<"eth_signTypedData_v4">;
    /** Data returned by the RPC method. */
    data: z.ZodObject<{
        /** Signature produced by the wallet. */
        signature: z.ZodString;
        /** Encoding of the signature */
        encoding: z.ZodLiteral<"hex">;
    }, "strip", z.ZodTypeAny, {
        signature: string;
        encoding: "hex";
    }, {
        signature: string;
        encoding: "hex";
    }>;
}, "strip", z.ZodTypeAny, {
    method: "eth_signTypedData_v4";
    data: {
        signature: string;
        encoding: "hex";
    };
}, {
    method: "eth_signTypedData_v4";
    data: {
        signature: string;
        encoding: "hex";
    };
}>, z.ZodObject<{
    /** RPC method executed by the wallet */
    method: z.ZodLiteral<"exportPrivateKey">;
    /** Data returned by the RPC method. */
    data: z.ZodObject<{
        encryption_type: z.ZodLiteral<"HPKE">;
        recipient_public_key: z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodString]>;
    }, "strict", z.ZodTypeAny, {
        encryption_type: "HPKE";
        recipient_public_key: string;
    }, {
        encryption_type: "HPKE";
        recipient_public_key: string;
    }>;
}, "strip", z.ZodTypeAny, {
    method: "exportPrivateKey";
    data: {
        encryption_type: "HPKE";
        recipient_public_key: string;
    };
}, {
    method: "exportPrivateKey";
    data: {
        encryption_type: "HPKE";
        recipient_public_key: string;
    };
}>]>;
type WalletApiRpcResponseType = z.infer<typeof WalletApiRpcResponse>;
declare const WalletApiRegisterAuthorizationKeyInput: z.ZodObject<{
    display_name: z.ZodOptional<z.ZodString>;
    public_key: z.ZodString;
    role: z.ZodOptional<z.ZodNullable<z.ZodEnum<["root", "manager", "delegated-actions"]>>>;
}, "strip", z.ZodTypeAny, {
    public_key: string;
    display_name?: string | undefined;
    role?: "root" | "manager" | "delegated-actions" | null | undefined;
}, {
    public_key: string;
    display_name?: string | undefined;
    role?: "root" | "manager" | "delegated-actions" | null | undefined;
}>;
type WalletApiRegisterAuthorizationKeyInputType = z.infer<typeof WalletApiRegisterAuthorizationKeyInput>;
declare const Cosmos: z.ZodLiteral<"cosmos">;
declare const Stellar: z.ZodLiteral<"stellar">;
declare const Sui: z.ZodLiteral<"sui">;
declare const CurveSigningChainTypes: z.ZodUnion<[z.ZodLiteral<"cosmos">, z.ZodLiteral<"stellar">, z.ZodLiteral<"sui">]>;
type CurveSigningChainType = z.infer<typeof CurveSigningChainTypes>;
declare const FirstClassChainTypes: z.ZodUnion<[z.ZodLiteral<"solana">, z.ZodLiteral<"ethereum">]>;
type FirstClassChainType = z.infer<typeof FirstClassChainTypes>;
declare const ChainType: z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"cosmos">, z.ZodLiteral<"stellar">, z.ZodLiteral<"sui">]>, z.ZodUnion<[z.ZodLiteral<"solana">, z.ZodLiteral<"ethereum">]>]>;
type ChainType = z.infer<typeof ChainType>;
declare const WalletResponse: z.ZodObject<{
    id: z.ZodString;
    address: z.ZodString;
    public_key: z.ZodOptional<z.ZodString>;
    created_at: z.ZodNumber;
    exported_at: z.ZodNullable<z.ZodNumber>;
    chain_type: z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"cosmos">, z.ZodLiteral<"stellar">, z.ZodLiteral<"sui">]>, z.ZodUnion<[z.ZodLiteral<"solana">, z.ZodLiteral<"ethereum">]>]>;
    policy_ids: z.ZodArray<z.ZodString, "many">;
    authorization_threshold: z.ZodOptional<z.ZodNumber>;
    additional_signers: z.ZodArray<z.ZodObject<{
        signer_id: z.ZodString;
        override_policy_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        signer_id: string;
        override_policy_ids?: string[] | undefined;
    }, {
        signer_id: string;
        override_policy_ids?: string[] | undefined;
    }>, "many">;
    owner_id: z.ZodNullable<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    id: string;
    address: string;
    chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
    created_at: number;
    exported_at: number | null;
    policy_ids: string[];
    additional_signers: {
        signer_id: string;
        override_policy_ids?: string[] | undefined;
    }[];
    owner_id: string | null;
    public_key?: string | undefined;
    authorization_threshold?: number | undefined;
}, {
    id: string;
    address: string;
    chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
    created_at: number;
    exported_at: number | null;
    policy_ids: string[];
    additional_signers: {
        signer_id: string;
        override_policy_ids?: string[] | undefined;
    }[];
    owner_id: string | null;
    public_key?: string | undefined;
    authorization_threshold?: number | undefined;
}>;
type WalletResponseType = z.infer<typeof WalletResponse>;
declare const KeyQuorumId: z.ZodString;
type KeyQuorumIdType = z.infer<typeof KeyQuorumId>;
declare const P256PublicKey: z.ZodString;
declare const OwnerInput: z.ZodObject<{
    public_key: z.ZodString;
}, "strict", z.ZodTypeAny, {
    public_key: string;
}, {
    public_key: string;
}>;
type OwnerInputType = z.infer<typeof OwnerInput>;
declare const OwnerInputFields: {
    /** The pem-formatted, P-256 public key of the owner of the wallet.  This will find or create a key quorum with this public key and set it as the owner. */
    owner: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        public_key: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        public_key: string;
    }, {
        public_key: string;
    }>>>;
    /** The key quorum ID to set as the owner of the wallet. */
    owner_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
};
declare const PolicyInput: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
declare const AdditionalSignerInput: z.ZodArray<z.ZodObject<{
    signer_id: z.ZodString;
    override_policy_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strict", z.ZodTypeAny, {
    signer_id: string;
    override_policy_ids?: string[] | undefined;
}, {
    signer_id: string;
    override_policy_ids?: string[] | undefined;
}>, "many">;
type AdditionalSignerInputType = z.infer<typeof AdditionalSignerInput>;
declare const BaseWalletApiCreateInput: z.ZodObject<{
    /** The pem-formatted, P-256 public key of the owner of the wallet.  This will find or create a key quorum with this public key and set it as the owner. */
    owner: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        public_key: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        public_key: string;
    }, {
        public_key: string;
    }>>>;
    /** The key quorum ID to set as the owner of the wallet. */
    owner_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    /** Chain to create wallet for. */
    chain_type: z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"cosmos">, z.ZodLiteral<"stellar">, z.ZodLiteral<"sui">]>, z.ZodUnion<[z.ZodLiteral<"solana">, z.ZodLiteral<"ethereum">]>]>;
    /** Optional policy ID to create wallet for. */
    policy_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    /** The set of authorization key IDs that can authorize actions on this wallet.
     * If unspecified, any request authorized by the app secret is sufficient to take
     * actions with the wallet. */
    authorization_key_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    /** The minimum number of keys required to authorize actions on this wallet.
     * Leave unspecified to require all keys to sign a request for any action. */
    authorization_threshold: z.ZodOptional<z.ZodNumber>;
    additional_signers: z.ZodOptional<z.ZodArray<z.ZodObject<{
        signer_id: z.ZodString;
        override_policy_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strict", z.ZodTypeAny, {
        signer_id: string;
        override_policy_ids?: string[] | undefined;
    }, {
        signer_id: string;
        override_policy_ids?: string[] | undefined;
    }>, "many">>;
}, "strict", z.ZodTypeAny, {
    chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
    policy_ids?: string[] | undefined;
    authorization_threshold?: number | undefined;
    additional_signers?: {
        signer_id: string;
        override_policy_ids?: string[] | undefined;
    }[] | undefined;
    owner_id?: string | null | undefined;
    authorization_key_ids?: string[] | undefined;
    owner?: {
        public_key: string;
    } | null | undefined;
}, {
    chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
    policy_ids?: string[] | undefined;
    authorization_threshold?: number | undefined;
    additional_signers?: {
        signer_id: string;
        override_policy_ids?: string[] | undefined;
    }[] | undefined;
    owner_id?: string | null | undefined;
    authorization_key_ids?: string[] | undefined;
    owner?: {
        public_key: string;
    } | null | undefined;
}>;
declare const WalletApiCreateInput: z.ZodCatch<z.ZodEffects<z.ZodEffects<z.ZodEffects<z.ZodObject<{
    /** The pem-formatted, P-256 public key of the owner of the wallet.  This will find or create a key quorum with this public key and set it as the owner. */
    owner: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        public_key: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        public_key: string;
    }, {
        public_key: string;
    }>>>;
    /** The key quorum ID to set as the owner of the wallet. */
    owner_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    /** Chain to create wallet for. */
    chain_type: z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"cosmos">, z.ZodLiteral<"stellar">, z.ZodLiteral<"sui">]>, z.ZodUnion<[z.ZodLiteral<"solana">, z.ZodLiteral<"ethereum">]>]>;
    /** Optional policy ID to create wallet for. */
    policy_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    /** The set of authorization key IDs that can authorize actions on this wallet.
     * If unspecified, any request authorized by the app secret is sufficient to take
     * actions with the wallet. */
    authorization_key_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    /** The minimum number of keys required to authorize actions on this wallet.
     * Leave unspecified to require all keys to sign a request for any action. */
    authorization_threshold: z.ZodOptional<z.ZodNumber>;
    additional_signers: z.ZodOptional<z.ZodArray<z.ZodObject<{
        signer_id: z.ZodString;
        override_policy_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strict", z.ZodTypeAny, {
        signer_id: string;
        override_policy_ids?: string[] | undefined;
    }, {
        signer_id: string;
        override_policy_ids?: string[] | undefined;
    }>, "many">>;
}, "strict", z.ZodTypeAny, {
    chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
    policy_ids?: string[] | undefined;
    authorization_threshold?: number | undefined;
    additional_signers?: {
        signer_id: string;
        override_policy_ids?: string[] | undefined;
    }[] | undefined;
    owner_id?: string | null | undefined;
    authorization_key_ids?: string[] | undefined;
    owner?: {
        public_key: string;
    } | null | undefined;
}, {
    chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
    policy_ids?: string[] | undefined;
    authorization_threshold?: number | undefined;
    additional_signers?: {
        signer_id: string;
        override_policy_ids?: string[] | undefined;
    }[] | undefined;
    owner_id?: string | null | undefined;
    authorization_key_ids?: string[] | undefined;
    owner?: {
        public_key: string;
    } | null | undefined;
}>, {
    chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
    policy_ids?: string[] | undefined;
    authorization_threshold?: number | undefined;
    additional_signers?: {
        signer_id: string;
        override_policy_ids?: string[] | undefined;
    }[] | undefined;
    owner_id?: string | null | undefined;
    authorization_key_ids?: string[] | undefined;
    owner?: {
        public_key: string;
    } | null | undefined;
}, {
    chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
    policy_ids?: string[] | undefined;
    authorization_threshold?: number | undefined;
    additional_signers?: {
        signer_id: string;
        override_policy_ids?: string[] | undefined;
    }[] | undefined;
    owner_id?: string | null | undefined;
    authorization_key_ids?: string[] | undefined;
    owner?: {
        public_key: string;
    } | null | undefined;
}>, {
    chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
    policy_ids?: string[] | undefined;
    authorization_threshold?: number | undefined;
    additional_signers?: {
        signer_id: string;
        override_policy_ids?: string[] | undefined;
    }[] | undefined;
    owner_id?: string | null | undefined;
    authorization_key_ids?: string[] | undefined;
    owner?: {
        public_key: string;
    } | null | undefined;
}, {
    chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
    policy_ids?: string[] | undefined;
    authorization_threshold?: number | undefined;
    additional_signers?: {
        signer_id: string;
        override_policy_ids?: string[] | undefined;
    }[] | undefined;
    owner_id?: string | null | undefined;
    authorization_key_ids?: string[] | undefined;
    owner?: {
        public_key: string;
    } | null | undefined;
}>, {
    chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
    policy_ids?: string[] | undefined;
    authorization_threshold?: number | undefined;
    additional_signers?: {
        signer_id: string;
        override_policy_ids?: string[] | undefined;
    }[] | undefined;
    owner_id?: string | null | undefined;
    authorization_key_ids?: string[] | undefined;
    owner?: {
        public_key: string;
    } | null | undefined;
}, {
    chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
    policy_ids?: string[] | undefined;
    authorization_threshold?: number | undefined;
    additional_signers?: {
        signer_id: string;
        override_policy_ids?: string[] | undefined;
    }[] | undefined;
    owner_id?: string | null | undefined;
    authorization_key_ids?: string[] | undefined;
    owner?: {
        public_key: string;
    } | null | undefined;
}>>;
type WalletApiCreateInputType = z.infer<typeof WalletApiCreateInput>;
/**
 * @deprecated Use {@link WalletResponse} instead
 */
declare const WalletApiCreateResponse: z.ZodObject<{
    /** Unique ID for the created wallet. */
    id: z.ZodString;
    /** Chain type of the created wallet. */
    chain_type: z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"cosmos">, z.ZodLiteral<"stellar">, z.ZodLiteral<"sui">]>, z.ZodUnion<[z.ZodLiteral<"solana">, z.ZodLiteral<"ethereum">]>]>;
    /** Address of the created wallet */
    address: z.ZodString;
    /** The optional authorization threshold for the wallet. */
    authorization_threshold: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    id: string;
    address: string;
    chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
    authorization_threshold?: number | undefined;
}, {
    id: string;
    address: string;
    chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
    authorization_threshold?: number | undefined;
}>;
/**
 * @deprecated Use {@link WalletResponseType} instead
 */
type WalletApiCreateResponseType = z.infer<typeof WalletApiCreateResponse>;
/**
 * Parses a JSON representation of a URL's path variables
 * for the `wallet_id`
 *
 * Throws an error if the `wallet_id` is not defined
 * or is not a valid, non-empty string.
 */
declare const WalletIdFromPath: z.ZodCatch<z.ZodObject<{
    wallet_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    wallet_id: string;
}, {
    wallet_id: string;
}>>;
type WalletIdFromPathType = z.infer<typeof WalletIdFromPath>;
type WalletsResponseType = {
    data: Array<WalletResponseType>;
    next_cursor: string | null;
};
declare const Asset: z.ZodEnum<["usdc", "eth"]>;
type AssetType = z.infer<typeof Asset>;
declare const ChainNameInput: z.ZodEnum<["ethereum", "arbitrum", "base", "linea", "optimism", "zksync_era"]>;
type ChainNameInputType = z.infer<typeof ChainNameInput>;
declare const BalanceFiatCurrency: z.ZodEnum<["usd"]>;
type BalanceFiatCurrency = z.infer<typeof BalanceFiatCurrency>;
declare const WalletGetBalanceInput: z.ZodObject<{
    asset: z.ZodUnion<[z.ZodEnum<["usdc", "eth"]>, z.ZodArray<z.ZodEnum<["usdc", "eth"]>, "many">]>;
    chain: z.ZodUnion<[z.ZodEnum<["ethereum", "arbitrum", "base", "linea", "optimism", "zksync_era"]>, z.ZodArray<z.ZodEnum<["ethereum", "arbitrum", "base", "linea", "optimism", "zksync_era"]>, "many">]>;
    include_currency: z.ZodOptional<z.ZodEnum<["usd"]>>;
}, "strip", z.ZodTypeAny, {
    chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era" | ("ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era")[];
    asset: "eth" | "usdc" | ("eth" | "usdc")[];
    include_currency?: "usd" | undefined;
}, {
    chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era" | ("ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era")[];
    asset: "eth" | "usdc" | ("eth" | "usdc")[];
    include_currency?: "usd" | undefined;
}>;
type WalletGetBalanceInput = z.infer<typeof WalletGetBalanceInput>;
declare const AssetAmountDetails: z.ZodObject<{
    chain: z.ZodEnum<["ethereum", "arbitrum", "base", "linea", "optimism", "zksync_era"]>;
    asset: z.ZodEnum<["usdc", "eth"]>;
    raw_value: z.ZodString;
    raw_value_decimals: z.ZodNumber;
    display_values: z.ZodRecord<z.ZodUnion<[z.ZodEnum<["usdc", "eth"]>, z.ZodEnum<["usd"]>]>, z.ZodString>;
}, "strip", z.ZodTypeAny, {
    chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
    asset: "eth" | "usdc";
    raw_value: string;
    raw_value_decimals: number;
    display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
}, {
    chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
    asset: "eth" | "usdc";
    raw_value: string;
    raw_value_decimals: number;
    display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
}>;
declare const WalletGetBalanceResponse: z.ZodObject<{
    balances: z.ZodArray<z.ZodEffects<z.ZodObject<{
        chain: z.ZodEnum<["ethereum", "arbitrum", "base", "linea", "optimism", "zksync_era"]>;
        asset: z.ZodEnum<["usdc", "eth"]>;
        raw_value: z.ZodString;
        raw_value_decimals: z.ZodNumber;
        display_values: z.ZodRecord<z.ZodUnion<[z.ZodEnum<["usdc", "eth"]>, z.ZodEnum<["usd"]>]>, z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
        asset: "eth" | "usdc";
        raw_value: string;
        raw_value_decimals: number;
        display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
    }, {
        chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
        asset: "eth" | "usdc";
        raw_value: string;
        raw_value_decimals: number;
        display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
    }>, {
        chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
        asset: "eth" | "usdc";
        raw_value: string;
        raw_value_decimals: number;
        display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
    }, {
        chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
        asset: "eth" | "usdc";
        raw_value: string;
        raw_value_decimals: number;
        display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    balances: {
        chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
        asset: "eth" | "usdc";
        raw_value: string;
        raw_value_decimals: number;
        display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
    }[];
}, {
    balances: {
        chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
        asset: "eth" | "usdc";
        raw_value: string;
        raw_value_decimals: number;
        display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
    }[];
}>;
type WalletGetBalanceResponseType = z.infer<typeof WalletGetBalanceResponse>;
declare const WalletApiRevokeAuthorizationKeyInput: z.ZodObject<{
    id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
}, {
    id: string;
}>;
type WalletApiRevokeAuthorizationKeyInput = z.infer<typeof WalletApiRevokeAuthorizationKeyInput>;
declare const AuthorizationKeyDashboardResponse: z.ZodObject<{
    id: z.ZodString;
    display_name: z.ZodNullable<z.ZodString>;
    public_key: z.ZodString;
    role: z.ZodNullable<z.ZodEnum<["root", "manager", "delegated-actions"]>>;
    created_at: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    id: string;
    display_name: string | null;
    public_key: string;
    created_at: number;
    role: "root" | "manager" | "delegated-actions" | null;
}, {
    id: string;
    display_name: string | null;
    public_key: string;
    created_at: number;
    role: "root" | "manager" | "delegated-actions" | null;
}>;
type AuthorizationKeyDashboardResponseType = z.infer<typeof AuthorizationKeyDashboardResponse>;
declare const AuthorizationKeyResponse: z.ZodObject<{
    id: z.ZodString;
    display_name: z.ZodNullable<z.ZodString>;
    public_key: z.ZodString;
    created_at: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    id: string;
    display_name: string | null;
    public_key: string;
    created_at: number;
}, {
    id: string;
    display_name: string | null;
    public_key: string;
    created_at: number;
}>;
type AuthorizationKeyResponseType = z.infer<typeof AuthorizationKeyResponse>;
declare const WalletsSearchInput: z.ZodObject<{
    cursor: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    limit: z.ZodOptional<z.ZodNumber>;
} & {
    chain_type: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"cosmos">, z.ZodLiteral<"stellar">, z.ZodLiteral<"sui">]>, z.ZodUnion<[z.ZodLiteral<"solana">, z.ZodLiteral<"ethereum">]>]>>;
}, "strict", z.ZodTypeAny, {
    cursor?: string | undefined;
    limit?: number | undefined;
    chain_type?: "solana" | "ethereum" | "stellar" | "cosmos" | "sui" | undefined;
}, {
    cursor?: string | undefined;
    limit?: number | undefined;
    chain_type?: "solana" | "ethereum" | "stellar" | "cosmos" | "sui" | undefined;
}>;
type WalletsSearchInputType = z.infer<typeof WalletsSearchInput>;
declare const WalletUpdateInput: z.ZodEffects<z.ZodObject<{
    policy_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    authorization_key_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    authorization_threshold: z.ZodOptional<z.ZodNumber>;
    additional_signers: z.ZodOptional<z.ZodArray<z.ZodObject<{
        signer_id: z.ZodString;
        override_policy_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strict", z.ZodTypeAny, {
        signer_id: string;
        override_policy_ids?: string[] | undefined;
    }, {
        signer_id: string;
        override_policy_ids?: string[] | undefined;
    }>, "many">>;
}, "strict", z.ZodTypeAny, {
    policy_ids?: string[] | undefined;
    authorization_threshold?: number | undefined;
    additional_signers?: {
        signer_id: string;
        override_policy_ids?: string[] | undefined;
    }[] | undefined;
    authorization_key_ids?: string[] | undefined;
}, {
    policy_ids?: string[] | undefined;
    authorization_threshold?: number | undefined;
    additional_signers?: {
        signer_id: string;
        override_policy_ids?: string[] | undefined;
    }[] | undefined;
    authorization_key_ids?: string[] | undefined;
}>, {
    policy_ids?: string[] | undefined;
    authorization_threshold?: number | undefined;
    additional_signers?: {
        signer_id: string;
        override_policy_ids?: string[] | undefined;
    }[] | undefined;
    authorization_key_ids?: string[] | undefined;
}, {
    policy_ids?: string[] | undefined;
    authorization_threshold?: number | undefined;
    additional_signers?: {
        signer_id: string;
        override_policy_ids?: string[] | undefined;
    }[] | undefined;
    authorization_key_ids?: string[] | undefined;
}>;
type WalletUpdateInputType = z.infer<typeof WalletUpdateInput>;
declare const WalletGetTransactionsInput: z.ZodObject<{
    cursor: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    limit: z.ZodOptional<z.ZodNumber>;
} & {
    chain: z.ZodLiteral<"base">;
    asset: z.ZodUnion<[z.ZodEnum<["usdc", "eth"]>, z.ZodArray<z.ZodEnum<["usdc", "eth"]>, "many">]>;
}, "strict", z.ZodTypeAny, {
    chain: "base";
    asset: "eth" | "usdc" | ("eth" | "usdc")[];
    cursor?: string | undefined;
    limit?: number | undefined;
}, {
    chain: "base";
    asset: "eth" | "usdc" | ("eth" | "usdc")[];
    cursor?: string | undefined;
    limit?: number | undefined;
}>;
type WalletGetTransactionsInputType = z.infer<typeof WalletGetTransactionsInput>;
declare const TransferSentTransactionDetail: z.ZodObject<{
    type: z.ZodLiteral<"transfer_sent">;
    sender: z.ZodString;
    sender_privy_user_id: z.ZodNullable<z.ZodString>;
    recipient: z.ZodString;
    recipient_privy_user_id: z.ZodNullable<z.ZodString>;
} & {
    chain: z.ZodEnum<["ethereum", "arbitrum", "base", "linea", "optimism", "zksync_era"]>;
    asset: z.ZodEnum<["usdc", "eth"]>;
    raw_value: z.ZodString;
    raw_value_decimals: z.ZodNumber;
    display_values: z.ZodRecord<z.ZodUnion<[z.ZodEnum<["usdc", "eth"]>, z.ZodEnum<["usd"]>]>, z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "transfer_sent";
    chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
    asset: "eth" | "usdc";
    raw_value: string;
    raw_value_decimals: number;
    display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
    sender: string;
    sender_privy_user_id: string | null;
    recipient: string;
    recipient_privy_user_id: string | null;
}, {
    type: "transfer_sent";
    chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
    asset: "eth" | "usdc";
    raw_value: string;
    raw_value_decimals: number;
    display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
    sender: string;
    sender_privy_user_id: string | null;
    recipient: string;
    recipient_privy_user_id: string | null;
}>;
declare const TransferReceivedTransactionDetail: z.ZodObject<{
    type: z.ZodLiteral<"transfer_received">;
    sender: z.ZodString;
    sender_privy_user_id: z.ZodNullable<z.ZodString>;
    recipient: z.ZodString;
    recipient_privy_user_id: z.ZodNullable<z.ZodString>;
} & {
    chain: z.ZodEnum<["ethereum", "arbitrum", "base", "linea", "optimism", "zksync_era"]>;
    asset: z.ZodEnum<["usdc", "eth"]>;
    raw_value: z.ZodString;
    raw_value_decimals: z.ZodNumber;
    display_values: z.ZodRecord<z.ZodUnion<[z.ZodEnum<["usdc", "eth"]>, z.ZodEnum<["usd"]>]>, z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "transfer_received";
    chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
    asset: "eth" | "usdc";
    raw_value: string;
    raw_value_decimals: number;
    display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
    sender: string;
    sender_privy_user_id: string | null;
    recipient: string;
    recipient_privy_user_id: string | null;
}, {
    type: "transfer_received";
    chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
    asset: "eth" | "usdc";
    raw_value: string;
    raw_value_decimals: number;
    display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
    sender: string;
    sender_privy_user_id: string | null;
    recipient: string;
    recipient_privy_user_id: string | null;
}>;
declare const TransactionDetail: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<"transfer_sent">;
    sender: z.ZodString;
    sender_privy_user_id: z.ZodNullable<z.ZodString>;
    recipient: z.ZodString;
    recipient_privy_user_id: z.ZodNullable<z.ZodString>;
} & {
    chain: z.ZodEnum<["ethereum", "arbitrum", "base", "linea", "optimism", "zksync_era"]>;
    asset: z.ZodEnum<["usdc", "eth"]>;
    raw_value: z.ZodString;
    raw_value_decimals: z.ZodNumber;
    display_values: z.ZodRecord<z.ZodUnion<[z.ZodEnum<["usdc", "eth"]>, z.ZodEnum<["usd"]>]>, z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "transfer_sent";
    chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
    asset: "eth" | "usdc";
    raw_value: string;
    raw_value_decimals: number;
    display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
    sender: string;
    sender_privy_user_id: string | null;
    recipient: string;
    recipient_privy_user_id: string | null;
}, {
    type: "transfer_sent";
    chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
    asset: "eth" | "usdc";
    raw_value: string;
    raw_value_decimals: number;
    display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
    sender: string;
    sender_privy_user_id: string | null;
    recipient: string;
    recipient_privy_user_id: string | null;
}>, z.ZodObject<{
    type: z.ZodLiteral<"transfer_received">;
    sender: z.ZodString;
    sender_privy_user_id: z.ZodNullable<z.ZodString>;
    recipient: z.ZodString;
    recipient_privy_user_id: z.ZodNullable<z.ZodString>;
} & {
    chain: z.ZodEnum<["ethereum", "arbitrum", "base", "linea", "optimism", "zksync_era"]>;
    asset: z.ZodEnum<["usdc", "eth"]>;
    raw_value: z.ZodString;
    raw_value_decimals: z.ZodNumber;
    display_values: z.ZodRecord<z.ZodUnion<[z.ZodEnum<["usdc", "eth"]>, z.ZodEnum<["usd"]>]>, z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "transfer_received";
    chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
    asset: "eth" | "usdc";
    raw_value: string;
    raw_value_decimals: number;
    display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
    sender: string;
    sender_privy_user_id: string | null;
    recipient: string;
    recipient_privy_user_id: string | null;
}, {
    type: "transfer_received";
    chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
    asset: "eth" | "usdc";
    raw_value: string;
    raw_value_decimals: number;
    display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
    sender: string;
    sender_privy_user_id: string | null;
    recipient: string;
    recipient_privy_user_id: string | null;
}>]>;
type TransactionDetailType = z.infer<typeof TransactionDetail>;
declare const TransactionResponseWithDetails: z.ZodObject<{
    caip2: z.ZodString;
    transaction_hash: z.ZodNullable<z.ZodString>;
    status: z.ZodEnum<["broadcasted", "confirmed", "delayed", "execution_reverted", "failed"]>;
    created_at: z.ZodNumber;
} & {
    details: z.ZodNullable<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"transfer_sent">;
        sender: z.ZodString;
        sender_privy_user_id: z.ZodNullable<z.ZodString>;
        recipient: z.ZodString;
        recipient_privy_user_id: z.ZodNullable<z.ZodString>;
    } & {
        chain: z.ZodEnum<["ethereum", "arbitrum", "base", "linea", "optimism", "zksync_era"]>;
        asset: z.ZodEnum<["usdc", "eth"]>;
        raw_value: z.ZodString;
        raw_value_decimals: z.ZodNumber;
        display_values: z.ZodRecord<z.ZodUnion<[z.ZodEnum<["usdc", "eth"]>, z.ZodEnum<["usd"]>]>, z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "transfer_sent";
        chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
        asset: "eth" | "usdc";
        raw_value: string;
        raw_value_decimals: number;
        display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
        sender: string;
        sender_privy_user_id: string | null;
        recipient: string;
        recipient_privy_user_id: string | null;
    }, {
        type: "transfer_sent";
        chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
        asset: "eth" | "usdc";
        raw_value: string;
        raw_value_decimals: number;
        display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
        sender: string;
        sender_privy_user_id: string | null;
        recipient: string;
        recipient_privy_user_id: string | null;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"transfer_received">;
        sender: z.ZodString;
        sender_privy_user_id: z.ZodNullable<z.ZodString>;
        recipient: z.ZodString;
        recipient_privy_user_id: z.ZodNullable<z.ZodString>;
    } & {
        chain: z.ZodEnum<["ethereum", "arbitrum", "base", "linea", "optimism", "zksync_era"]>;
        asset: z.ZodEnum<["usdc", "eth"]>;
        raw_value: z.ZodString;
        raw_value_decimals: z.ZodNumber;
        display_values: z.ZodRecord<z.ZodUnion<[z.ZodEnum<["usdc", "eth"]>, z.ZodEnum<["usd"]>]>, z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "transfer_received";
        chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
        asset: "eth" | "usdc";
        raw_value: string;
        raw_value_decimals: number;
        display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
        sender: string;
        sender_privy_user_id: string | null;
        recipient: string;
        recipient_privy_user_id: string | null;
    }, {
        type: "transfer_received";
        chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
        asset: "eth" | "usdc";
        raw_value: string;
        raw_value_decimals: number;
        display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
        sender: string;
        sender_privy_user_id: string | null;
        recipient: string;
        recipient_privy_user_id: string | null;
    }>]>>;
}, "strip", z.ZodTypeAny, {
    status: "broadcasted" | "confirmed" | "delayed" | "execution_reverted" | "failed";
    created_at: number;
    caip2: string;
    transaction_hash: string | null;
    details: {
        type: "transfer_sent";
        chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
        asset: "eth" | "usdc";
        raw_value: string;
        raw_value_decimals: number;
        display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
        sender: string;
        sender_privy_user_id: string | null;
        recipient: string;
        recipient_privy_user_id: string | null;
    } | {
        type: "transfer_received";
        chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
        asset: "eth" | "usdc";
        raw_value: string;
        raw_value_decimals: number;
        display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
        sender: string;
        sender_privy_user_id: string | null;
        recipient: string;
        recipient_privy_user_id: string | null;
    } | null;
}, {
    status: "broadcasted" | "confirmed" | "delayed" | "execution_reverted" | "failed";
    created_at: number;
    caip2: string;
    transaction_hash: string | null;
    details: {
        type: "transfer_sent";
        chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
        asset: "eth" | "usdc";
        raw_value: string;
        raw_value_decimals: number;
        display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
        sender: string;
        sender_privy_user_id: string | null;
        recipient: string;
        recipient_privy_user_id: string | null;
    } | {
        type: "transfer_received";
        chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
        asset: "eth" | "usdc";
        raw_value: string;
        raw_value_decimals: number;
        display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
        sender: string;
        sender_privy_user_id: string | null;
        recipient: string;
        recipient_privy_user_id: string | null;
    } | null;
}>;
declare const PrivyTransactionResponseWithDetails: z.ZodObject<{
    caip2: z.ZodString;
    transaction_hash: z.ZodNullable<z.ZodString>;
    status: z.ZodEnum<["broadcasted", "confirmed", "delayed", "execution_reverted", "failed"]>;
    created_at: z.ZodNumber;
} & {
    details: z.ZodNullable<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"transfer_sent">;
        sender: z.ZodString;
        sender_privy_user_id: z.ZodNullable<z.ZodString>;
        recipient: z.ZodString;
        recipient_privy_user_id: z.ZodNullable<z.ZodString>;
    } & {
        chain: z.ZodEnum<["ethereum", "arbitrum", "base", "linea", "optimism", "zksync_era"]>;
        asset: z.ZodEnum<["usdc", "eth"]>;
        raw_value: z.ZodString;
        raw_value_decimals: z.ZodNumber;
        display_values: z.ZodRecord<z.ZodUnion<[z.ZodEnum<["usdc", "eth"]>, z.ZodEnum<["usd"]>]>, z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "transfer_sent";
        chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
        asset: "eth" | "usdc";
        raw_value: string;
        raw_value_decimals: number;
        display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
        sender: string;
        sender_privy_user_id: string | null;
        recipient: string;
        recipient_privy_user_id: string | null;
    }, {
        type: "transfer_sent";
        chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
        asset: "eth" | "usdc";
        raw_value: string;
        raw_value_decimals: number;
        display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
        sender: string;
        sender_privy_user_id: string | null;
        recipient: string;
        recipient_privy_user_id: string | null;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"transfer_received">;
        sender: z.ZodString;
        sender_privy_user_id: z.ZodNullable<z.ZodString>;
        recipient: z.ZodString;
        recipient_privy_user_id: z.ZodNullable<z.ZodString>;
    } & {
        chain: z.ZodEnum<["ethereum", "arbitrum", "base", "linea", "optimism", "zksync_era"]>;
        asset: z.ZodEnum<["usdc", "eth"]>;
        raw_value: z.ZodString;
        raw_value_decimals: z.ZodNumber;
        display_values: z.ZodRecord<z.ZodUnion<[z.ZodEnum<["usdc", "eth"]>, z.ZodEnum<["usd"]>]>, z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "transfer_received";
        chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
        asset: "eth" | "usdc";
        raw_value: string;
        raw_value_decimals: number;
        display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
        sender: string;
        sender_privy_user_id: string | null;
        recipient: string;
        recipient_privy_user_id: string | null;
    }, {
        type: "transfer_received";
        chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
        asset: "eth" | "usdc";
        raw_value: string;
        raw_value_decimals: number;
        display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
        sender: string;
        sender_privy_user_id: string | null;
        recipient: string;
        recipient_privy_user_id: string | null;
    }>]>>;
} & {
    privy_transaction_id: z.ZodString;
    wallet_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    status: "broadcasted" | "confirmed" | "delayed" | "execution_reverted" | "failed";
    created_at: number;
    caip2: string;
    transaction_hash: string | null;
    wallet_id: string;
    details: {
        type: "transfer_sent";
        chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
        asset: "eth" | "usdc";
        raw_value: string;
        raw_value_decimals: number;
        display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
        sender: string;
        sender_privy_user_id: string | null;
        recipient: string;
        recipient_privy_user_id: string | null;
    } | {
        type: "transfer_received";
        chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
        asset: "eth" | "usdc";
        raw_value: string;
        raw_value_decimals: number;
        display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
        sender: string;
        sender_privy_user_id: string | null;
        recipient: string;
        recipient_privy_user_id: string | null;
    } | null;
    privy_transaction_id: string;
}, {
    status: "broadcasted" | "confirmed" | "delayed" | "execution_reverted" | "failed";
    created_at: number;
    caip2: string;
    transaction_hash: string | null;
    wallet_id: string;
    details: {
        type: "transfer_sent";
        chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
        asset: "eth" | "usdc";
        raw_value: string;
        raw_value_decimals: number;
        display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
        sender: string;
        sender_privy_user_id: string | null;
        recipient: string;
        recipient_privy_user_id: string | null;
    } | {
        type: "transfer_received";
        chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
        asset: "eth" | "usdc";
        raw_value: string;
        raw_value_decimals: number;
        display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
        sender: string;
        sender_privy_user_id: string | null;
        recipient: string;
        recipient_privy_user_id: string | null;
    } | null;
    privy_transaction_id: string;
}>;
type PrivyTransactionResponseWithDetailsType = z.infer<typeof PrivyTransactionResponseWithDetails>;
declare const WalletGetTransactionsResponse: z.ZodObject<{
    transactions: z.ZodArray<z.ZodObject<{
        caip2: z.ZodString;
        transaction_hash: z.ZodNullable<z.ZodString>;
        status: z.ZodEnum<["broadcasted", "confirmed", "delayed", "execution_reverted", "failed"]>;
        created_at: z.ZodNumber;
    } & {
        details: z.ZodNullable<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"transfer_sent">;
            sender: z.ZodString;
            sender_privy_user_id: z.ZodNullable<z.ZodString>;
            recipient: z.ZodString;
            recipient_privy_user_id: z.ZodNullable<z.ZodString>;
        } & {
            chain: z.ZodEnum<["ethereum", "arbitrum", "base", "linea", "optimism", "zksync_era"]>;
            asset: z.ZodEnum<["usdc", "eth"]>;
            raw_value: z.ZodString;
            raw_value_decimals: z.ZodNumber;
            display_values: z.ZodRecord<z.ZodUnion<[z.ZodEnum<["usdc", "eth"]>, z.ZodEnum<["usd"]>]>, z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "transfer_sent";
            chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
            asset: "eth" | "usdc";
            raw_value: string;
            raw_value_decimals: number;
            display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
            sender: string;
            sender_privy_user_id: string | null;
            recipient: string;
            recipient_privy_user_id: string | null;
        }, {
            type: "transfer_sent";
            chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
            asset: "eth" | "usdc";
            raw_value: string;
            raw_value_decimals: number;
            display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
            sender: string;
            sender_privy_user_id: string | null;
            recipient: string;
            recipient_privy_user_id: string | null;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"transfer_received">;
            sender: z.ZodString;
            sender_privy_user_id: z.ZodNullable<z.ZodString>;
            recipient: z.ZodString;
            recipient_privy_user_id: z.ZodNullable<z.ZodString>;
        } & {
            chain: z.ZodEnum<["ethereum", "arbitrum", "base", "linea", "optimism", "zksync_era"]>;
            asset: z.ZodEnum<["usdc", "eth"]>;
            raw_value: z.ZodString;
            raw_value_decimals: z.ZodNumber;
            display_values: z.ZodRecord<z.ZodUnion<[z.ZodEnum<["usdc", "eth"]>, z.ZodEnum<["usd"]>]>, z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type: "transfer_received";
            chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
            asset: "eth" | "usdc";
            raw_value: string;
            raw_value_decimals: number;
            display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
            sender: string;
            sender_privy_user_id: string | null;
            recipient: string;
            recipient_privy_user_id: string | null;
        }, {
            type: "transfer_received";
            chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
            asset: "eth" | "usdc";
            raw_value: string;
            raw_value_decimals: number;
            display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
            sender: string;
            sender_privy_user_id: string | null;
            recipient: string;
            recipient_privy_user_id: string | null;
        }>]>>;
    } & {
        privy_transaction_id: z.ZodString;
        wallet_id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        status: "broadcasted" | "confirmed" | "delayed" | "execution_reverted" | "failed";
        created_at: number;
        caip2: string;
        transaction_hash: string | null;
        wallet_id: string;
        details: {
            type: "transfer_sent";
            chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
            asset: "eth" | "usdc";
            raw_value: string;
            raw_value_decimals: number;
            display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
            sender: string;
            sender_privy_user_id: string | null;
            recipient: string;
            recipient_privy_user_id: string | null;
        } | {
            type: "transfer_received";
            chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
            asset: "eth" | "usdc";
            raw_value: string;
            raw_value_decimals: number;
            display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
            sender: string;
            sender_privy_user_id: string | null;
            recipient: string;
            recipient_privy_user_id: string | null;
        } | null;
        privy_transaction_id: string;
    }, {
        status: "broadcasted" | "confirmed" | "delayed" | "execution_reverted" | "failed";
        created_at: number;
        caip2: string;
        transaction_hash: string | null;
        wallet_id: string;
        details: {
            type: "transfer_sent";
            chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
            asset: "eth" | "usdc";
            raw_value: string;
            raw_value_decimals: number;
            display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
            sender: string;
            sender_privy_user_id: string | null;
            recipient: string;
            recipient_privy_user_id: string | null;
        } | {
            type: "transfer_received";
            chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
            asset: "eth" | "usdc";
            raw_value: string;
            raw_value_decimals: number;
            display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
            sender: string;
            sender_privy_user_id: string | null;
            recipient: string;
            recipient_privy_user_id: string | null;
        } | null;
        privy_transaction_id: string;
    }>, "many">;
    next_cursor: z.ZodNullable<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    transactions: {
        status: "broadcasted" | "confirmed" | "delayed" | "execution_reverted" | "failed";
        created_at: number;
        caip2: string;
        transaction_hash: string | null;
        wallet_id: string;
        details: {
            type: "transfer_sent";
            chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
            asset: "eth" | "usdc";
            raw_value: string;
            raw_value_decimals: number;
            display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
            sender: string;
            sender_privy_user_id: string | null;
            recipient: string;
            recipient_privy_user_id: string | null;
        } | {
            type: "transfer_received";
            chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
            asset: "eth" | "usdc";
            raw_value: string;
            raw_value_decimals: number;
            display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
            sender: string;
            sender_privy_user_id: string | null;
            recipient: string;
            recipient_privy_user_id: string | null;
        } | null;
        privy_transaction_id: string;
    }[];
    next_cursor: string | null;
}, {
    transactions: {
        status: "broadcasted" | "confirmed" | "delayed" | "execution_reverted" | "failed";
        created_at: number;
        caip2: string;
        transaction_hash: string | null;
        wallet_id: string;
        details: {
            type: "transfer_sent";
            chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
            asset: "eth" | "usdc";
            raw_value: string;
            raw_value_decimals: number;
            display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
            sender: string;
            sender_privy_user_id: string | null;
            recipient: string;
            recipient_privy_user_id: string | null;
        } | {
            type: "transfer_received";
            chain: "ethereum" | "base" | "optimism" | "arbitrum" | "linea" | "zksync_era";
            asset: "eth" | "usdc";
            raw_value: string;
            raw_value_decimals: number;
            display_values: Partial<Record<"eth" | "usdc" | "usd", string>>;
            sender: string;
            sender_privy_user_id: string | null;
            recipient: string;
            recipient_privy_user_id: string | null;
        } | null;
        privy_transaction_id: string;
    }[];
    next_cursor: string | null;
}>;
type WalletGetTransactionsResponseType = z.infer<typeof WalletGetTransactionsResponse>;

declare const KeyQuorumIdFromPath: z.ZodObject<{
    key_quorum_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    key_quorum_id: string;
}, {
    key_quorum_id: string;
}>;
declare const CreateKeyQuorumInput: z.ZodObject<{
    public_keys: z.ZodArray<z.ZodString, "many">;
    authorization_threshold: z.ZodOptional<z.ZodNumber>;
    display_name: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    public_keys: string[];
    display_name?: string | undefined;
    authorization_threshold?: number | undefined;
}, {
    public_keys: string[];
    display_name?: string | undefined;
    authorization_threshold?: number | undefined;
}>;
type CreateKeyQuorumInputType = z.infer<typeof CreateKeyQuorumInput>;
type KeyQuorumResponseType = {
    id: string;
    display_name: string | null;
    authorization_threshold: number | null;
    authorization_keys: {
        public_key: string;
        display_name: string | null;
    }[];
};
declare const UpdateKeyQuorumInput: z.ZodEffects<z.ZodObject<{
    public_keys: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    authorization_threshold: z.ZodOptional<z.ZodNumber>;
    display_name: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    display_name?: string | undefined;
    authorization_threshold?: number | undefined;
    public_keys?: string[] | undefined;
}, {
    display_name?: string | undefined;
    authorization_threshold?: number | undefined;
    public_keys?: string[] | undefined;
}>, {
    display_name?: string | undefined;
    authorization_threshold?: number | undefined;
    public_keys?: string[] | undefined;
}, {
    display_name?: string | undefined;
    authorization_threshold?: number | undefined;
    public_keys?: string[] | undefined;
}>;
type UpdateKeyQuorumInputType = z.infer<typeof UpdateKeyQuorumInput>;

declare const PrivateKeyExportInput: z.ZodObject<{
    encryption_type: z.ZodLiteral<"HPKE">;
    recipient_public_key: z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodString]>;
}, "strict", z.ZodTypeAny, {
    encryption_type: "HPKE";
    recipient_public_key: string;
}, {
    encryption_type: "HPKE";
    recipient_public_key: string;
}>;
type PrivateKeyExportInputType = z.infer<typeof PrivateKeyExportInput>;
declare const PrivateKeyExportResponse: z.ZodObject<{
    encryption_type: z.ZodLiteral<"HPKE">;
    ciphertext: z.ZodString;
    encapsulated_key: z.ZodString;
}, "strip", z.ZodTypeAny, {
    encryption_type: "HPKE";
    ciphertext: string;
    encapsulated_key: string;
}, {
    encryption_type: "HPKE";
    ciphertext: string;
    encapsulated_key: string;
}>;
type PrivateKeyExportResponseType = z.infer<typeof PrivateKeyExportResponse>;

/**
 * Parses a JSON object for a valid user with recovery request.
 */
declare const WalletsWithRecoveryRequest: z.ZodObject<{
    wallets: z.ZodArray<z.ZodObject<Omit<{
        owner: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            public_key: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            public_key: string;
        }, {
            public_key: string;
        }>>>;
        owner_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        chain_type: z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"cosmos">, z.ZodLiteral<"stellar">, z.ZodLiteral<"sui">]>, z.ZodUnion<[z.ZodLiteral<"solana">, z.ZodLiteral<"ethereum">]>]>;
        policy_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        authorization_key_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        authorization_threshold: z.ZodOptional<z.ZodNumber>;
        additional_signers: z.ZodOptional<z.ZodArray<z.ZodObject<{
            signer_id: z.ZodString;
            override_policy_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strict", z.ZodTypeAny, {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }, {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }>, "many">>;
    }, "authorization_threshold" | "additional_signers" | "owner_id" | "authorization_key_ids" | "owner">, "strict", z.ZodTypeAny, {
        chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
        policy_ids?: string[] | undefined;
    }, {
        chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
        policy_ids?: string[] | undefined;
    }>, "many">;
    primary_signer: z.ZodObject<{
        subject_id: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        subject_id: string;
    }, {
        subject_id: string;
    }>;
    recovery_user: z.ZodObject<{
        linked_accounts: z.ZodEffects<z.ZodArray<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"email">;
            address: z.ZodEffects<z.ZodString, string, string>;
        }, "strip", z.ZodTypeAny, {
            type: "email";
            address: string;
        }, {
            type: "email";
            address: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"custom_auth">;
            custom_user_id: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            type: "custom_auth";
            custom_user_id: string;
        }, {
            type: "custom_auth";
            custom_user_id: string;
        }>]>, "many">, ({
            type: "email";
            address: string;
        } | {
            type: "custom_auth";
            custom_user_id: string;
        })[], ({
            type: "email";
            address: string;
        } | {
            type: "custom_auth";
            custom_user_id: string;
        })[]>;
    }, "strict", z.ZodTypeAny, {
        linked_accounts: ({
            type: "email";
            address: string;
        } | {
            type: "custom_auth";
            custom_user_id: string;
        })[];
    }, {
        linked_accounts: ({
            type: "email";
            address: string;
        } | {
            type: "custom_auth";
            custom_user_id: string;
        })[];
    }>;
}, "strict", z.ZodTypeAny, {
    wallets: {
        chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
        policy_ids?: string[] | undefined;
    }[];
    primary_signer: {
        subject_id: string;
    };
    recovery_user: {
        linked_accounts: ({
            type: "email";
            address: string;
        } | {
            type: "custom_auth";
            custom_user_id: string;
        })[];
    };
}, {
    wallets: {
        chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
        policy_ids?: string[] | undefined;
    }[];
    primary_signer: {
        subject_id: string;
    };
    recovery_user: {
        linked_accounts: ({
            type: "email";
            address: string;
        } | {
            type: "custom_auth";
            custom_user_id: string;
        })[];
    };
}>;
type WalletsWithRecoveryRequestType = z.infer<typeof WalletsWithRecoveryRequest>;
declare const WalletsWithRecoveryResponse: z.ZodObject<{
    wallets: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        address: z.ZodString;
        public_key: z.ZodOptional<z.ZodString>;
        created_at: z.ZodNumber;
        exported_at: z.ZodNullable<z.ZodNumber>;
        chain_type: z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"cosmos">, z.ZodLiteral<"stellar">, z.ZodLiteral<"sui">]>, z.ZodUnion<[z.ZodLiteral<"solana">, z.ZodLiteral<"ethereum">]>]>;
        policy_ids: z.ZodArray<z.ZodString, "many">;
        authorization_threshold: z.ZodOptional<z.ZodNumber>;
        additional_signers: z.ZodArray<z.ZodObject<{
            signer_id: z.ZodString;
            override_policy_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }, {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }>, "many">;
        owner_id: z.ZodNullable<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        address: string;
        chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
        created_at: number;
        exported_at: number | null;
        policy_ids: string[];
        additional_signers: {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }[];
        owner_id: string | null;
        public_key?: string | undefined;
        authorization_threshold?: number | undefined;
    }, {
        id: string;
        address: string;
        chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
        created_at: number;
        exported_at: number | null;
        policy_ids: string[];
        additional_signers: {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }[];
        owner_id: string | null;
        public_key?: string | undefined;
        authorization_threshold?: number | undefined;
    }>, "many">;
    recovery_user_id: z.ZodString;
}, "strict", z.ZodTypeAny, {
    wallets: {
        id: string;
        address: string;
        chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
        created_at: number;
        exported_at: number | null;
        policy_ids: string[];
        additional_signers: {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }[];
        owner_id: string | null;
        public_key?: string | undefined;
        authorization_threshold?: number | undefined;
    }[];
    recovery_user_id: string;
}, {
    wallets: {
        id: string;
        address: string;
        chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
        created_at: number;
        exported_at: number | null;
        policy_ids: string[];
        additional_signers: {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }[];
        owner_id: string | null;
        public_key?: string | undefined;
        authorization_threshold?: number | undefined;
    }[];
    recovery_user_id: string;
}>;
type WalletsWithRecoveryResponseType = z.infer<typeof WalletsWithRecoveryResponse>;
declare const UserSignersAuthenticateInput: z.ZodObject<{
    /** The user's JWT, to be used to authenticate the user. */
    user_jwt: z.ZodString;
    /** The encryption type for the authentication response. Currently only supports HPKE. */
    encryption_type: z.ZodLiteral<"HPKE">;
    /** Base64-encoded public key of the recipient who will decrypt the session key. */
    recipient_public_key: z.ZodString;
}, "strict", z.ZodTypeAny, {
    encryption_type: "HPKE";
    recipient_public_key: string;
    user_jwt: string;
}, {
    encryption_type: "HPKE";
    recipient_public_key: string;
    user_jwt: string;
}>;
type UserSignersAuthenticateInputType = z.infer<typeof UserSignersAuthenticateInput>;
declare const UserSignersAuthenticateResponse: z.ZodObject<{
    encrypted_authorization_key: z.ZodObject<{
        /** The encryption type used. Currently only supports HPKE. */
        encryption_type: z.ZodLiteral<"HPKE">;
        /** Base64-encoded ephemeral public key used in the HPKE encryption process. */
        encapsulated_key: z.ZodString;
        /** The encrypted authorization key corresponding to the user's current authentication session. */
        ciphertext: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        encryption_type: "HPKE";
        ciphertext: string;
        encapsulated_key: string;
    }, {
        encryption_type: "HPKE";
        ciphertext: string;
        encapsulated_key: string;
    }>;
    /** Expiration in milliseconds since epoch. */
    expires_at: z.ZodNumber;
    /** The wallets that the signer has access to. */
    wallets: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        address: z.ZodString;
        public_key: z.ZodOptional<z.ZodString>;
        created_at: z.ZodNumber;
        exported_at: z.ZodNullable<z.ZodNumber>;
        chain_type: z.ZodUnion<[z.ZodUnion<[z.ZodLiteral<"cosmos">, z.ZodLiteral<"stellar">, z.ZodLiteral<"sui">]>, z.ZodUnion<[z.ZodLiteral<"solana">, z.ZodLiteral<"ethereum">]>]>;
        policy_ids: z.ZodArray<z.ZodString, "many">;
        authorization_threshold: z.ZodOptional<z.ZodNumber>;
        additional_signers: z.ZodArray<z.ZodObject<{
            signer_id: z.ZodString;
            override_policy_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }, {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }>, "many">;
        owner_id: z.ZodNullable<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        address: string;
        chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
        created_at: number;
        exported_at: number | null;
        policy_ids: string[];
        additional_signers: {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }[];
        owner_id: string | null;
        public_key?: string | undefined;
        authorization_threshold?: number | undefined;
    }, {
        id: string;
        address: string;
        chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
        created_at: number;
        exported_at: number | null;
        policy_ids: string[];
        additional_signers: {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }[];
        owner_id: string | null;
        public_key?: string | undefined;
        authorization_threshold?: number | undefined;
    }>, "many">;
}, "strict", z.ZodTypeAny, {
    expires_at: number;
    wallets: {
        id: string;
        address: string;
        chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
        created_at: number;
        exported_at: number | null;
        policy_ids: string[];
        additional_signers: {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }[];
        owner_id: string | null;
        public_key?: string | undefined;
        authorization_threshold?: number | undefined;
    }[];
    encrypted_authorization_key: {
        encryption_type: "HPKE";
        ciphertext: string;
        encapsulated_key: string;
    };
}, {
    expires_at: number;
    wallets: {
        id: string;
        address: string;
        chain_type: "solana" | "ethereum" | "stellar" | "cosmos" | "sui";
        created_at: number;
        exported_at: number | null;
        policy_ids: string[];
        additional_signers: {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }[];
        owner_id: string | null;
        public_key?: string | undefined;
        authorization_threshold?: number | undefined;
    }[];
    encrypted_authorization_key: {
        encryption_type: "HPKE";
        ciphertext: string;
        encapsulated_key: string;
    };
}>;
type UserSignersAuthenticateResponseType = z.infer<typeof UserSignersAuthenticateResponse>;

type DelegatedActionsConsentInputType = z.infer<typeof DelegatedActionsConsentInput>;
declare const DelegatedActionsConsentInput: z.ZodObject<{
    encrypted_tee_share: z.ZodString;
    app_share: z.ZodString;
    delegated_addresses: z.ZodArray<z.ZodObject<{
        chain_type: z.ZodUnion<[z.ZodLiteral<"solana">, z.ZodLiteral<"ethereum">]>;
        address: z.ZodString;
        wallet_index: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        address: string;
        chain_type: "solana" | "ethereum";
        wallet_index: number;
    }, {
        address: string;
        chain_type: "solana" | "ethereum";
        wallet_index?: number | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    encrypted_tee_share: string;
    app_share: string;
    delegated_addresses: {
        address: string;
        chain_type: "solana" | "ethereum";
        wallet_index: number;
    }[];
}, {
    encrypted_tee_share: string;
    app_share: string;
    delegated_addresses: {
        address: string;
        chain_type: "solana" | "ethereum";
        wallet_index?: number | undefined;
    }[];
}>;
/** @deprecated Use {@link DelegatedActionsConsentInputType} instead */
type DelegatedActionsConsentInput = z.infer<typeof DelegatedActionsConsentInput>;
declare const WalletApiRevokeResponse: z.ZodObject<{
    /** Success message */
    message: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
}, {
    message: string;
}>;
type WalletApiRevokeResponseType = z.infer<typeof WalletApiRevokeResponse>;

/** Privy uses Blockaid to execute transaction scans, these types correspond with https://docs.blockaid.io/reference/scan-json-rpc */
declare const TransactionScanningInput: z.ZodObject<{
    /** The integer chain id to send the transaction on. */
    chain_id: z.ZodString;
    /**  Additional information for Blockaid to validate against. */
    metadata: z.ZodObject<{
        domain: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        domain: string;
    }, {
        domain: string;
    }>;
    /** Raw RPC request */
    request: z.ZodObject<{
        /** RPC method to execute with the wallet. */
        method: z.ZodString;
        /** Parameters for the RPC method.  */
        params: z.ZodArray<z.ZodAny, "many">;
    }, "strip", z.ZodTypeAny, {
        params: any[];
        method: string;
    }, {
        params: any[];
        method: string;
    }>;
}, "strip", z.ZodTypeAny, {
    chain_id: string;
    metadata: {
        domain: string;
    };
    request: {
        params: any[];
        method: string;
    };
}, {
    chain_id: string;
    metadata: {
        domain: string;
    };
    request: {
        params: any[];
        method: string;
    };
}>;
type PrivyTransactionScanningInputType = z.infer<typeof TransactionScanningInput>;
declare const ValidationResult: z.ZodDiscriminatedUnion<"status", [z.ZodObject<{
    status: z.ZodLiteral<"Error">;
    error: z.ZodString;
}, "strip", z.ZodTypeAny, {
    status: "Error";
    error: string;
}, {
    status: "Error";
    error: string;
}>, z.ZodObject<{
    status: z.ZodLiteral<"Success">;
    result_type: z.ZodString;
}, "strip", z.ZodTypeAny, {
    status: "Success";
    result_type: string;
}, {
    status: "Success";
    result_type: string;
}>]>;
type PrivyTransactionScanningResponseValidationResult = z.infer<typeof ValidationResult>;
/** Information about the moving asset, on both exposures and asset diffs*/
declare const AssetInfo: z.ZodObject<{
    type: z.ZodOptional<z.ZodString>;
    symbol: z.ZodOptional<z.ZodString>;
    logo_url: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    symbol?: string | undefined;
    type?: string | undefined;
    name?: string | undefined;
    logo_url?: string | undefined;
}, {
    symbol?: string | undefined;
    type?: string | undefined;
    name?: string | undefined;
    logo_url?: string | undefined;
}>;
type PrivyTransactionScanningResponseAssetInfoType = z.infer<typeof AssetInfo>;
/** Information about the amount of asset moving, on both exposure and asset diffs */
declare const TransactionScanningResponseAssetValue: z.ZodObject<{
    value: z.ZodOptional<z.ZodString>;
    usd_price: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    value?: string | undefined;
    usd_price?: string | undefined;
}, {
    value?: string | undefined;
    usd_price?: string | undefined;
}>;
type TransactionScanningResponseAssetValueType = z.infer<typeof TransactionScanningResponseAssetValue>;
declare const TransactionScanningResponseAssetDiff: z.ZodObject<{
    asset: z.ZodObject<{
        type: z.ZodOptional<z.ZodString>;
        symbol: z.ZodOptional<z.ZodString>;
        logo_url: z.ZodOptional<z.ZodString>;
        name: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        symbol?: string | undefined;
        type?: string | undefined;
        name?: string | undefined;
        logo_url?: string | undefined;
    }, {
        symbol?: string | undefined;
        type?: string | undefined;
        name?: string | undefined;
        logo_url?: string | undefined;
    }>;
    in: z.ZodArray<z.ZodObject<{
        value: z.ZodOptional<z.ZodString>;
        usd_price: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        value?: string | undefined;
        usd_price?: string | undefined;
    }, {
        value?: string | undefined;
        usd_price?: string | undefined;
    }>, "many">;
    out: z.ZodArray<z.ZodObject<{
        value: z.ZodOptional<z.ZodString>;
        usd_price: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        value?: string | undefined;
        usd_price?: string | undefined;
    }, {
        value?: string | undefined;
        usd_price?: string | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    asset: {
        symbol?: string | undefined;
        type?: string | undefined;
        name?: string | undefined;
        logo_url?: string | undefined;
    };
    in: {
        value?: string | undefined;
        usd_price?: string | undefined;
    }[];
    out: {
        value?: string | undefined;
        usd_price?: string | undefined;
    }[];
}, {
    asset: {
        symbol?: string | undefined;
        type?: string | undefined;
        name?: string | undefined;
        logo_url?: string | undefined;
    };
    in: {
        value?: string | undefined;
        usd_price?: string | undefined;
    }[];
    out: {
        value?: string | undefined;
        usd_price?: string | undefined;
    }[];
}>;
type PrivyTransactionScanningResponseAssetDiffType = z.infer<typeof TransactionScanningResponseAssetDiff>;
declare const Exposure: z.ZodObject<{
    /** What the spender is authorized to spend */
    asset: z.ZodObject<{
        type: z.ZodOptional<z.ZodString>;
        symbol: z.ZodOptional<z.ZodString>;
        logo_url: z.ZodOptional<z.ZodString>;
        name: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        symbol?: string | undefined;
        type?: string | undefined;
        name?: string | undefined;
        logo_url?: string | undefined;
    }, {
        symbol?: string | undefined;
        type?: string | undefined;
        name?: string | undefined;
        logo_url?: string | undefined;
    }>;
    spenders: z.ZodRecord<z.ZodString, z.ZodObject<{
        value: z.ZodOptional<z.ZodString>;
        usd_price: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        value?: string | undefined;
        usd_price?: string | undefined;
    }, {
        value?: string | undefined;
        usd_price?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    asset: {
        symbol?: string | undefined;
        type?: string | undefined;
        name?: string | undefined;
        logo_url?: string | undefined;
    };
    spenders: Record<string, {
        value?: string | undefined;
        usd_price?: string | undefined;
    }>;
}, {
    asset: {
        symbol?: string | undefined;
        type?: string | undefined;
        name?: string | undefined;
        logo_url?: string | undefined;
    };
    spenders: Record<string, {
        value?: string | undefined;
        usd_price?: string | undefined;
    }>;
}>;
type PrivyTransactionScanningResponseExposureType = z.infer<typeof Exposure>;
declare const TransactionScanningResponseParams: z.ZodObject<{
    from: z.ZodOptional<z.ZodString>;
    to: z.ZodOptional<z.ZodString>;
    value: z.ZodOptional<z.ZodString>;
    data: z.ZodOptional<z.ZodString>;
    gas: z.ZodOptional<z.ZodString>;
    gas_price: z.ZodOptional<z.ZodString>;
    block_tag: z.ZodOptional<z.ZodString>;
    chain: z.ZodOptional<z.ZodString>;
    calldata: z.ZodOptional<z.ZodObject<{
        function_selector: z.ZodString;
        function_signature: z.ZodOptional<z.ZodString>;
        function_declaration: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        function_selector: string;
        function_signature?: string | undefined;
        function_declaration?: string | undefined;
    }, {
        function_selector: string;
        function_signature?: string | undefined;
        function_declaration?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    value?: string | undefined;
    chain?: string | undefined;
    from?: string | undefined;
    to?: string | undefined;
    data?: string | undefined;
    gas_price?: string | undefined;
    gas?: string | undefined;
    block_tag?: string | undefined;
    calldata?: {
        function_selector: string;
        function_signature?: string | undefined;
        function_declaration?: string | undefined;
    } | undefined;
}, {
    value?: string | undefined;
    chain?: string | undefined;
    from?: string | undefined;
    to?: string | undefined;
    data?: string | undefined;
    gas_price?: string | undefined;
    gas?: string | undefined;
    block_tag?: string | undefined;
    calldata?: {
        function_selector: string;
        function_signature?: string | undefined;
        function_declaration?: string | undefined;
    } | undefined;
}>;
type PrivyTransactionScanningResponseParamsType = z.infer<typeof TransactionScanningResponseParams>;
declare const SimulationResult: z.ZodDiscriminatedUnion<"status", [z.ZodObject<{
    status: z.ZodLiteral<"Error">;
    error: z.ZodString;
}, "strip", z.ZodTypeAny, {
    status: "Error";
    error: string;
}, {
    status: "Error";
    error: string;
}>, z.ZodObject<{
    /** Status of the blockaids simulation attempt*/
    status: z.ZodLiteral<"Success">;
    /** The params of the transaction */
    params: z.ZodOptional<z.ZodObject<{
        from: z.ZodOptional<z.ZodString>;
        to: z.ZodOptional<z.ZodString>;
        value: z.ZodOptional<z.ZodString>;
        data: z.ZodOptional<z.ZodString>;
        gas: z.ZodOptional<z.ZodString>;
        gas_price: z.ZodOptional<z.ZodString>;
        block_tag: z.ZodOptional<z.ZodString>;
        chain: z.ZodOptional<z.ZodString>;
        calldata: z.ZodOptional<z.ZodObject<{
            function_selector: z.ZodString;
            function_signature: z.ZodOptional<z.ZodString>;
            function_declaration: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            function_selector: string;
            function_signature?: string | undefined;
            function_declaration?: string | undefined;
        }, {
            function_selector: string;
            function_signature?: string | undefined;
            function_declaration?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        value?: string | undefined;
        chain?: string | undefined;
        from?: string | undefined;
        to?: string | undefined;
        data?: string | undefined;
        gas_price?: string | undefined;
        gas?: string | undefined;
        block_tag?: string | undefined;
        calldata?: {
            function_selector: string;
            function_signature?: string | undefined;
            function_declaration?: string | undefined;
        } | undefined;
    }, {
        value?: string | undefined;
        chain?: string | undefined;
        from?: string | undefined;
        to?: string | undefined;
        data?: string | undefined;
        gas_price?: string | undefined;
        gas?: string | undefined;
        block_tag?: string | undefined;
        calldata?: {
            function_selector: string;
            function_signature?: string | undefined;
            function_declaration?: string | undefined;
        } | undefined;
    }>>;
    /** The assets leaving/entering the wallet */
    assets_diffs: z.ZodArray<z.ZodObject<{
        asset: z.ZodObject<{
            type: z.ZodOptional<z.ZodString>;
            symbol: z.ZodOptional<z.ZodString>;
            logo_url: z.ZodOptional<z.ZodString>;
            name: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            symbol?: string | undefined;
            type?: string | undefined;
            name?: string | undefined;
            logo_url?: string | undefined;
        }, {
            symbol?: string | undefined;
            type?: string | undefined;
            name?: string | undefined;
            logo_url?: string | undefined;
        }>;
        in: z.ZodArray<z.ZodObject<{
            value: z.ZodOptional<z.ZodString>;
            usd_price: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            value?: string | undefined;
            usd_price?: string | undefined;
        }, {
            value?: string | undefined;
            usd_price?: string | undefined;
        }>, "many">;
        out: z.ZodArray<z.ZodObject<{
            value: z.ZodOptional<z.ZodString>;
            usd_price: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            value?: string | undefined;
            usd_price?: string | undefined;
        }, {
            value?: string | undefined;
            usd_price?: string | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        asset: {
            symbol?: string | undefined;
            type?: string | undefined;
            name?: string | undefined;
            logo_url?: string | undefined;
        };
        in: {
            value?: string | undefined;
            usd_price?: string | undefined;
        }[];
        out: {
            value?: string | undefined;
            usd_price?: string | undefined;
        }[];
    }, {
        asset: {
            symbol?: string | undefined;
            type?: string | undefined;
            name?: string | undefined;
            logo_url?: string | undefined;
        };
        in: {
            value?: string | undefined;
            usd_price?: string | undefined;
        }[];
        out: {
            value?: string | undefined;
            usd_price?: string | undefined;
        }[];
    }>, "many">;
    /** The assets approved to spend */
    exposures: z.ZodArray<z.ZodObject<{
        /** What the spender is authorized to spend */
        asset: z.ZodObject<{
            type: z.ZodOptional<z.ZodString>;
            symbol: z.ZodOptional<z.ZodString>;
            logo_url: z.ZodOptional<z.ZodString>;
            name: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            symbol?: string | undefined;
            type?: string | undefined;
            name?: string | undefined;
            logo_url?: string | undefined;
        }, {
            symbol?: string | undefined;
            type?: string | undefined;
            name?: string | undefined;
            logo_url?: string | undefined;
        }>;
        spenders: z.ZodRecord<z.ZodString, z.ZodObject<{
            value: z.ZodOptional<z.ZodString>;
            usd_price: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            value?: string | undefined;
            usd_price?: string | undefined;
        }, {
            value?: string | undefined;
            usd_price?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        asset: {
            symbol?: string | undefined;
            type?: string | undefined;
            name?: string | undefined;
            logo_url?: string | undefined;
        };
        spenders: Record<string, {
            value?: string | undefined;
            usd_price?: string | undefined;
        }>;
    }, {
        asset: {
            symbol?: string | undefined;
            type?: string | undefined;
            name?: string | undefined;
            logo_url?: string | undefined;
        };
        spenders: Record<string, {
            value?: string | undefined;
            usd_price?: string | undefined;
        }>;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    status: "Success";
    assets_diffs: {
        asset: {
            symbol?: string | undefined;
            type?: string | undefined;
            name?: string | undefined;
            logo_url?: string | undefined;
        };
        in: {
            value?: string | undefined;
            usd_price?: string | undefined;
        }[];
        out: {
            value?: string | undefined;
            usd_price?: string | undefined;
        }[];
    }[];
    exposures: {
        asset: {
            symbol?: string | undefined;
            type?: string | undefined;
            name?: string | undefined;
            logo_url?: string | undefined;
        };
        spenders: Record<string, {
            value?: string | undefined;
            usd_price?: string | undefined;
        }>;
    }[];
    params?: {
        value?: string | undefined;
        chain?: string | undefined;
        from?: string | undefined;
        to?: string | undefined;
        data?: string | undefined;
        gas_price?: string | undefined;
        gas?: string | undefined;
        block_tag?: string | undefined;
        calldata?: {
            function_selector: string;
            function_signature?: string | undefined;
            function_declaration?: string | undefined;
        } | undefined;
    } | undefined;
}, {
    status: "Success";
    assets_diffs: {
        asset: {
            symbol?: string | undefined;
            type?: string | undefined;
            name?: string | undefined;
            logo_url?: string | undefined;
        };
        in: {
            value?: string | undefined;
            usd_price?: string | undefined;
        }[];
        out: {
            value?: string | undefined;
            usd_price?: string | undefined;
        }[];
    }[];
    exposures: {
        asset: {
            symbol?: string | undefined;
            type?: string | undefined;
            name?: string | undefined;
            logo_url?: string | undefined;
        };
        spenders: Record<string, {
            value?: string | undefined;
            usd_price?: string | undefined;
        }>;
    }[];
    params?: {
        value?: string | undefined;
        chain?: string | undefined;
        from?: string | undefined;
        to?: string | undefined;
        data?: string | undefined;
        gas_price?: string | undefined;
        gas?: string | undefined;
        block_tag?: string | undefined;
        calldata?: {
            function_selector: string;
            function_signature?: string | undefined;
            function_declaration?: string | undefined;
        } | undefined;
    } | undefined;
}>]>;
type PrivyTransactionScanningResponseSimulationResult = z.infer<typeof SimulationResult>;
declare const TransactionScanningResponse: z.ZodObject<{
    validation: z.ZodDiscriminatedUnion<"status", [z.ZodObject<{
        status: z.ZodLiteral<"Error">;
        error: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        status: "Error";
        error: string;
    }, {
        status: "Error";
        error: string;
    }>, z.ZodObject<{
        status: z.ZodLiteral<"Success">;
        result_type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        status: "Success";
        result_type: string;
    }, {
        status: "Success";
        result_type: string;
    }>]>;
    simulation: z.ZodDiscriminatedUnion<"status", [z.ZodObject<{
        status: z.ZodLiteral<"Error">;
        error: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        status: "Error";
        error: string;
    }, {
        status: "Error";
        error: string;
    }>, z.ZodObject<{
        /** Status of the blockaids simulation attempt*/
        status: z.ZodLiteral<"Success">;
        /** The params of the transaction */
        params: z.ZodOptional<z.ZodObject<{
            from: z.ZodOptional<z.ZodString>;
            to: z.ZodOptional<z.ZodString>;
            value: z.ZodOptional<z.ZodString>;
            data: z.ZodOptional<z.ZodString>;
            gas: z.ZodOptional<z.ZodString>;
            gas_price: z.ZodOptional<z.ZodString>;
            block_tag: z.ZodOptional<z.ZodString>;
            chain: z.ZodOptional<z.ZodString>;
            calldata: z.ZodOptional<z.ZodObject<{
                function_selector: z.ZodString;
                function_signature: z.ZodOptional<z.ZodString>;
                function_declaration: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                function_selector: string;
                function_signature?: string | undefined;
                function_declaration?: string | undefined;
            }, {
                function_selector: string;
                function_signature?: string | undefined;
                function_declaration?: string | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            value?: string | undefined;
            chain?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_price?: string | undefined;
            gas?: string | undefined;
            block_tag?: string | undefined;
            calldata?: {
                function_selector: string;
                function_signature?: string | undefined;
                function_declaration?: string | undefined;
            } | undefined;
        }, {
            value?: string | undefined;
            chain?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_price?: string | undefined;
            gas?: string | undefined;
            block_tag?: string | undefined;
            calldata?: {
                function_selector: string;
                function_signature?: string | undefined;
                function_declaration?: string | undefined;
            } | undefined;
        }>>;
        /** The assets leaving/entering the wallet */
        assets_diffs: z.ZodArray<z.ZodObject<{
            asset: z.ZodObject<{
                type: z.ZodOptional<z.ZodString>;
                symbol: z.ZodOptional<z.ZodString>;
                logo_url: z.ZodOptional<z.ZodString>;
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                symbol?: string | undefined;
                type?: string | undefined;
                name?: string | undefined;
                logo_url?: string | undefined;
            }, {
                symbol?: string | undefined;
                type?: string | undefined;
                name?: string | undefined;
                logo_url?: string | undefined;
            }>;
            in: z.ZodArray<z.ZodObject<{
                value: z.ZodOptional<z.ZodString>;
                usd_price: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                value?: string | undefined;
                usd_price?: string | undefined;
            }, {
                value?: string | undefined;
                usd_price?: string | undefined;
            }>, "many">;
            out: z.ZodArray<z.ZodObject<{
                value: z.ZodOptional<z.ZodString>;
                usd_price: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                value?: string | undefined;
                usd_price?: string | undefined;
            }, {
                value?: string | undefined;
                usd_price?: string | undefined;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            asset: {
                symbol?: string | undefined;
                type?: string | undefined;
                name?: string | undefined;
                logo_url?: string | undefined;
            };
            in: {
                value?: string | undefined;
                usd_price?: string | undefined;
            }[];
            out: {
                value?: string | undefined;
                usd_price?: string | undefined;
            }[];
        }, {
            asset: {
                symbol?: string | undefined;
                type?: string | undefined;
                name?: string | undefined;
                logo_url?: string | undefined;
            };
            in: {
                value?: string | undefined;
                usd_price?: string | undefined;
            }[];
            out: {
                value?: string | undefined;
                usd_price?: string | undefined;
            }[];
        }>, "many">;
        /** The assets approved to spend */
        exposures: z.ZodArray<z.ZodObject<{
            /** What the spender is authorized to spend */
            asset: z.ZodObject<{
                type: z.ZodOptional<z.ZodString>;
                symbol: z.ZodOptional<z.ZodString>;
                logo_url: z.ZodOptional<z.ZodString>;
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                symbol?: string | undefined;
                type?: string | undefined;
                name?: string | undefined;
                logo_url?: string | undefined;
            }, {
                symbol?: string | undefined;
                type?: string | undefined;
                name?: string | undefined;
                logo_url?: string | undefined;
            }>;
            spenders: z.ZodRecord<z.ZodString, z.ZodObject<{
                value: z.ZodOptional<z.ZodString>;
                usd_price: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                value?: string | undefined;
                usd_price?: string | undefined;
            }, {
                value?: string | undefined;
                usd_price?: string | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            asset: {
                symbol?: string | undefined;
                type?: string | undefined;
                name?: string | undefined;
                logo_url?: string | undefined;
            };
            spenders: Record<string, {
                value?: string | undefined;
                usd_price?: string | undefined;
            }>;
        }, {
            asset: {
                symbol?: string | undefined;
                type?: string | undefined;
                name?: string | undefined;
                logo_url?: string | undefined;
            };
            spenders: Record<string, {
                value?: string | undefined;
                usd_price?: string | undefined;
            }>;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        status: "Success";
        assets_diffs: {
            asset: {
                symbol?: string | undefined;
                type?: string | undefined;
                name?: string | undefined;
                logo_url?: string | undefined;
            };
            in: {
                value?: string | undefined;
                usd_price?: string | undefined;
            }[];
            out: {
                value?: string | undefined;
                usd_price?: string | undefined;
            }[];
        }[];
        exposures: {
            asset: {
                symbol?: string | undefined;
                type?: string | undefined;
                name?: string | undefined;
                logo_url?: string | undefined;
            };
            spenders: Record<string, {
                value?: string | undefined;
                usd_price?: string | undefined;
            }>;
        }[];
        params?: {
            value?: string | undefined;
            chain?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_price?: string | undefined;
            gas?: string | undefined;
            block_tag?: string | undefined;
            calldata?: {
                function_selector: string;
                function_signature?: string | undefined;
                function_declaration?: string | undefined;
            } | undefined;
        } | undefined;
    }, {
        status: "Success";
        assets_diffs: {
            asset: {
                symbol?: string | undefined;
                type?: string | undefined;
                name?: string | undefined;
                logo_url?: string | undefined;
            };
            in: {
                value?: string | undefined;
                usd_price?: string | undefined;
            }[];
            out: {
                value?: string | undefined;
                usd_price?: string | undefined;
            }[];
        }[];
        exposures: {
            asset: {
                symbol?: string | undefined;
                type?: string | undefined;
                name?: string | undefined;
                logo_url?: string | undefined;
            };
            spenders: Record<string, {
                value?: string | undefined;
                usd_price?: string | undefined;
            }>;
        }[];
        params?: {
            value?: string | undefined;
            chain?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_price?: string | undefined;
            gas?: string | undefined;
            block_tag?: string | undefined;
            calldata?: {
                function_selector: string;
                function_signature?: string | undefined;
                function_declaration?: string | undefined;
            } | undefined;
        } | undefined;
    }>]>;
}, "strip", z.ZodTypeAny, {
    validation: {
        status: "Error";
        error: string;
    } | {
        status: "Success";
        result_type: string;
    };
    simulation: {
        status: "Error";
        error: string;
    } | {
        status: "Success";
        assets_diffs: {
            asset: {
                symbol?: string | undefined;
                type?: string | undefined;
                name?: string | undefined;
                logo_url?: string | undefined;
            };
            in: {
                value?: string | undefined;
                usd_price?: string | undefined;
            }[];
            out: {
                value?: string | undefined;
                usd_price?: string | undefined;
            }[];
        }[];
        exposures: {
            asset: {
                symbol?: string | undefined;
                type?: string | undefined;
                name?: string | undefined;
                logo_url?: string | undefined;
            };
            spenders: Record<string, {
                value?: string | undefined;
                usd_price?: string | undefined;
            }>;
        }[];
        params?: {
            value?: string | undefined;
            chain?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_price?: string | undefined;
            gas?: string | undefined;
            block_tag?: string | undefined;
            calldata?: {
                function_selector: string;
                function_signature?: string | undefined;
                function_declaration?: string | undefined;
            } | undefined;
        } | undefined;
    };
}, {
    validation: {
        status: "Error";
        error: string;
    } | {
        status: "Success";
        result_type: string;
    };
    simulation: {
        status: "Error";
        error: string;
    } | {
        status: "Success";
        assets_diffs: {
            asset: {
                symbol?: string | undefined;
                type?: string | undefined;
                name?: string | undefined;
                logo_url?: string | undefined;
            };
            in: {
                value?: string | undefined;
                usd_price?: string | undefined;
            }[];
            out: {
                value?: string | undefined;
                usd_price?: string | undefined;
            }[];
        }[];
        exposures: {
            asset: {
                symbol?: string | undefined;
                type?: string | undefined;
                name?: string | undefined;
                logo_url?: string | undefined;
            };
            spenders: Record<string, {
                value?: string | undefined;
                usd_price?: string | undefined;
            }>;
        }[];
        params?: {
            value?: string | undefined;
            chain?: string | undefined;
            from?: string | undefined;
            to?: string | undefined;
            data?: string | undefined;
            gas_price?: string | undefined;
            gas?: string | undefined;
            block_tag?: string | undefined;
            calldata?: {
                function_selector: string;
                function_signature?: string | undefined;
                function_declaration?: string | undefined;
            } | undefined;
        } | undefined;
    };
}>;
type PrivyTransactionScanningResponseType = z.infer<typeof TransactionScanningResponse>;

/**
 * Parses a JSON representation of a URL's path variables
 * for the `test_account_id`
 *
 * Throws an error if the `test_account_id` is not defined
 * or is not a valid, non-empty string.
 */
declare const TestAccountIdFromPath: z.ZodCatch<z.ZodObject<{
    test_account_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    test_account_id: string;
}, {
    test_account_id: string;
}>>;

declare const TransactionStatus: z.ZodEnum<["broadcasted", "confirmed", "delayed", "execution_reverted", "failed"]>;
declare const BaseTransactionResponse: z.ZodObject<{
    caip2: z.ZodString;
    transaction_hash: z.ZodNullable<z.ZodString>;
    status: z.ZodEnum<["broadcasted", "confirmed", "delayed", "execution_reverted", "failed"]>;
    created_at: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    status: "broadcasted" | "confirmed" | "delayed" | "execution_reverted" | "failed";
    created_at: number;
    caip2: string;
    transaction_hash: string | null;
}, {
    status: "broadcasted" | "confirmed" | "delayed" | "execution_reverted" | "failed";
    created_at: number;
    caip2: string;
    transaction_hash: string | null;
}>;
declare const TransactionResponse: z.ZodObject<{
    caip2: z.ZodString;
    transaction_hash: z.ZodNullable<z.ZodString>;
    status: z.ZodEnum<["broadcasted", "confirmed", "delayed", "execution_reverted", "failed"]>;
    created_at: z.ZodNumber;
} & {
    id: z.ZodString;
    wallet_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    status: "broadcasted" | "confirmed" | "delayed" | "execution_reverted" | "failed";
    id: string;
    created_at: number;
    caip2: string;
    transaction_hash: string | null;
    wallet_id: string;
}, {
    status: "broadcasted" | "confirmed" | "delayed" | "execution_reverted" | "failed";
    id: string;
    created_at: number;
    caip2: string;
    transaction_hash: string | null;
    wallet_id: string;
}>;
type TransactionResponseType = z.infer<typeof TransactionResponse>;
/**
 * Parses a JSON representation of a URL's path variables
 * for the `transaction_id` field.
 *
 * Throws an error if the `transaction_id` is not defined
 * or is not a valid, non-empty string.
 */
declare const TransactionIdFromPath: z.ZodCatch<z.ZodObject<{
    transaction_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    transaction_id: string;
}, {
    transaction_id: string;
}>>;

/**
 * Event types enumerates the possible types of webhook events that can be emitted to Svix by the Privy app.
 * All webhook events emitted by the Privy app must be of one of the types defined here.
 */
declare const EventType: {
    readonly UserCreated: "user.created";
    readonly UserAuthenticated: "user.authenticated";
    readonly UserLinkedAccount: "user.linked_account";
    readonly UserUnlinkedAccount: "user.unlinked_account";
    readonly UserUpdatedAccount: "user.updated_account";
    readonly UserTransferredAccount: "user.transferred_account";
    readonly UserWalletCreated: "user.wallet_created";
    readonly TransactionBroadcasted: "transaction.broadcasted";
    readonly TransactionConfirmed: "transaction.confirmed";
    readonly TransactionExecutionReverted: "transaction.execution_reverted";
    readonly TransactionDelayed: "transaction.delayed";
    readonly FundsDeposited: "wallet.funds_deposited";
    readonly FundsWithdrawn: "wallet.funds_withdrawn";
    readonly MfaEnabled: "mfa.enabled";
    readonly MfaDisabled: "mfa.disabled";
    readonly PrivateKeyExport: "wallet.private_key_export";
    readonly WalletRecoverySetup: "wallet.recovery_setup";
    readonly WalletRecovered: "wallet.recovered";
};
type EventType = (typeof EventType)[keyof typeof EventType];
declare const EventTypes: ("user.created" | "user.authenticated" | "user.linked_account" | "user.unlinked_account" | "user.updated_account" | "user.transferred_account" | "user.wallet_created" | "transaction.broadcasted" | "transaction.confirmed" | "transaction.execution_reverted" | "transaction.delayed" | "wallet.funds_deposited" | "wallet.funds_withdrawn" | "mfa.enabled" | "mfa.disabled" | "wallet.private_key_export" | "wallet.recovery_setup" | "wallet.recovered")[];
declare const AuthenticationEvent: readonly ["user.created", "user.authenticated", "user.linked_account", "user.unlinked_account", "user.updated_account"];
type AuthenticationEvent = (typeof AuthenticationEvent)[number];
declare const TransactionEvent: readonly ["transaction.broadcasted", "transaction.confirmed", "transaction.execution_reverted", "transaction.delayed"];
type TransactionEvent = (typeof TransactionEvent)[number];
declare const FundsTransferEvent: readonly ["wallet.funds_deposited", "wallet.funds_withdrawn"];
type FundsTransferEvent = (typeof FundsTransferEvent)[number];
declare const MfaEvent: readonly ["mfa.enabled", "mfa.disabled"];
type MfaEvent = (typeof MfaEvent)[number];
declare const PrivateKeyExportedEvent: readonly ["wallet.private_key_export"];
type PrivateKeyExportedEvent = (typeof PrivateKeyExportedEvent)[number];

declare const EMBEDDED_WALLET_RECOVERY_TYPES: readonly ["user_passcode_derived_recovery_key", "privy_passcode_derived_recovery_key", "privy_generated_recovery_key", "google_drive_recovery_secret", "icloud_recovery_secret", "recovery_encryption_key"];
type EmbeddedWalletRecoveryType = (typeof EMBEDDED_WALLET_RECOVERY_TYPES)[number];
type UserLinkedAccountEvent = BaseWebhookEvent<typeof EventType.UserLinkedAccount, {
    user: PrivyUser;
    account: PrivyLinkedAccount;
}>;
type UserUnlinkedAccountEvent = BaseWebhookEvent<typeof EventType.UserUnlinkedAccount, {
    user: PrivyUser;
    account: PrivyLinkedAccount;
}>;
type UserUpdatedAccountEvent = BaseWebhookEvent<typeof EventType.UserUpdatedAccount, {
    user: PrivyUser;
    account: PrivyLinkedAccount;
}>;
type UserAuthenticatedEvent = BaseWebhookEvent<typeof EventType.UserAuthenticated, {
    user: PrivyUser;
    account: PrivyLinkedAccount;
}>;
type UserCreatedEvent = BaseWebhookEvent<typeof EventType.UserCreated, {
    user: PrivyUser;
}>;
type UserWalletCreatedEvent = BaseWebhookEvent<typeof EventType.UserWalletCreated, {
    user: PrivyUser;
    wallet: PrivyBaseWalletAccount;
}>;
type UserTransferredAccountEvent = BaseWebhookEvent<typeof EventType.UserTransferredAccount, {
    fromUser: {
        id: string;
    };
    toUser: PrivyUser;
    account: PrivyLinkedAccount;
    deletedUser: true;
}>;
type TransactionBroadcastedEvent = BaseWebhookEvent<typeof EventType.TransactionBroadcasted, {
    wallet_id: string;
    transaction_id: string;
    caip2: string;
    transaction_hash: string;
}>;
type TransactionConfirmedEvent = BaseWebhookEvent<typeof EventType.TransactionConfirmed, {
    wallet_id: string;
    transaction_id: string;
    caip2: string;
    transaction_hash: string;
}>;
type TransactionExecutionRevertedEvent = BaseWebhookEvent<typeof EventType.TransactionExecutionReverted, {
    wallet_id: string;
    transaction_id: string;
    caip2: string;
    transaction_hash: string;
}>;
type TransactionDelayedEvent = BaseWebhookEvent<typeof EventType.TransactionDelayed, {
    wallet_id: string;
    transaction_id: string;
    caip2: string;
    transaction_hash: string;
    transaction_request: UnsignedEthereumTransactionType;
}>;
type WalletDepositEventPayload = {
    wallet_id: string;
    idempotency_key: string;
    caip2: string;
    asset: {
        type: 'native-token';
        address: null;
    } | {
        type: 'erc20';
        address: string;
    };
    amount: string;
    transaction_hash: string;
    sender: string;
    recipient: string;
    block: {
        number: number;
    };
};
type WalletDepositEvent = BaseWebhookEvent<typeof EventType.FundsDeposited, WalletDepositEventPayload>;
type WalletWithdrawalEventPayload = {
    wallet_id: string;
    idempotency_key: string;
    caip2: string;
    asset: {
        type: 'native-token';
        address: null;
    } | {
        type: 'erc20';
        address: string;
    };
    amount: string;
    transaction_hash: string;
    sender: string;
    recipient: string;
    block: {
        number: number;
    };
};
type WalletWithdrawalEvent = BaseWebhookEvent<typeof EventType.FundsWithdrawn, WalletWithdrawalEventPayload>;
type MfaEnabledEventPayload = {
    user_id: string;
    method: 'sms' | 'totp' | 'passkey';
};
type MfaEnabledEvent = BaseWebhookEvent<typeof EventType.MfaEnabled, MfaEnabledEventPayload>;
type MfaDisabledEventPayload = {
    user_id: string;
    method: 'sms' | 'totp' | 'passkey';
};
type MfaDisabledEvent = BaseWebhookEvent<typeof EventType.MfaDisabled, MfaDisabledEventPayload>;
type PrivateKeyExportEventPayload = {
    user_id: string;
    wallet_id: string;
    wallet_address: string;
};
type PrivateKeyExportEvent = BaseWebhookEvent<typeof EventType.PrivateKeyExport, PrivateKeyExportEventPayload>;
type WalletRecoverySetupEventPayload = {
    user_id: string;
    wallet_id: string;
    wallet_address: string;
    method: EmbeddedWalletRecoveryType;
};
type WalletRecoverySetupEvent = BaseWebhookEvent<typeof EventType.WalletRecoverySetup, WalletRecoverySetupEventPayload>;
type WalletRecoveredEventPayload = {
    user_id: string;
    wallet_id: string;
    wallet_address: string;
};
type WalletRecoveredEvent = BaseWebhookEvent<typeof EventType.WalletRecovered, WalletRecoveredEventPayload>;
type BaseWebhookEvent<TEventName extends EventType, TPayload extends Record<string, unknown>> = {
    appId: string;
    eventName: TEventName;
    payload: TPayload;
    tags?: string[];
};

declare const OnrampProvider: z.ZodEnum<["bridge", "bridge-sandbox"]>;
type OnrampProvider = z.infer<typeof OnrampProvider>;
declare const GetOnrampTermsOfServiceStatusInput: z.ZodObject<{
    provider: z.ZodEnum<["bridge", "bridge-sandbox"]>;
}, "strip", z.ZodTypeAny, {
    provider: "bridge" | "bridge-sandbox";
}, {
    provider: "bridge" | "bridge-sandbox";
}>;
type GetOnrampTermsOfServiceStatusInput = z.infer<typeof GetOnrampTermsOfServiceStatusInput>;
declare const OnrampTermsOfServiceStatusResponse: z.ZodUnion<[z.ZodObject<{
    status: z.ZodLiteral<"completed">;
}, "strip", z.ZodTypeAny, {
    status: "completed";
}, {
    status: "completed";
}>, z.ZodObject<{
    status: z.ZodLiteral<"incomplete">;
    url: z.ZodString;
}, "strip", z.ZodTypeAny, {
    status: "incomplete";
    url: string;
}, {
    status: "incomplete";
    url: string;
}>]>;
type OnrampTermsOfServiceStatusResponse = z.infer<typeof OnrampTermsOfServiceStatusResponse>;
declare const OnrampKycStatus: z.ZodEnum<["not_found", "active", "awaiting_questionnaire", "awaiting_ubo", "incomplete", "not_started", "offboarded", "paused", "rejected", "under_review"]>;
type OnrampKycStatus = z.infer<typeof OnrampKycStatus>;
declare const GetOnrampKycStatusInput: z.ZodObject<{
    provider: z.ZodEnum<["bridge", "bridge-sandbox"]>;
}, "strip", z.ZodTypeAny, {
    provider: "bridge" | "bridge-sandbox";
}, {
    provider: "bridge" | "bridge-sandbox";
}>;
type GetOnrampKycStatusInput = z.infer<typeof GetOnrampKycStatusInput>;
declare const GetOnrampKycStatusResponse: z.ZodObject<{
    user_id: z.ZodString;
    provider_user_id: z.ZodOptional<z.ZodString>;
    status: z.ZodEnum<["not_found", "active", "awaiting_questionnaire", "awaiting_ubo", "incomplete", "not_started", "offboarded", "paused", "rejected", "under_review"]>;
}, "strip", z.ZodTypeAny, {
    status: "incomplete" | "not_found" | "active" | "awaiting_questionnaire" | "awaiting_ubo" | "not_started" | "offboarded" | "paused" | "rejected" | "under_review";
    user_id: string;
    provider_user_id?: string | undefined;
}, {
    status: "incomplete" | "not_found" | "active" | "awaiting_questionnaire" | "awaiting_ubo" | "not_started" | "offboarded" | "paused" | "rejected" | "under_review";
    user_id: string;
    provider_user_id?: string | undefined;
}>;
type GetOnrampKycStatusResponse = z.infer<typeof GetOnrampKycStatusResponse>;
declare const BridgeKycAddress: z.ZodObject<{
    street_line_1: z.ZodString;
    street_line_2: z.ZodOptional<z.ZodString>;
    city: z.ZodString;
    subdivision: z.ZodString;
    postal_code: z.ZodOptional<z.ZodString>;
    country: z.ZodString;
}, "strip", z.ZodTypeAny, {
    street_line_1: string;
    city: string;
    subdivision: string;
    country: string;
    street_line_2?: string | undefined;
    postal_code?: string | undefined;
}, {
    street_line_1: string;
    city: string;
    subdivision: string;
    country: string;
    street_line_2?: string | undefined;
    postal_code?: string | undefined;
}>;
type BridgeKycAddress = z.infer<typeof BridgeKycAddress>;
declare const BridgeKycIdentifyingInformation: z.ZodObject<{
    type: z.ZodString;
    issuing_country: z.ZodString;
    number: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    expiration: z.ZodOptional<z.ZodString>;
    image_front: z.ZodOptional<z.ZodString>;
    image_back: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: string;
    issuing_country: string;
    number?: string | undefined;
    description?: string | undefined;
    expiration?: string | undefined;
    image_front?: string | undefined;
    image_back?: string | undefined;
}, {
    type: string;
    issuing_country: string;
    number?: string | undefined;
    description?: string | undefined;
    expiration?: string | undefined;
    image_front?: string | undefined;
    image_back?: string | undefined;
}>;
type BridgeKycIdentifyingInformation = z.infer<typeof BridgeKycIdentifyingInformation>;
declare const BridgeKycDocument: z.ZodObject<{
    purposes: z.ZodArray<z.ZodString, "many">;
    file: z.ZodString;
    description: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    purposes: string[];
    file: string;
    description?: string | undefined;
}, {
    purposes: string[];
    file: string;
    description?: string | undefined;
}>;
type BridgeKycDocument = z.infer<typeof BridgeKycDocument>;
declare const BridgeRegulatedActivity: z.ZodObject<{
    regulated_activities_description: z.ZodString;
    primary_regulatory_authority_country: z.ZodString;
    primary_regulatory_authority_name: z.ZodString;
    license_number: z.ZodString;
}, "strip", z.ZodTypeAny, {
    regulated_activities_description: string;
    primary_regulatory_authority_country: string;
    primary_regulatory_authority_name: string;
    license_number: string;
}, {
    regulated_activities_description: string;
    primary_regulatory_authority_country: string;
    primary_regulatory_authority_name: string;
    license_number: string;
}>;
type BridgeRegulatedActivity = z.infer<typeof BridgeRegulatedActivity>;
declare const BridgeBusinessAssociatedPerson: z.ZodObject<{
    first_name: z.ZodString;
    last_name: z.ZodString;
    email: z.ZodString;
    residential_address: z.ZodObject<{
        street_line_1: z.ZodString;
        street_line_2: z.ZodOptional<z.ZodString>;
        city: z.ZodString;
        subdivision: z.ZodString;
        postal_code: z.ZodOptional<z.ZodString>;
        country: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        street_line_1: z.ZodString;
        street_line_2: z.ZodOptional<z.ZodString>;
        city: z.ZodString;
        subdivision: z.ZodString;
        postal_code: z.ZodOptional<z.ZodString>;
        country: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        street_line_1: z.ZodString;
        street_line_2: z.ZodOptional<z.ZodString>;
        city: z.ZodString;
        subdivision: z.ZodString;
        postal_code: z.ZodOptional<z.ZodString>;
        country: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>;
    birth_date: z.ZodString;
    has_ownership: z.ZodBoolean;
    has_control: z.ZodBoolean;
    is_signer: z.ZodBoolean;
    identifying_information: z.ZodArray<z.ZodObject<{
        type: z.ZodString;
        issuing_country: z.ZodString;
        number: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        expiration: z.ZodOptional<z.ZodString>;
        image_front: z.ZodOptional<z.ZodString>;
        image_back: z.ZodOptional<z.ZodString>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodString;
        issuing_country: z.ZodString;
        number: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        expiration: z.ZodOptional<z.ZodString>;
        image_front: z.ZodOptional<z.ZodString>;
        image_back: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodString;
        issuing_country: z.ZodString;
        number: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        expiration: z.ZodOptional<z.ZodString>;
        image_front: z.ZodOptional<z.ZodString>;
        image_back: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">>, "many">;
    middle_name: z.ZodOptional<z.ZodString>;
    transliterated_first_name: z.ZodOptional<z.ZodString>;
    transliterated_middle_name: z.ZodOptional<z.ZodString>;
    transliterated_last_name: z.ZodOptional<z.ZodString>;
    phone: z.ZodOptional<z.ZodString>;
    transliterated_residential_address: z.ZodOptional<z.ZodObject<{
        street_line_1: z.ZodString;
        street_line_2: z.ZodOptional<z.ZodString>;
        city: z.ZodString;
        subdivision: z.ZodString;
        postal_code: z.ZodOptional<z.ZodString>;
        country: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        street_line_1: z.ZodString;
        street_line_2: z.ZodOptional<z.ZodString>;
        city: z.ZodString;
        subdivision: z.ZodString;
        postal_code: z.ZodOptional<z.ZodString>;
        country: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        street_line_1: z.ZodString;
        street_line_2: z.ZodOptional<z.ZodString>;
        city: z.ZodString;
        subdivision: z.ZodString;
        postal_code: z.ZodOptional<z.ZodString>;
        country: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>>;
    is_director: z.ZodOptional<z.ZodBoolean>;
    title: z.ZodOptional<z.ZodString>;
    ownership_percentage: z.ZodOptional<z.ZodNumber>;
    relationship_established_at: z.ZodOptional<z.ZodString>;
    nationality: z.ZodOptional<z.ZodString>;
    verified_selfie_at: z.ZodOptional<z.ZodString>;
    completed_customer_safety_check_at: z.ZodOptional<z.ZodString>;
    documents: z.ZodOptional<z.ZodArray<z.ZodObject<{
        purposes: z.ZodArray<z.ZodString, "many">;
        file: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        purposes: z.ZodArray<z.ZodString, "many">;
        file: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        purposes: z.ZodArray<z.ZodString, "many">;
        file: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">>, "many">>;
}, "strip", z.ZodTypeAny, {
    email: string;
    first_name: string;
    last_name: string;
    residential_address: {
        street_line_1: string;
        city: string;
        subdivision: string;
        country: string;
        street_line_2?: string | undefined;
        postal_code?: string | undefined;
    } & {
        [k: string]: unknown;
    };
    birth_date: string;
    has_ownership: boolean;
    has_control: boolean;
    is_signer: boolean;
    identifying_information: z.objectOutputType<{
        type: z.ZodString;
        issuing_country: z.ZodString;
        number: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        expiration: z.ZodOptional<z.ZodString>;
        image_front: z.ZodOptional<z.ZodString>;
        image_back: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">[];
    phone?: string | undefined;
    middle_name?: string | undefined;
    transliterated_first_name?: string | undefined;
    transliterated_middle_name?: string | undefined;
    transliterated_last_name?: string | undefined;
    transliterated_residential_address?: z.objectOutputType<{
        street_line_1: z.ZodString;
        street_line_2: z.ZodOptional<z.ZodString>;
        city: z.ZodString;
        subdivision: z.ZodString;
        postal_code: z.ZodOptional<z.ZodString>;
        country: z.ZodString;
    }, z.ZodTypeAny, "passthrough"> | undefined;
    is_director?: boolean | undefined;
    title?: string | undefined;
    ownership_percentage?: number | undefined;
    relationship_established_at?: string | undefined;
    nationality?: string | undefined;
    verified_selfie_at?: string | undefined;
    completed_customer_safety_check_at?: string | undefined;
    documents?: z.objectOutputType<{
        purposes: z.ZodArray<z.ZodString, "many">;
        file: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">[] | undefined;
}, {
    email: string;
    first_name: string;
    last_name: string;
    residential_address: {
        street_line_1: string;
        city: string;
        subdivision: string;
        country: string;
        street_line_2?: string | undefined;
        postal_code?: string | undefined;
    } & {
        [k: string]: unknown;
    };
    birth_date: string;
    has_ownership: boolean;
    has_control: boolean;
    is_signer: boolean;
    identifying_information: z.objectInputType<{
        type: z.ZodString;
        issuing_country: z.ZodString;
        number: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        expiration: z.ZodOptional<z.ZodString>;
        image_front: z.ZodOptional<z.ZodString>;
        image_back: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">[];
    phone?: string | undefined;
    middle_name?: string | undefined;
    transliterated_first_name?: string | undefined;
    transliterated_middle_name?: string | undefined;
    transliterated_last_name?: string | undefined;
    transliterated_residential_address?: z.objectInputType<{
        street_line_1: z.ZodString;
        street_line_2: z.ZodOptional<z.ZodString>;
        city: z.ZodString;
        subdivision: z.ZodString;
        postal_code: z.ZodOptional<z.ZodString>;
        country: z.ZodString;
    }, z.ZodTypeAny, "passthrough"> | undefined;
    is_director?: boolean | undefined;
    title?: string | undefined;
    ownership_percentage?: number | undefined;
    relationship_established_at?: string | undefined;
    nationality?: string | undefined;
    verified_selfie_at?: string | undefined;
    completed_customer_safety_check_at?: string | undefined;
    documents?: z.objectInputType<{
        purposes: z.ZodArray<z.ZodString, "many">;
        file: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">[] | undefined;
}>;
type BridgeBusinessAssociatedPerson = z.infer<typeof BridgeBusinessAssociatedPerson>;
declare const BridgeTradedListings: z.ZodObject<{
    market_identifier_code: z.ZodString;
    stock_number: z.ZodString;
    ticket: z.ZodString;
}, "strip", z.ZodTypeAny, {
    market_identifier_code: string;
    stock_number: string;
    ticket: string;
}, {
    market_identifier_code: string;
    stock_number: string;
    ticket: string;
}>;
type BridgeTradedListings = z.infer<typeof BridgeTradedListings>;
/**
 * @link API Reference: https://apidocs.bridge.xyz/reference/post_customers
 *
 * `signed_agreement_id` is required to create a customer, but is not required to update a customer. We'll
 * define it as optional here, but it will be required when creating a customer.
 */
declare const BridgeKycData: z.ZodObject<{
    type: z.ZodLiteral<"individual">;
    first_name: z.ZodString;
    last_name: z.ZodString;
    email: z.ZodString;
    residential_address: z.ZodObject<{
        street_line_1: z.ZodString;
        street_line_2: z.ZodOptional<z.ZodString>;
        city: z.ZodString;
        subdivision: z.ZodString;
        postal_code: z.ZodOptional<z.ZodString>;
        country: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        street_line_1: z.ZodString;
        street_line_2: z.ZodOptional<z.ZodString>;
        city: z.ZodString;
        subdivision: z.ZodString;
        postal_code: z.ZodOptional<z.ZodString>;
        country: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        street_line_1: z.ZodString;
        street_line_2: z.ZodOptional<z.ZodString>;
        city: z.ZodString;
        subdivision: z.ZodString;
        postal_code: z.ZodOptional<z.ZodString>;
        country: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>;
    birth_date: z.ZodString;
    identifying_information: z.ZodArray<z.ZodObject<{
        type: z.ZodString;
        issuing_country: z.ZodString;
        number: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        expiration: z.ZodOptional<z.ZodString>;
        image_front: z.ZodOptional<z.ZodString>;
        image_back: z.ZodOptional<z.ZodString>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodString;
        issuing_country: z.ZodString;
        number: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        expiration: z.ZodOptional<z.ZodString>;
        image_front: z.ZodOptional<z.ZodString>;
        image_back: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodString;
        issuing_country: z.ZodString;
        number: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        expiration: z.ZodOptional<z.ZodString>;
        image_front: z.ZodOptional<z.ZodString>;
        image_back: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">>, "many">;
    ofac_screen: z.ZodOptional<z.ZodObject<{
        screened_at: z.ZodString;
        result: z.ZodEnum<["passed"]>;
    }, "strip", z.ZodTypeAny, {
        screened_at: string;
        result: "passed";
    }, {
        screened_at: string;
        result: "passed";
    }>>;
    kyc_screen: z.ZodOptional<z.ZodObject<{
        screened_at: z.ZodString;
        result: z.ZodEnum<["passed"]>;
    }, "strip", z.ZodTypeAny, {
        screened_at: string;
        result: "passed";
    }, {
        screened_at: string;
        result: "passed";
    }>>;
    signed_agreement_id: z.ZodOptional<z.ZodString>;
    middle_name: z.ZodOptional<z.ZodString>;
    transliterated_first_name: z.ZodOptional<z.ZodString>;
    transliterated_middle_name: z.ZodOptional<z.ZodString>;
    transliterated_last_name: z.ZodOptional<z.ZodString>;
    phone: z.ZodOptional<z.ZodString>;
    transliterated_residential_address: z.ZodOptional<z.ZodObject<{
        street_line_1: z.ZodString;
        street_line_2: z.ZodOptional<z.ZodString>;
        city: z.ZodString;
        subdivision: z.ZodString;
        postal_code: z.ZodOptional<z.ZodString>;
        country: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        street_line_1: z.ZodString;
        street_line_2: z.ZodOptional<z.ZodString>;
        city: z.ZodString;
        subdivision: z.ZodString;
        postal_code: z.ZodOptional<z.ZodString>;
        country: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        street_line_1: z.ZodString;
        street_line_2: z.ZodOptional<z.ZodString>;
        city: z.ZodString;
        subdivision: z.ZodString;
        postal_code: z.ZodOptional<z.ZodString>;
        country: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>>;
    endorsements: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    account_purpose: z.ZodOptional<z.ZodString>;
    account_purpose_other: z.ZodOptional<z.ZodString>;
    employment_status: z.ZodOptional<z.ZodString>;
    expected_monthly_payments_usd: z.ZodOptional<z.ZodString>;
    acting_as_intermediary: z.ZodOptional<z.ZodString>;
    most_recent_occupation: z.ZodOptional<z.ZodString>;
    source_of_funds: z.ZodOptional<z.ZodString>;
    nationality: z.ZodOptional<z.ZodString>;
    verified_selfie_at: z.ZodOptional<z.ZodString>;
    completed_customer_safety_check_at: z.ZodOptional<z.ZodString>;
    documents: z.ZodOptional<z.ZodArray<z.ZodObject<{
        purposes: z.ZodArray<z.ZodString, "many">;
        file: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        purposes: z.ZodArray<z.ZodString, "many">;
        file: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        purposes: z.ZodArray<z.ZodString, "many">;
        file: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">>, "many">>;
    has_signed_terms_of_service: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    type: "individual";
    email: string;
    first_name: string;
    last_name: string;
    residential_address: {
        street_line_1: string;
        city: string;
        subdivision: string;
        country: string;
        street_line_2?: string | undefined;
        postal_code?: string | undefined;
    } & {
        [k: string]: unknown;
    };
    birth_date: string;
    identifying_information: z.objectOutputType<{
        type: z.ZodString;
        issuing_country: z.ZodString;
        number: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        expiration: z.ZodOptional<z.ZodString>;
        image_front: z.ZodOptional<z.ZodString>;
        image_back: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">[];
    phone?: string | undefined;
    middle_name?: string | undefined;
    transliterated_first_name?: string | undefined;
    transliterated_middle_name?: string | undefined;
    transliterated_last_name?: string | undefined;
    transliterated_residential_address?: z.objectOutputType<{
        street_line_1: z.ZodString;
        street_line_2: z.ZodOptional<z.ZodString>;
        city: z.ZodString;
        subdivision: z.ZodString;
        postal_code: z.ZodOptional<z.ZodString>;
        country: z.ZodString;
    }, z.ZodTypeAny, "passthrough"> | undefined;
    nationality?: string | undefined;
    verified_selfie_at?: string | undefined;
    completed_customer_safety_check_at?: string | undefined;
    documents?: z.objectOutputType<{
        purposes: z.ZodArray<z.ZodString, "many">;
        file: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">[] | undefined;
    ofac_screen?: {
        screened_at: string;
        result: "passed";
    } | undefined;
    kyc_screen?: {
        screened_at: string;
        result: "passed";
    } | undefined;
    signed_agreement_id?: string | undefined;
    endorsements?: string[] | undefined;
    account_purpose?: string | undefined;
    account_purpose_other?: string | undefined;
    employment_status?: string | undefined;
    expected_monthly_payments_usd?: string | undefined;
    acting_as_intermediary?: string | undefined;
    most_recent_occupation?: string | undefined;
    source_of_funds?: string | undefined;
    has_signed_terms_of_service?: boolean | undefined;
}, {
    type: "individual";
    email: string;
    first_name: string;
    last_name: string;
    residential_address: {
        street_line_1: string;
        city: string;
        subdivision: string;
        country: string;
        street_line_2?: string | undefined;
        postal_code?: string | undefined;
    } & {
        [k: string]: unknown;
    };
    birth_date: string;
    identifying_information: z.objectInputType<{
        type: z.ZodString;
        issuing_country: z.ZodString;
        number: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        expiration: z.ZodOptional<z.ZodString>;
        image_front: z.ZodOptional<z.ZodString>;
        image_back: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">[];
    phone?: string | undefined;
    middle_name?: string | undefined;
    transliterated_first_name?: string | undefined;
    transliterated_middle_name?: string | undefined;
    transliterated_last_name?: string | undefined;
    transliterated_residential_address?: z.objectInputType<{
        street_line_1: z.ZodString;
        street_line_2: z.ZodOptional<z.ZodString>;
        city: z.ZodString;
        subdivision: z.ZodString;
        postal_code: z.ZodOptional<z.ZodString>;
        country: z.ZodString;
    }, z.ZodTypeAny, "passthrough"> | undefined;
    nationality?: string | undefined;
    verified_selfie_at?: string | undefined;
    completed_customer_safety_check_at?: string | undefined;
    documents?: z.objectInputType<{
        purposes: z.ZodArray<z.ZodString, "many">;
        file: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">[] | undefined;
    ofac_screen?: {
        screened_at: string;
        result: "passed";
    } | undefined;
    kyc_screen?: {
        screened_at: string;
        result: "passed";
    } | undefined;
    signed_agreement_id?: string | undefined;
    endorsements?: string[] | undefined;
    account_purpose?: string | undefined;
    account_purpose_other?: string | undefined;
    employment_status?: string | undefined;
    expected_monthly_payments_usd?: string | undefined;
    acting_as_intermediary?: string | undefined;
    most_recent_occupation?: string | undefined;
    source_of_funds?: string | undefined;
    has_signed_terms_of_service?: boolean | undefined;
}>;
type BridgeKycData = z.infer<typeof BridgeKycData>;
declare const OnrampKycInput: z.ZodDiscriminatedUnion<"provider", [z.ZodObject<{
    provider: z.ZodLiteral<"bridge">;
    data: z.ZodObject<{
        type: z.ZodLiteral<"individual">;
        first_name: z.ZodString;
        last_name: z.ZodString;
        email: z.ZodString;
        residential_address: z.ZodObject<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>;
        birth_date: z.ZodString;
        identifying_information: z.ZodArray<z.ZodObject<{
            type: z.ZodString;
            issuing_country: z.ZodString;
            number: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
            expiration: z.ZodOptional<z.ZodString>;
            image_front: z.ZodOptional<z.ZodString>;
            image_back: z.ZodOptional<z.ZodString>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodString;
            issuing_country: z.ZodString;
            number: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
            expiration: z.ZodOptional<z.ZodString>;
            image_front: z.ZodOptional<z.ZodString>;
            image_back: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodString;
            issuing_country: z.ZodString;
            number: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
            expiration: z.ZodOptional<z.ZodString>;
            image_front: z.ZodOptional<z.ZodString>;
            image_back: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        ofac_screen: z.ZodOptional<z.ZodObject<{
            screened_at: z.ZodString;
            result: z.ZodEnum<["passed"]>;
        }, "strip", z.ZodTypeAny, {
            screened_at: string;
            result: "passed";
        }, {
            screened_at: string;
            result: "passed";
        }>>;
        kyc_screen: z.ZodOptional<z.ZodObject<{
            screened_at: z.ZodString;
            result: z.ZodEnum<["passed"]>;
        }, "strip", z.ZodTypeAny, {
            screened_at: string;
            result: "passed";
        }, {
            screened_at: string;
            result: "passed";
        }>>;
        signed_agreement_id: z.ZodOptional<z.ZodString>;
        middle_name: z.ZodOptional<z.ZodString>;
        transliterated_first_name: z.ZodOptional<z.ZodString>;
        transliterated_middle_name: z.ZodOptional<z.ZodString>;
        transliterated_last_name: z.ZodOptional<z.ZodString>;
        phone: z.ZodOptional<z.ZodString>;
        transliterated_residential_address: z.ZodOptional<z.ZodObject<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>>;
        endorsements: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        account_purpose: z.ZodOptional<z.ZodString>;
        account_purpose_other: z.ZodOptional<z.ZodString>;
        employment_status: z.ZodOptional<z.ZodString>;
        expected_monthly_payments_usd: z.ZodOptional<z.ZodString>;
        acting_as_intermediary: z.ZodOptional<z.ZodString>;
        most_recent_occupation: z.ZodOptional<z.ZodString>;
        source_of_funds: z.ZodOptional<z.ZodString>;
        nationality: z.ZodOptional<z.ZodString>;
        verified_selfie_at: z.ZodOptional<z.ZodString>;
        completed_customer_safety_check_at: z.ZodOptional<z.ZodString>;
        documents: z.ZodOptional<z.ZodArray<z.ZodObject<{
            purposes: z.ZodArray<z.ZodString, "many">;
            file: z.ZodString;
            description: z.ZodOptional<z.ZodString>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            purposes: z.ZodArray<z.ZodString, "many">;
            file: z.ZodString;
            description: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            purposes: z.ZodArray<z.ZodString, "many">;
            file: z.ZodString;
            description: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough">>, "many">>;
        has_signed_terms_of_service: z.ZodOptional<z.ZodBoolean>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"individual">;
        first_name: z.ZodString;
        last_name: z.ZodString;
        email: z.ZodString;
        residential_address: z.ZodObject<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>;
        birth_date: z.ZodString;
        identifying_information: z.ZodArray<z.ZodObject<{
            type: z.ZodString;
            issuing_country: z.ZodString;
            number: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
            expiration: z.ZodOptional<z.ZodString>;
            image_front: z.ZodOptional<z.ZodString>;
            image_back: z.ZodOptional<z.ZodString>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodString;
            issuing_country: z.ZodString;
            number: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
            expiration: z.ZodOptional<z.ZodString>;
            image_front: z.ZodOptional<z.ZodString>;
            image_back: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodString;
            issuing_country: z.ZodString;
            number: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
            expiration: z.ZodOptional<z.ZodString>;
            image_front: z.ZodOptional<z.ZodString>;
            image_back: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        ofac_screen: z.ZodOptional<z.ZodObject<{
            screened_at: z.ZodString;
            result: z.ZodEnum<["passed"]>;
        }, "strip", z.ZodTypeAny, {
            screened_at: string;
            result: "passed";
        }, {
            screened_at: string;
            result: "passed";
        }>>;
        kyc_screen: z.ZodOptional<z.ZodObject<{
            screened_at: z.ZodString;
            result: z.ZodEnum<["passed"]>;
        }, "strip", z.ZodTypeAny, {
            screened_at: string;
            result: "passed";
        }, {
            screened_at: string;
            result: "passed";
        }>>;
        signed_agreement_id: z.ZodOptional<z.ZodString>;
        middle_name: z.ZodOptional<z.ZodString>;
        transliterated_first_name: z.ZodOptional<z.ZodString>;
        transliterated_middle_name: z.ZodOptional<z.ZodString>;
        transliterated_last_name: z.ZodOptional<z.ZodString>;
        phone: z.ZodOptional<z.ZodString>;
        transliterated_residential_address: z.ZodOptional<z.ZodObject<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>>;
        endorsements: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        account_purpose: z.ZodOptional<z.ZodString>;
        account_purpose_other: z.ZodOptional<z.ZodString>;
        employment_status: z.ZodOptional<z.ZodString>;
        expected_monthly_payments_usd: z.ZodOptional<z.ZodString>;
        acting_as_intermediary: z.ZodOptional<z.ZodString>;
        most_recent_occupation: z.ZodOptional<z.ZodString>;
        source_of_funds: z.ZodOptional<z.ZodString>;
        nationality: z.ZodOptional<z.ZodString>;
        verified_selfie_at: z.ZodOptional<z.ZodString>;
        completed_customer_safety_check_at: z.ZodOptional<z.ZodString>;
        documents: z.ZodOptional<z.ZodArray<z.ZodObject<{
            purposes: z.ZodArray<z.ZodString, "many">;
            file: z.ZodString;
            description: z.ZodOptional<z.ZodString>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            purposes: z.ZodArray<z.ZodString, "many">;
            file: z.ZodString;
            description: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            purposes: z.ZodArray<z.ZodString, "many">;
            file: z.ZodString;
            description: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough">>, "many">>;
        has_signed_terms_of_service: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"individual">;
        first_name: z.ZodString;
        last_name: z.ZodString;
        email: z.ZodString;
        residential_address: z.ZodObject<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>;
        birth_date: z.ZodString;
        identifying_information: z.ZodArray<z.ZodObject<{
            type: z.ZodString;
            issuing_country: z.ZodString;
            number: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
            expiration: z.ZodOptional<z.ZodString>;
            image_front: z.ZodOptional<z.ZodString>;
            image_back: z.ZodOptional<z.ZodString>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodString;
            issuing_country: z.ZodString;
            number: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
            expiration: z.ZodOptional<z.ZodString>;
            image_front: z.ZodOptional<z.ZodString>;
            image_back: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodString;
            issuing_country: z.ZodString;
            number: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
            expiration: z.ZodOptional<z.ZodString>;
            image_front: z.ZodOptional<z.ZodString>;
            image_back: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        ofac_screen: z.ZodOptional<z.ZodObject<{
            screened_at: z.ZodString;
            result: z.ZodEnum<["passed"]>;
        }, "strip", z.ZodTypeAny, {
            screened_at: string;
            result: "passed";
        }, {
            screened_at: string;
            result: "passed";
        }>>;
        kyc_screen: z.ZodOptional<z.ZodObject<{
            screened_at: z.ZodString;
            result: z.ZodEnum<["passed"]>;
        }, "strip", z.ZodTypeAny, {
            screened_at: string;
            result: "passed";
        }, {
            screened_at: string;
            result: "passed";
        }>>;
        signed_agreement_id: z.ZodOptional<z.ZodString>;
        middle_name: z.ZodOptional<z.ZodString>;
        transliterated_first_name: z.ZodOptional<z.ZodString>;
        transliterated_middle_name: z.ZodOptional<z.ZodString>;
        transliterated_last_name: z.ZodOptional<z.ZodString>;
        phone: z.ZodOptional<z.ZodString>;
        transliterated_residential_address: z.ZodOptional<z.ZodObject<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>>;
        endorsements: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        account_purpose: z.ZodOptional<z.ZodString>;
        account_purpose_other: z.ZodOptional<z.ZodString>;
        employment_status: z.ZodOptional<z.ZodString>;
        expected_monthly_payments_usd: z.ZodOptional<z.ZodString>;
        acting_as_intermediary: z.ZodOptional<z.ZodString>;
        most_recent_occupation: z.ZodOptional<z.ZodString>;
        source_of_funds: z.ZodOptional<z.ZodString>;
        nationality: z.ZodOptional<z.ZodString>;
        verified_selfie_at: z.ZodOptional<z.ZodString>;
        completed_customer_safety_check_at: z.ZodOptional<z.ZodString>;
        documents: z.ZodOptional<z.ZodArray<z.ZodObject<{
            purposes: z.ZodArray<z.ZodString, "many">;
            file: z.ZodString;
            description: z.ZodOptional<z.ZodString>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            purposes: z.ZodArray<z.ZodString, "many">;
            file: z.ZodString;
            description: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            purposes: z.ZodArray<z.ZodString, "many">;
            file: z.ZodString;
            description: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough">>, "many">>;
        has_signed_terms_of_service: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">>;
}, "strip", z.ZodTypeAny, {
    provider: "bridge";
    data: {
        type: "individual";
        email: string;
        first_name: string;
        last_name: string;
        residential_address: {
            street_line_1: string;
            city: string;
            subdivision: string;
            country: string;
            street_line_2?: string | undefined;
            postal_code?: string | undefined;
        } & {
            [k: string]: unknown;
        };
        birth_date: string;
        identifying_information: z.objectOutputType<{
            type: z.ZodString;
            issuing_country: z.ZodString;
            number: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
            expiration: z.ZodOptional<z.ZodString>;
            image_front: z.ZodOptional<z.ZodString>;
            image_back: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough">[];
        phone?: string | undefined;
        middle_name?: string | undefined;
        transliterated_first_name?: string | undefined;
        transliterated_middle_name?: string | undefined;
        transliterated_last_name?: string | undefined;
        transliterated_residential_address?: z.objectOutputType<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, z.ZodTypeAny, "passthrough"> | undefined;
        nationality?: string | undefined;
        verified_selfie_at?: string | undefined;
        completed_customer_safety_check_at?: string | undefined;
        documents?: z.objectOutputType<{
            purposes: z.ZodArray<z.ZodString, "many">;
            file: z.ZodString;
            description: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough">[] | undefined;
        ofac_screen?: {
            screened_at: string;
            result: "passed";
        } | undefined;
        kyc_screen?: {
            screened_at: string;
            result: "passed";
        } | undefined;
        signed_agreement_id?: string | undefined;
        endorsements?: string[] | undefined;
        account_purpose?: string | undefined;
        account_purpose_other?: string | undefined;
        employment_status?: string | undefined;
        expected_monthly_payments_usd?: string | undefined;
        acting_as_intermediary?: string | undefined;
        most_recent_occupation?: string | undefined;
        source_of_funds?: string | undefined;
        has_signed_terms_of_service?: boolean | undefined;
    } & {
        [k: string]: unknown;
    };
}, {
    provider: "bridge";
    data: {
        type: "individual";
        email: string;
        first_name: string;
        last_name: string;
        residential_address: {
            street_line_1: string;
            city: string;
            subdivision: string;
            country: string;
            street_line_2?: string | undefined;
            postal_code?: string | undefined;
        } & {
            [k: string]: unknown;
        };
        birth_date: string;
        identifying_information: z.objectInputType<{
            type: z.ZodString;
            issuing_country: z.ZodString;
            number: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
            expiration: z.ZodOptional<z.ZodString>;
            image_front: z.ZodOptional<z.ZodString>;
            image_back: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough">[];
        phone?: string | undefined;
        middle_name?: string | undefined;
        transliterated_first_name?: string | undefined;
        transliterated_middle_name?: string | undefined;
        transliterated_last_name?: string | undefined;
        transliterated_residential_address?: z.objectInputType<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, z.ZodTypeAny, "passthrough"> | undefined;
        nationality?: string | undefined;
        verified_selfie_at?: string | undefined;
        completed_customer_safety_check_at?: string | undefined;
        documents?: z.objectInputType<{
            purposes: z.ZodArray<z.ZodString, "many">;
            file: z.ZodString;
            description: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough">[] | undefined;
        ofac_screen?: {
            screened_at: string;
            result: "passed";
        } | undefined;
        kyc_screen?: {
            screened_at: string;
            result: "passed";
        } | undefined;
        signed_agreement_id?: string | undefined;
        endorsements?: string[] | undefined;
        account_purpose?: string | undefined;
        account_purpose_other?: string | undefined;
        employment_status?: string | undefined;
        expected_monthly_payments_usd?: string | undefined;
        acting_as_intermediary?: string | undefined;
        most_recent_occupation?: string | undefined;
        source_of_funds?: string | undefined;
        has_signed_terms_of_service?: boolean | undefined;
    } & {
        [k: string]: unknown;
    };
}>, z.ZodObject<{
    provider: z.ZodLiteral<"bridge-sandbox">;
    data: z.ZodObject<{
        type: z.ZodLiteral<"individual">;
        first_name: z.ZodString;
        last_name: z.ZodString;
        email: z.ZodString;
        residential_address: z.ZodObject<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>;
        birth_date: z.ZodString;
        identifying_information: z.ZodArray<z.ZodObject<{
            type: z.ZodString;
            issuing_country: z.ZodString;
            number: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
            expiration: z.ZodOptional<z.ZodString>;
            image_front: z.ZodOptional<z.ZodString>;
            image_back: z.ZodOptional<z.ZodString>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodString;
            issuing_country: z.ZodString;
            number: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
            expiration: z.ZodOptional<z.ZodString>;
            image_front: z.ZodOptional<z.ZodString>;
            image_back: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodString;
            issuing_country: z.ZodString;
            number: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
            expiration: z.ZodOptional<z.ZodString>;
            image_front: z.ZodOptional<z.ZodString>;
            image_back: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        ofac_screen: z.ZodOptional<z.ZodObject<{
            screened_at: z.ZodString;
            result: z.ZodEnum<["passed"]>;
        }, "strip", z.ZodTypeAny, {
            screened_at: string;
            result: "passed";
        }, {
            screened_at: string;
            result: "passed";
        }>>;
        kyc_screen: z.ZodOptional<z.ZodObject<{
            screened_at: z.ZodString;
            result: z.ZodEnum<["passed"]>;
        }, "strip", z.ZodTypeAny, {
            screened_at: string;
            result: "passed";
        }, {
            screened_at: string;
            result: "passed";
        }>>;
        signed_agreement_id: z.ZodOptional<z.ZodString>;
        middle_name: z.ZodOptional<z.ZodString>;
        transliterated_first_name: z.ZodOptional<z.ZodString>;
        transliterated_middle_name: z.ZodOptional<z.ZodString>;
        transliterated_last_name: z.ZodOptional<z.ZodString>;
        phone: z.ZodOptional<z.ZodString>;
        transliterated_residential_address: z.ZodOptional<z.ZodObject<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>>;
        endorsements: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        account_purpose: z.ZodOptional<z.ZodString>;
        account_purpose_other: z.ZodOptional<z.ZodString>;
        employment_status: z.ZodOptional<z.ZodString>;
        expected_monthly_payments_usd: z.ZodOptional<z.ZodString>;
        acting_as_intermediary: z.ZodOptional<z.ZodString>;
        most_recent_occupation: z.ZodOptional<z.ZodString>;
        source_of_funds: z.ZodOptional<z.ZodString>;
        nationality: z.ZodOptional<z.ZodString>;
        verified_selfie_at: z.ZodOptional<z.ZodString>;
        completed_customer_safety_check_at: z.ZodOptional<z.ZodString>;
        documents: z.ZodOptional<z.ZodArray<z.ZodObject<{
            purposes: z.ZodArray<z.ZodString, "many">;
            file: z.ZodString;
            description: z.ZodOptional<z.ZodString>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            purposes: z.ZodArray<z.ZodString, "many">;
            file: z.ZodString;
            description: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            purposes: z.ZodArray<z.ZodString, "many">;
            file: z.ZodString;
            description: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough">>, "many">>;
        has_signed_terms_of_service: z.ZodOptional<z.ZodBoolean>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"individual">;
        first_name: z.ZodString;
        last_name: z.ZodString;
        email: z.ZodString;
        residential_address: z.ZodObject<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>;
        birth_date: z.ZodString;
        identifying_information: z.ZodArray<z.ZodObject<{
            type: z.ZodString;
            issuing_country: z.ZodString;
            number: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
            expiration: z.ZodOptional<z.ZodString>;
            image_front: z.ZodOptional<z.ZodString>;
            image_back: z.ZodOptional<z.ZodString>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodString;
            issuing_country: z.ZodString;
            number: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
            expiration: z.ZodOptional<z.ZodString>;
            image_front: z.ZodOptional<z.ZodString>;
            image_back: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodString;
            issuing_country: z.ZodString;
            number: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
            expiration: z.ZodOptional<z.ZodString>;
            image_front: z.ZodOptional<z.ZodString>;
            image_back: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        ofac_screen: z.ZodOptional<z.ZodObject<{
            screened_at: z.ZodString;
            result: z.ZodEnum<["passed"]>;
        }, "strip", z.ZodTypeAny, {
            screened_at: string;
            result: "passed";
        }, {
            screened_at: string;
            result: "passed";
        }>>;
        kyc_screen: z.ZodOptional<z.ZodObject<{
            screened_at: z.ZodString;
            result: z.ZodEnum<["passed"]>;
        }, "strip", z.ZodTypeAny, {
            screened_at: string;
            result: "passed";
        }, {
            screened_at: string;
            result: "passed";
        }>>;
        signed_agreement_id: z.ZodOptional<z.ZodString>;
        middle_name: z.ZodOptional<z.ZodString>;
        transliterated_first_name: z.ZodOptional<z.ZodString>;
        transliterated_middle_name: z.ZodOptional<z.ZodString>;
        transliterated_last_name: z.ZodOptional<z.ZodString>;
        phone: z.ZodOptional<z.ZodString>;
        transliterated_residential_address: z.ZodOptional<z.ZodObject<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>>;
        endorsements: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        account_purpose: z.ZodOptional<z.ZodString>;
        account_purpose_other: z.ZodOptional<z.ZodString>;
        employment_status: z.ZodOptional<z.ZodString>;
        expected_monthly_payments_usd: z.ZodOptional<z.ZodString>;
        acting_as_intermediary: z.ZodOptional<z.ZodString>;
        most_recent_occupation: z.ZodOptional<z.ZodString>;
        source_of_funds: z.ZodOptional<z.ZodString>;
        nationality: z.ZodOptional<z.ZodString>;
        verified_selfie_at: z.ZodOptional<z.ZodString>;
        completed_customer_safety_check_at: z.ZodOptional<z.ZodString>;
        documents: z.ZodOptional<z.ZodArray<z.ZodObject<{
            purposes: z.ZodArray<z.ZodString, "many">;
            file: z.ZodString;
            description: z.ZodOptional<z.ZodString>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            purposes: z.ZodArray<z.ZodString, "many">;
            file: z.ZodString;
            description: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            purposes: z.ZodArray<z.ZodString, "many">;
            file: z.ZodString;
            description: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough">>, "many">>;
        has_signed_terms_of_service: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"individual">;
        first_name: z.ZodString;
        last_name: z.ZodString;
        email: z.ZodString;
        residential_address: z.ZodObject<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>;
        birth_date: z.ZodString;
        identifying_information: z.ZodArray<z.ZodObject<{
            type: z.ZodString;
            issuing_country: z.ZodString;
            number: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
            expiration: z.ZodOptional<z.ZodString>;
            image_front: z.ZodOptional<z.ZodString>;
            image_back: z.ZodOptional<z.ZodString>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodString;
            issuing_country: z.ZodString;
            number: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
            expiration: z.ZodOptional<z.ZodString>;
            image_front: z.ZodOptional<z.ZodString>;
            image_back: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodString;
            issuing_country: z.ZodString;
            number: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
            expiration: z.ZodOptional<z.ZodString>;
            image_front: z.ZodOptional<z.ZodString>;
            image_back: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        ofac_screen: z.ZodOptional<z.ZodObject<{
            screened_at: z.ZodString;
            result: z.ZodEnum<["passed"]>;
        }, "strip", z.ZodTypeAny, {
            screened_at: string;
            result: "passed";
        }, {
            screened_at: string;
            result: "passed";
        }>>;
        kyc_screen: z.ZodOptional<z.ZodObject<{
            screened_at: z.ZodString;
            result: z.ZodEnum<["passed"]>;
        }, "strip", z.ZodTypeAny, {
            screened_at: string;
            result: "passed";
        }, {
            screened_at: string;
            result: "passed";
        }>>;
        signed_agreement_id: z.ZodOptional<z.ZodString>;
        middle_name: z.ZodOptional<z.ZodString>;
        transliterated_first_name: z.ZodOptional<z.ZodString>;
        transliterated_middle_name: z.ZodOptional<z.ZodString>;
        transliterated_last_name: z.ZodOptional<z.ZodString>;
        phone: z.ZodOptional<z.ZodString>;
        transliterated_residential_address: z.ZodOptional<z.ZodObject<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>>;
        endorsements: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        account_purpose: z.ZodOptional<z.ZodString>;
        account_purpose_other: z.ZodOptional<z.ZodString>;
        employment_status: z.ZodOptional<z.ZodString>;
        expected_monthly_payments_usd: z.ZodOptional<z.ZodString>;
        acting_as_intermediary: z.ZodOptional<z.ZodString>;
        most_recent_occupation: z.ZodOptional<z.ZodString>;
        source_of_funds: z.ZodOptional<z.ZodString>;
        nationality: z.ZodOptional<z.ZodString>;
        verified_selfie_at: z.ZodOptional<z.ZodString>;
        completed_customer_safety_check_at: z.ZodOptional<z.ZodString>;
        documents: z.ZodOptional<z.ZodArray<z.ZodObject<{
            purposes: z.ZodArray<z.ZodString, "many">;
            file: z.ZodString;
            description: z.ZodOptional<z.ZodString>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            purposes: z.ZodArray<z.ZodString, "many">;
            file: z.ZodString;
            description: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            purposes: z.ZodArray<z.ZodString, "many">;
            file: z.ZodString;
            description: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough">>, "many">>;
        has_signed_terms_of_service: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">>;
}, "strip", z.ZodTypeAny, {
    provider: "bridge-sandbox";
    data: {
        type: "individual";
        email: string;
        first_name: string;
        last_name: string;
        residential_address: {
            street_line_1: string;
            city: string;
            subdivision: string;
            country: string;
            street_line_2?: string | undefined;
            postal_code?: string | undefined;
        } & {
            [k: string]: unknown;
        };
        birth_date: string;
        identifying_information: z.objectOutputType<{
            type: z.ZodString;
            issuing_country: z.ZodString;
            number: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
            expiration: z.ZodOptional<z.ZodString>;
            image_front: z.ZodOptional<z.ZodString>;
            image_back: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough">[];
        phone?: string | undefined;
        middle_name?: string | undefined;
        transliterated_first_name?: string | undefined;
        transliterated_middle_name?: string | undefined;
        transliterated_last_name?: string | undefined;
        transliterated_residential_address?: z.objectOutputType<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, z.ZodTypeAny, "passthrough"> | undefined;
        nationality?: string | undefined;
        verified_selfie_at?: string | undefined;
        completed_customer_safety_check_at?: string | undefined;
        documents?: z.objectOutputType<{
            purposes: z.ZodArray<z.ZodString, "many">;
            file: z.ZodString;
            description: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough">[] | undefined;
        ofac_screen?: {
            screened_at: string;
            result: "passed";
        } | undefined;
        kyc_screen?: {
            screened_at: string;
            result: "passed";
        } | undefined;
        signed_agreement_id?: string | undefined;
        endorsements?: string[] | undefined;
        account_purpose?: string | undefined;
        account_purpose_other?: string | undefined;
        employment_status?: string | undefined;
        expected_monthly_payments_usd?: string | undefined;
        acting_as_intermediary?: string | undefined;
        most_recent_occupation?: string | undefined;
        source_of_funds?: string | undefined;
        has_signed_terms_of_service?: boolean | undefined;
    } & {
        [k: string]: unknown;
    };
}, {
    provider: "bridge-sandbox";
    data: {
        type: "individual";
        email: string;
        first_name: string;
        last_name: string;
        residential_address: {
            street_line_1: string;
            city: string;
            subdivision: string;
            country: string;
            street_line_2?: string | undefined;
            postal_code?: string | undefined;
        } & {
            [k: string]: unknown;
        };
        birth_date: string;
        identifying_information: z.objectInputType<{
            type: z.ZodString;
            issuing_country: z.ZodString;
            number: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
            expiration: z.ZodOptional<z.ZodString>;
            image_front: z.ZodOptional<z.ZodString>;
            image_back: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough">[];
        phone?: string | undefined;
        middle_name?: string | undefined;
        transliterated_first_name?: string | undefined;
        transliterated_middle_name?: string | undefined;
        transliterated_last_name?: string | undefined;
        transliterated_residential_address?: z.objectInputType<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            subdivision: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
        }, z.ZodTypeAny, "passthrough"> | undefined;
        nationality?: string | undefined;
        verified_selfie_at?: string | undefined;
        completed_customer_safety_check_at?: string | undefined;
        documents?: z.objectInputType<{
            purposes: z.ZodArray<z.ZodString, "many">;
            file: z.ZodString;
            description: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough">[] | undefined;
        ofac_screen?: {
            screened_at: string;
            result: "passed";
        } | undefined;
        kyc_screen?: {
            screened_at: string;
            result: "passed";
        } | undefined;
        signed_agreement_id?: string | undefined;
        endorsements?: string[] | undefined;
        account_purpose?: string | undefined;
        account_purpose_other?: string | undefined;
        employment_status?: string | undefined;
        expected_monthly_payments_usd?: string | undefined;
        acting_as_intermediary?: string | undefined;
        most_recent_occupation?: string | undefined;
        source_of_funds?: string | undefined;
        has_signed_terms_of_service?: boolean | undefined;
    } & {
        [k: string]: unknown;
    };
}>]>;
type OnrampKycInput = z.infer<typeof OnrampKycInput>;
declare const OnrampKycResponse: z.ZodObject<{
    user_id: z.ZodString;
    provider_user_id: z.ZodOptional<z.ZodString>;
    status: z.ZodEnum<["not_found", "active", "awaiting_questionnaire", "awaiting_ubo", "incomplete", "not_started", "offboarded", "paused", "rejected", "under_review"]>;
}, "strip", z.ZodTypeAny, {
    status: "incomplete" | "not_found" | "active" | "awaiting_questionnaire" | "awaiting_ubo" | "not_started" | "offboarded" | "paused" | "rejected" | "under_review";
    user_id: string;
    provider_user_id?: string | undefined;
}, {
    status: "incomplete" | "not_found" | "active" | "awaiting_questionnaire" | "awaiting_ubo" | "not_started" | "offboarded" | "paused" | "rejected" | "under_review";
    user_id: string;
    provider_user_id?: string | undefined;
}>;
type OnrampKycResponse = z.infer<typeof OnrampKycResponse>;
declare const BridgeKycInput: z.ZodObject<{
    provider: z.ZodEnum<["bridge", "bridge-sandbox"]>;
    full_name: z.ZodOptional<z.ZodString>;
    email: z.ZodString;
    type: z.ZodOptional<z.ZodEnum<["individual", "business"]>>;
    endorsements: z.ZodOptional<z.ZodArray<z.ZodEnum<["sepa"]>, "many">>;
    redirect_uri: z.ZodOptional<z.ZodString>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    provider: z.ZodEnum<["bridge", "bridge-sandbox"]>;
    full_name: z.ZodOptional<z.ZodString>;
    email: z.ZodString;
    type: z.ZodOptional<z.ZodEnum<["individual", "business"]>>;
    endorsements: z.ZodOptional<z.ZodArray<z.ZodEnum<["sepa"]>, "many">>;
    redirect_uri: z.ZodOptional<z.ZodString>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    provider: z.ZodEnum<["bridge", "bridge-sandbox"]>;
    full_name: z.ZodOptional<z.ZodString>;
    email: z.ZodString;
    type: z.ZodOptional<z.ZodEnum<["individual", "business"]>>;
    endorsements: z.ZodOptional<z.ZodArray<z.ZodEnum<["sepa"]>, "many">>;
    redirect_uri: z.ZodOptional<z.ZodString>;
}, z.ZodTypeAny, "passthrough">>;
type BridgeKycInput = z.infer<typeof BridgeKycInput>;
declare const BridgeKycLinkResponse: z.ZodObject<{
    id: z.ZodString;
    customer_id: z.ZodString;
    full_name: z.ZodString;
    email: z.ZodString;
    kyc_link: z.ZodString;
    kyc_status: z.ZodEnum<["not_started", "pending", "incomplete", "awaiting_ubo", "manual_review", "under_review", "approved", "rejected"]>;
    rejection_reasons: z.ZodArray<z.ZodObject<{
        developer_reason: z.ZodString;
        reason: z.ZodString;
        created_at: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        created_at: string;
        developer_reason: string;
        reason: string;
    }, {
        created_at: string;
        developer_reason: string;
        reason: string;
    }>, "many">;
    tos_link: z.ZodString;
    tos_status: z.ZodEnum<["pending", "approved"]>;
    persona_inquiry_type: z.ZodOptional<z.ZodString>;
    created_at: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    email: string;
    created_at: string;
    full_name: string;
    customer_id: string;
    kyc_link: string;
    kyc_status: "pending" | "approved" | "incomplete" | "awaiting_ubo" | "not_started" | "rejected" | "under_review" | "manual_review";
    rejection_reasons: {
        created_at: string;
        developer_reason: string;
        reason: string;
    }[];
    tos_link: string;
    tos_status: "pending" | "approved";
    persona_inquiry_type?: string | undefined;
}, {
    id: string;
    email: string;
    created_at: string;
    full_name: string;
    customer_id: string;
    kyc_link: string;
    kyc_status: "pending" | "approved" | "incomplete" | "awaiting_ubo" | "not_started" | "rejected" | "under_review" | "manual_review";
    rejection_reasons: {
        created_at: string;
        developer_reason: string;
        reason: string;
    }[];
    tos_link: string;
    tos_status: "pending" | "approved";
    persona_inquiry_type?: string | undefined;
}>;
type BridgeKycLinkResponse = z.infer<typeof BridgeKycLinkResponse>;
declare const FiatCurrency: z.ZodEnum<["usd", "eur"]>;
type FiatCurrency = z.infer<typeof FiatCurrency>;
declare const GetOnrampFiatAccountStatusInput: z.ZodObject<{
    provider: z.ZodEnum<["bridge", "bridge-sandbox"]>;
}, "strip", z.ZodTypeAny, {
    provider: "bridge" | "bridge-sandbox";
}, {
    provider: "bridge" | "bridge-sandbox";
}>;
type GetOnrampFiatAccountStatusInput = z.infer<typeof GetOnrampFiatAccountStatusInput>;
declare const GetOnrampFiatAccountsResponse: z.ZodObject<{
    accounts: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        bank_name: z.ZodOptional<z.ZodString>;
        currency: z.ZodString;
        account_type: z.ZodString;
        last_4: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        currency: string;
        account_type: string;
        bank_name?: string | undefined;
        last_4?: string | undefined;
    }, {
        id: string;
        currency: string;
        account_type: string;
        bank_name?: string | undefined;
        last_4?: string | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    accounts: {
        id: string;
        currency: string;
        account_type: string;
        bank_name?: string | undefined;
        last_4?: string | undefined;
    }[];
}, {
    accounts: {
        id: string;
        currency: string;
        account_type: string;
        bank_name?: string | undefined;
        last_4?: string | undefined;
    }[];
}>;
type GetOnrampFiatAccountsResponse = z.infer<typeof GetOnrampFiatAccountsResponse>;
declare const FiatAccountAddress: z.ZodObject<{
    street_line_1: z.ZodString;
    street_line_2: z.ZodOptional<z.ZodString>;
    city: z.ZodString;
    postal_code: z.ZodOptional<z.ZodString>;
    country: z.ZodString;
    state: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    street_line_1: string;
    city: string;
    country: string;
    state?: string | undefined;
    street_line_2?: string | undefined;
    postal_code?: string | undefined;
}, {
    street_line_1: string;
    city: string;
    country: string;
    state?: string | undefined;
    street_line_2?: string | undefined;
    postal_code?: string | undefined;
}>;
type FiatAccountAddress = z.infer<typeof FiatAccountAddress>;
declare const FiatAccountUsAccountData: z.ZodObject<{
    account_number: z.ZodString;
    routing_number: z.ZodString;
    checking_or_savings: z.ZodOptional<z.ZodEnum<["checking", "savings"]>>;
}, "strip", z.ZodTypeAny, {
    account_number: string;
    routing_number: string;
    checking_or_savings?: "checking" | "savings" | undefined;
}, {
    account_number: string;
    routing_number: string;
    checking_or_savings?: "checking" | "savings" | undefined;
}>;
type FiatAccountUsAccountData = z.infer<typeof FiatAccountUsAccountData>;
declare const FiatAccountIbanData: z.ZodObject<{
    account_number: z.ZodString;
    bic: z.ZodString;
    country: z.ZodString;
}, "strip", z.ZodTypeAny, {
    country: string;
    account_number: string;
    bic: string;
}, {
    country: string;
    account_number: string;
    bic: string;
}>;
type FiatAccountIbanData = z.infer<typeof FiatAccountIbanData>;
declare const FiatAccountSwiftData: z.ZodObject<{
    address: z.ZodObject<{
        street_line_1: z.ZodString;
        street_line_2: z.ZodOptional<z.ZodString>;
        city: z.ZodString;
        postal_code: z.ZodOptional<z.ZodString>;
        country: z.ZodString;
        state: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        street_line_1: string;
        city: string;
        country: string;
        state?: string | undefined;
        street_line_2?: string | undefined;
        postal_code?: string | undefined;
    }, {
        street_line_1: string;
        city: string;
        country: string;
        state?: string | undefined;
        street_line_2?: string | undefined;
        postal_code?: string | undefined;
    }>;
    category: z.ZodEnum<["client", "parent_company", "subsidiary", "supplier"]>;
    purpose_of_funds: z.ZodArray<z.ZodEnum<["intra_group_transfer", "invoice_for_goods_and_services"]>, "many">;
    short_business_description: z.ZodString;
    account: z.ZodObject<{
        account_number: z.ZodString;
        bic: z.ZodString;
        country: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        country: string;
        account_number: string;
        bic: string;
    }, {
        country: string;
        account_number: string;
        bic: string;
    }>;
}, "strip", z.ZodTypeAny, {
    address: {
        street_line_1: string;
        city: string;
        country: string;
        state?: string | undefined;
        street_line_2?: string | undefined;
        postal_code?: string | undefined;
    };
    account: {
        country: string;
        account_number: string;
        bic: string;
    };
    category: "client" | "parent_company" | "subsidiary" | "supplier";
    purpose_of_funds: ("intra_group_transfer" | "invoice_for_goods_and_services")[];
    short_business_description: string;
}, {
    address: {
        street_line_1: string;
        city: string;
        country: string;
        state?: string | undefined;
        street_line_2?: string | undefined;
        postal_code?: string | undefined;
    };
    account: {
        country: string;
        account_number: string;
        bic: string;
    };
    category: "client" | "parent_company" | "subsidiary" | "supplier";
    purpose_of_funds: ("intra_group_transfer" | "invoice_for_goods_and_services")[];
    short_business_description: string;
}>;
type FiatAccountSwiftData = z.infer<typeof FiatAccountSwiftData>;
declare const OnrampFiatAccountInput: z.ZodEffects<z.ZodObject<{
    provider: z.ZodEnum<["bridge", "bridge-sandbox"]>;
    account_owner_name: z.ZodString;
    bank_name: z.ZodOptional<z.ZodString>;
    currency: z.ZodEnum<["usd", "eur"]>;
    iban: z.ZodOptional<z.ZodObject<{
        account_number: z.ZodString;
        bic: z.ZodString;
        country: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        account_number: z.ZodString;
        bic: z.ZodString;
        country: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        account_number: z.ZodString;
        bic: z.ZodString;
        country: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>>;
    account: z.ZodOptional<z.ZodObject<{
        account_number: z.ZodString;
        routing_number: z.ZodString;
        checking_or_savings: z.ZodOptional<z.ZodEnum<["checking", "savings"]>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        account_number: z.ZodString;
        routing_number: z.ZodString;
        checking_or_savings: z.ZodOptional<z.ZodEnum<["checking", "savings"]>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        account_number: z.ZodString;
        routing_number: z.ZodString;
        checking_or_savings: z.ZodOptional<z.ZodEnum<["checking", "savings"]>>;
    }, z.ZodTypeAny, "passthrough">>>;
    swift: z.ZodOptional<z.ZodObject<{
        address: z.ZodObject<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
            state: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            street_line_1: string;
            city: string;
            country: string;
            state?: string | undefined;
            street_line_2?: string | undefined;
            postal_code?: string | undefined;
        }, {
            street_line_1: string;
            city: string;
            country: string;
            state?: string | undefined;
            street_line_2?: string | undefined;
            postal_code?: string | undefined;
        }>;
        category: z.ZodEnum<["client", "parent_company", "subsidiary", "supplier"]>;
        purpose_of_funds: z.ZodArray<z.ZodEnum<["intra_group_transfer", "invoice_for_goods_and_services"]>, "many">;
        short_business_description: z.ZodString;
        account: z.ZodObject<{
            account_number: z.ZodString;
            bic: z.ZodString;
            country: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            country: string;
            account_number: string;
            bic: string;
        }, {
            country: string;
            account_number: string;
            bic: string;
        }>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        address: z.ZodObject<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
            state: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            street_line_1: string;
            city: string;
            country: string;
            state?: string | undefined;
            street_line_2?: string | undefined;
            postal_code?: string | undefined;
        }, {
            street_line_1: string;
            city: string;
            country: string;
            state?: string | undefined;
            street_line_2?: string | undefined;
            postal_code?: string | undefined;
        }>;
        category: z.ZodEnum<["client", "parent_company", "subsidiary", "supplier"]>;
        purpose_of_funds: z.ZodArray<z.ZodEnum<["intra_group_transfer", "invoice_for_goods_and_services"]>, "many">;
        short_business_description: z.ZodString;
        account: z.ZodObject<{
            account_number: z.ZodString;
            bic: z.ZodString;
            country: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            country: string;
            account_number: string;
            bic: string;
        }, {
            country: string;
            account_number: string;
            bic: string;
        }>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        address: z.ZodObject<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
            state: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            street_line_1: string;
            city: string;
            country: string;
            state?: string | undefined;
            street_line_2?: string | undefined;
            postal_code?: string | undefined;
        }, {
            street_line_1: string;
            city: string;
            country: string;
            state?: string | undefined;
            street_line_2?: string | undefined;
            postal_code?: string | undefined;
        }>;
        category: z.ZodEnum<["client", "parent_company", "subsidiary", "supplier"]>;
        purpose_of_funds: z.ZodArray<z.ZodEnum<["intra_group_transfer", "invoice_for_goods_and_services"]>, "many">;
        short_business_description: z.ZodString;
        account: z.ZodObject<{
            account_number: z.ZodString;
            bic: z.ZodString;
            country: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            country: string;
            account_number: string;
            bic: string;
        }, {
            country: string;
            account_number: string;
            bic: string;
        }>;
    }, z.ZodTypeAny, "passthrough">>>;
    address: z.ZodOptional<z.ZodObject<{
        street_line_1: z.ZodString;
        street_line_2: z.ZodOptional<z.ZodString>;
        city: z.ZodString;
        postal_code: z.ZodOptional<z.ZodString>;
        country: z.ZodString;
        state: z.ZodOptional<z.ZodString>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        street_line_1: z.ZodString;
        street_line_2: z.ZodOptional<z.ZodString>;
        city: z.ZodString;
        postal_code: z.ZodOptional<z.ZodString>;
        country: z.ZodString;
        state: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        street_line_1: z.ZodString;
        street_line_2: z.ZodOptional<z.ZodString>;
        city: z.ZodString;
        postal_code: z.ZodOptional<z.ZodString>;
        country: z.ZodString;
        state: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">>>;
    first_name: z.ZodOptional<z.ZodString>;
    last_name: z.ZodOptional<z.ZodString>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    provider: z.ZodEnum<["bridge", "bridge-sandbox"]>;
    account_owner_name: z.ZodString;
    bank_name: z.ZodOptional<z.ZodString>;
    currency: z.ZodEnum<["usd", "eur"]>;
    iban: z.ZodOptional<z.ZodObject<{
        account_number: z.ZodString;
        bic: z.ZodString;
        country: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        account_number: z.ZodString;
        bic: z.ZodString;
        country: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        account_number: z.ZodString;
        bic: z.ZodString;
        country: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>>;
    account: z.ZodOptional<z.ZodObject<{
        account_number: z.ZodString;
        routing_number: z.ZodString;
        checking_or_savings: z.ZodOptional<z.ZodEnum<["checking", "savings"]>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        account_number: z.ZodString;
        routing_number: z.ZodString;
        checking_or_savings: z.ZodOptional<z.ZodEnum<["checking", "savings"]>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        account_number: z.ZodString;
        routing_number: z.ZodString;
        checking_or_savings: z.ZodOptional<z.ZodEnum<["checking", "savings"]>>;
    }, z.ZodTypeAny, "passthrough">>>;
    swift: z.ZodOptional<z.ZodObject<{
        address: z.ZodObject<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
            state: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            street_line_1: string;
            city: string;
            country: string;
            state?: string | undefined;
            street_line_2?: string | undefined;
            postal_code?: string | undefined;
        }, {
            street_line_1: string;
            city: string;
            country: string;
            state?: string | undefined;
            street_line_2?: string | undefined;
            postal_code?: string | undefined;
        }>;
        category: z.ZodEnum<["client", "parent_company", "subsidiary", "supplier"]>;
        purpose_of_funds: z.ZodArray<z.ZodEnum<["intra_group_transfer", "invoice_for_goods_and_services"]>, "many">;
        short_business_description: z.ZodString;
        account: z.ZodObject<{
            account_number: z.ZodString;
            bic: z.ZodString;
            country: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            country: string;
            account_number: string;
            bic: string;
        }, {
            country: string;
            account_number: string;
            bic: string;
        }>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        address: z.ZodObject<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
            state: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            street_line_1: string;
            city: string;
            country: string;
            state?: string | undefined;
            street_line_2?: string | undefined;
            postal_code?: string | undefined;
        }, {
            street_line_1: string;
            city: string;
            country: string;
            state?: string | undefined;
            street_line_2?: string | undefined;
            postal_code?: string | undefined;
        }>;
        category: z.ZodEnum<["client", "parent_company", "subsidiary", "supplier"]>;
        purpose_of_funds: z.ZodArray<z.ZodEnum<["intra_group_transfer", "invoice_for_goods_and_services"]>, "many">;
        short_business_description: z.ZodString;
        account: z.ZodObject<{
            account_number: z.ZodString;
            bic: z.ZodString;
            country: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            country: string;
            account_number: string;
            bic: string;
        }, {
            country: string;
            account_number: string;
            bic: string;
        }>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        address: z.ZodObject<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
            state: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            street_line_1: string;
            city: string;
            country: string;
            state?: string | undefined;
            street_line_2?: string | undefined;
            postal_code?: string | undefined;
        }, {
            street_line_1: string;
            city: string;
            country: string;
            state?: string | undefined;
            street_line_2?: string | undefined;
            postal_code?: string | undefined;
        }>;
        category: z.ZodEnum<["client", "parent_company", "subsidiary", "supplier"]>;
        purpose_of_funds: z.ZodArray<z.ZodEnum<["intra_group_transfer", "invoice_for_goods_and_services"]>, "many">;
        short_business_description: z.ZodString;
        account: z.ZodObject<{
            account_number: z.ZodString;
            bic: z.ZodString;
            country: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            country: string;
            account_number: string;
            bic: string;
        }, {
            country: string;
            account_number: string;
            bic: string;
        }>;
    }, z.ZodTypeAny, "passthrough">>>;
    address: z.ZodOptional<z.ZodObject<{
        street_line_1: z.ZodString;
        street_line_2: z.ZodOptional<z.ZodString>;
        city: z.ZodString;
        postal_code: z.ZodOptional<z.ZodString>;
        country: z.ZodString;
        state: z.ZodOptional<z.ZodString>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        street_line_1: z.ZodString;
        street_line_2: z.ZodOptional<z.ZodString>;
        city: z.ZodString;
        postal_code: z.ZodOptional<z.ZodString>;
        country: z.ZodString;
        state: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        street_line_1: z.ZodString;
        street_line_2: z.ZodOptional<z.ZodString>;
        city: z.ZodString;
        postal_code: z.ZodOptional<z.ZodString>;
        country: z.ZodString;
        state: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">>>;
    first_name: z.ZodOptional<z.ZodString>;
    last_name: z.ZodOptional<z.ZodString>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    provider: z.ZodEnum<["bridge", "bridge-sandbox"]>;
    account_owner_name: z.ZodString;
    bank_name: z.ZodOptional<z.ZodString>;
    currency: z.ZodEnum<["usd", "eur"]>;
    iban: z.ZodOptional<z.ZodObject<{
        account_number: z.ZodString;
        bic: z.ZodString;
        country: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        account_number: z.ZodString;
        bic: z.ZodString;
        country: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        account_number: z.ZodString;
        bic: z.ZodString;
        country: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>>;
    account: z.ZodOptional<z.ZodObject<{
        account_number: z.ZodString;
        routing_number: z.ZodString;
        checking_or_savings: z.ZodOptional<z.ZodEnum<["checking", "savings"]>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        account_number: z.ZodString;
        routing_number: z.ZodString;
        checking_or_savings: z.ZodOptional<z.ZodEnum<["checking", "savings"]>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        account_number: z.ZodString;
        routing_number: z.ZodString;
        checking_or_savings: z.ZodOptional<z.ZodEnum<["checking", "savings"]>>;
    }, z.ZodTypeAny, "passthrough">>>;
    swift: z.ZodOptional<z.ZodObject<{
        address: z.ZodObject<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
            state: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            street_line_1: string;
            city: string;
            country: string;
            state?: string | undefined;
            street_line_2?: string | undefined;
            postal_code?: string | undefined;
        }, {
            street_line_1: string;
            city: string;
            country: string;
            state?: string | undefined;
            street_line_2?: string | undefined;
            postal_code?: string | undefined;
        }>;
        category: z.ZodEnum<["client", "parent_company", "subsidiary", "supplier"]>;
        purpose_of_funds: z.ZodArray<z.ZodEnum<["intra_group_transfer", "invoice_for_goods_and_services"]>, "many">;
        short_business_description: z.ZodString;
        account: z.ZodObject<{
            account_number: z.ZodString;
            bic: z.ZodString;
            country: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            country: string;
            account_number: string;
            bic: string;
        }, {
            country: string;
            account_number: string;
            bic: string;
        }>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        address: z.ZodObject<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
            state: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            street_line_1: string;
            city: string;
            country: string;
            state?: string | undefined;
            street_line_2?: string | undefined;
            postal_code?: string | undefined;
        }, {
            street_line_1: string;
            city: string;
            country: string;
            state?: string | undefined;
            street_line_2?: string | undefined;
            postal_code?: string | undefined;
        }>;
        category: z.ZodEnum<["client", "parent_company", "subsidiary", "supplier"]>;
        purpose_of_funds: z.ZodArray<z.ZodEnum<["intra_group_transfer", "invoice_for_goods_and_services"]>, "many">;
        short_business_description: z.ZodString;
        account: z.ZodObject<{
            account_number: z.ZodString;
            bic: z.ZodString;
            country: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            country: string;
            account_number: string;
            bic: string;
        }, {
            country: string;
            account_number: string;
            bic: string;
        }>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        address: z.ZodObject<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
            state: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            street_line_1: string;
            city: string;
            country: string;
            state?: string | undefined;
            street_line_2?: string | undefined;
            postal_code?: string | undefined;
        }, {
            street_line_1: string;
            city: string;
            country: string;
            state?: string | undefined;
            street_line_2?: string | undefined;
            postal_code?: string | undefined;
        }>;
        category: z.ZodEnum<["client", "parent_company", "subsidiary", "supplier"]>;
        purpose_of_funds: z.ZodArray<z.ZodEnum<["intra_group_transfer", "invoice_for_goods_and_services"]>, "many">;
        short_business_description: z.ZodString;
        account: z.ZodObject<{
            account_number: z.ZodString;
            bic: z.ZodString;
            country: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            country: string;
            account_number: string;
            bic: string;
        }, {
            country: string;
            account_number: string;
            bic: string;
        }>;
    }, z.ZodTypeAny, "passthrough">>>;
    address: z.ZodOptional<z.ZodObject<{
        street_line_1: z.ZodString;
        street_line_2: z.ZodOptional<z.ZodString>;
        city: z.ZodString;
        postal_code: z.ZodOptional<z.ZodString>;
        country: z.ZodString;
        state: z.ZodOptional<z.ZodString>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        street_line_1: z.ZodString;
        street_line_2: z.ZodOptional<z.ZodString>;
        city: z.ZodString;
        postal_code: z.ZodOptional<z.ZodString>;
        country: z.ZodString;
        state: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        street_line_1: z.ZodString;
        street_line_2: z.ZodOptional<z.ZodString>;
        city: z.ZodString;
        postal_code: z.ZodOptional<z.ZodString>;
        country: z.ZodString;
        state: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">>>;
    first_name: z.ZodOptional<z.ZodString>;
    last_name: z.ZodOptional<z.ZodString>;
}, z.ZodTypeAny, "passthrough">>, z.objectOutputType<{
    provider: z.ZodEnum<["bridge", "bridge-sandbox"]>;
    account_owner_name: z.ZodString;
    bank_name: z.ZodOptional<z.ZodString>;
    currency: z.ZodEnum<["usd", "eur"]>;
    iban: z.ZodOptional<z.ZodObject<{
        account_number: z.ZodString;
        bic: z.ZodString;
        country: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        account_number: z.ZodString;
        bic: z.ZodString;
        country: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        account_number: z.ZodString;
        bic: z.ZodString;
        country: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>>;
    account: z.ZodOptional<z.ZodObject<{
        account_number: z.ZodString;
        routing_number: z.ZodString;
        checking_or_savings: z.ZodOptional<z.ZodEnum<["checking", "savings"]>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        account_number: z.ZodString;
        routing_number: z.ZodString;
        checking_or_savings: z.ZodOptional<z.ZodEnum<["checking", "savings"]>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        account_number: z.ZodString;
        routing_number: z.ZodString;
        checking_or_savings: z.ZodOptional<z.ZodEnum<["checking", "savings"]>>;
    }, z.ZodTypeAny, "passthrough">>>;
    swift: z.ZodOptional<z.ZodObject<{
        address: z.ZodObject<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
            state: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            street_line_1: string;
            city: string;
            country: string;
            state?: string | undefined;
            street_line_2?: string | undefined;
            postal_code?: string | undefined;
        }, {
            street_line_1: string;
            city: string;
            country: string;
            state?: string | undefined;
            street_line_2?: string | undefined;
            postal_code?: string | undefined;
        }>;
        category: z.ZodEnum<["client", "parent_company", "subsidiary", "supplier"]>;
        purpose_of_funds: z.ZodArray<z.ZodEnum<["intra_group_transfer", "invoice_for_goods_and_services"]>, "many">;
        short_business_description: z.ZodString;
        account: z.ZodObject<{
            account_number: z.ZodString;
            bic: z.ZodString;
            country: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            country: string;
            account_number: string;
            bic: string;
        }, {
            country: string;
            account_number: string;
            bic: string;
        }>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        address: z.ZodObject<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
            state: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            street_line_1: string;
            city: string;
            country: string;
            state?: string | undefined;
            street_line_2?: string | undefined;
            postal_code?: string | undefined;
        }, {
            street_line_1: string;
            city: string;
            country: string;
            state?: string | undefined;
            street_line_2?: string | undefined;
            postal_code?: string | undefined;
        }>;
        category: z.ZodEnum<["client", "parent_company", "subsidiary", "supplier"]>;
        purpose_of_funds: z.ZodArray<z.ZodEnum<["intra_group_transfer", "invoice_for_goods_and_services"]>, "many">;
        short_business_description: z.ZodString;
        account: z.ZodObject<{
            account_number: z.ZodString;
            bic: z.ZodString;
            country: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            country: string;
            account_number: string;
            bic: string;
        }, {
            country: string;
            account_number: string;
            bic: string;
        }>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        address: z.ZodObject<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
            state: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            street_line_1: string;
            city: string;
            country: string;
            state?: string | undefined;
            street_line_2?: string | undefined;
            postal_code?: string | undefined;
        }, {
            street_line_1: string;
            city: string;
            country: string;
            state?: string | undefined;
            street_line_2?: string | undefined;
            postal_code?: string | undefined;
        }>;
        category: z.ZodEnum<["client", "parent_company", "subsidiary", "supplier"]>;
        purpose_of_funds: z.ZodArray<z.ZodEnum<["intra_group_transfer", "invoice_for_goods_and_services"]>, "many">;
        short_business_description: z.ZodString;
        account: z.ZodObject<{
            account_number: z.ZodString;
            bic: z.ZodString;
            country: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            country: string;
            account_number: string;
            bic: string;
        }, {
            country: string;
            account_number: string;
            bic: string;
        }>;
    }, z.ZodTypeAny, "passthrough">>>;
    address: z.ZodOptional<z.ZodObject<{
        street_line_1: z.ZodString;
        street_line_2: z.ZodOptional<z.ZodString>;
        city: z.ZodString;
        postal_code: z.ZodOptional<z.ZodString>;
        country: z.ZodString;
        state: z.ZodOptional<z.ZodString>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        street_line_1: z.ZodString;
        street_line_2: z.ZodOptional<z.ZodString>;
        city: z.ZodString;
        postal_code: z.ZodOptional<z.ZodString>;
        country: z.ZodString;
        state: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        street_line_1: z.ZodString;
        street_line_2: z.ZodOptional<z.ZodString>;
        city: z.ZodString;
        postal_code: z.ZodOptional<z.ZodString>;
        country: z.ZodString;
        state: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">>>;
    first_name: z.ZodOptional<z.ZodString>;
    last_name: z.ZodOptional<z.ZodString>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    provider: z.ZodEnum<["bridge", "bridge-sandbox"]>;
    account_owner_name: z.ZodString;
    bank_name: z.ZodOptional<z.ZodString>;
    currency: z.ZodEnum<["usd", "eur"]>;
    iban: z.ZodOptional<z.ZodObject<{
        account_number: z.ZodString;
        bic: z.ZodString;
        country: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        account_number: z.ZodString;
        bic: z.ZodString;
        country: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        account_number: z.ZodString;
        bic: z.ZodString;
        country: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>>;
    account: z.ZodOptional<z.ZodObject<{
        account_number: z.ZodString;
        routing_number: z.ZodString;
        checking_or_savings: z.ZodOptional<z.ZodEnum<["checking", "savings"]>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        account_number: z.ZodString;
        routing_number: z.ZodString;
        checking_or_savings: z.ZodOptional<z.ZodEnum<["checking", "savings"]>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        account_number: z.ZodString;
        routing_number: z.ZodString;
        checking_or_savings: z.ZodOptional<z.ZodEnum<["checking", "savings"]>>;
    }, z.ZodTypeAny, "passthrough">>>;
    swift: z.ZodOptional<z.ZodObject<{
        address: z.ZodObject<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
            state: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            street_line_1: string;
            city: string;
            country: string;
            state?: string | undefined;
            street_line_2?: string | undefined;
            postal_code?: string | undefined;
        }, {
            street_line_1: string;
            city: string;
            country: string;
            state?: string | undefined;
            street_line_2?: string | undefined;
            postal_code?: string | undefined;
        }>;
        category: z.ZodEnum<["client", "parent_company", "subsidiary", "supplier"]>;
        purpose_of_funds: z.ZodArray<z.ZodEnum<["intra_group_transfer", "invoice_for_goods_and_services"]>, "many">;
        short_business_description: z.ZodString;
        account: z.ZodObject<{
            account_number: z.ZodString;
            bic: z.ZodString;
            country: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            country: string;
            account_number: string;
            bic: string;
        }, {
            country: string;
            account_number: string;
            bic: string;
        }>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        address: z.ZodObject<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
            state: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            street_line_1: string;
            city: string;
            country: string;
            state?: string | undefined;
            street_line_2?: string | undefined;
            postal_code?: string | undefined;
        }, {
            street_line_1: string;
            city: string;
            country: string;
            state?: string | undefined;
            street_line_2?: string | undefined;
            postal_code?: string | undefined;
        }>;
        category: z.ZodEnum<["client", "parent_company", "subsidiary", "supplier"]>;
        purpose_of_funds: z.ZodArray<z.ZodEnum<["intra_group_transfer", "invoice_for_goods_and_services"]>, "many">;
        short_business_description: z.ZodString;
        account: z.ZodObject<{
            account_number: z.ZodString;
            bic: z.ZodString;
            country: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            country: string;
            account_number: string;
            bic: string;
        }, {
            country: string;
            account_number: string;
            bic: string;
        }>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        address: z.ZodObject<{
            street_line_1: z.ZodString;
            street_line_2: z.ZodOptional<z.ZodString>;
            city: z.ZodString;
            postal_code: z.ZodOptional<z.ZodString>;
            country: z.ZodString;
            state: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            street_line_1: string;
            city: string;
            country: string;
            state?: string | undefined;
            street_line_2?: string | undefined;
            postal_code?: string | undefined;
        }, {
            street_line_1: string;
            city: string;
            country: string;
            state?: string | undefined;
            street_line_2?: string | undefined;
            postal_code?: string | undefined;
        }>;
        category: z.ZodEnum<["client", "parent_company", "subsidiary", "supplier"]>;
        purpose_of_funds: z.ZodArray<z.ZodEnum<["intra_group_transfer", "invoice_for_goods_and_services"]>, "many">;
        short_business_description: z.ZodString;
        account: z.ZodObject<{
            account_number: z.ZodString;
            bic: z.ZodString;
            country: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            country: string;
            account_number: string;
            bic: string;
        }, {
            country: string;
            account_number: string;
            bic: string;
        }>;
    }, z.ZodTypeAny, "passthrough">>>;
    address: z.ZodOptional<z.ZodObject<{
        street_line_1: z.ZodString;
        street_line_2: z.ZodOptional<z.ZodString>;
        city: z.ZodString;
        postal_code: z.ZodOptional<z.ZodString>;
        country: z.ZodString;
        state: z.ZodOptional<z.ZodString>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        street_line_1: z.ZodString;
        street_line_2: z.ZodOptional<z.ZodString>;
        city: z.ZodString;
        postal_code: z.ZodOptional<z.ZodString>;
        country: z.ZodString;
        state: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        street_line_1: z.ZodString;
        street_line_2: z.ZodOptional<z.ZodString>;
        city: z.ZodString;
        postal_code: z.ZodOptional<z.ZodString>;
        country: z.ZodString;
        state: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">>>;
    first_name: z.ZodOptional<z.ZodString>;
    last_name: z.ZodOptional<z.ZodString>;
}, z.ZodTypeAny, "passthrough">>;
type OnrampFiatAccountInput = z.infer<typeof OnrampFiatAccountInput>;
declare const OnrampFiatAccountResponse: z.ZodObject<{
    id: z.ZodString;
    bank_name: z.ZodOptional<z.ZodString>;
    currency: z.ZodString;
    account_type: z.ZodString;
    last_4: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    id: string;
    currency: string;
    account_type: string;
    bank_name?: string | undefined;
    last_4?: string | undefined;
}, {
    id: string;
    currency: string;
    account_type: string;
    bank_name?: string | undefined;
    last_4?: string | undefined;
}>;
type OnrampFiatAccountResponse = z.infer<typeof OnrampFiatAccountResponse>;
declare const FiatPaymentRail: z.ZodEnum<["sepa", "ach_push", "wire"]>;
type FiatPaymentRail = z.infer<typeof FiatPaymentRail>;
declare const OnrampChain: z.ZodEnum<["ethereum", "base", "arbitrum", "polygon", "optimism"]>;
type OnrampChain = z.infer<typeof OnrampChain>;
declare const OnrampAsset: z.ZodEnum<["usdc"]>;
type OnrampAsset = z.infer<typeof OnrampAsset>;
declare const OnrampTransferStatus: z.ZodEnum<["awaiting_funds", "in_review", "funds_received", "payment_submitted", "payment_processed", "canceled", "error", "undeliverable", "returned", "refunded"]>;
type OnrampTransferStatus = z.infer<typeof OnrampTransferStatus>;
declare const OnrampInput: z.ZodObject<{
    /**
     * Amount of the transfer, expressed as a decimal string. Examples include "100.25", "0.1", "1.234567", "1.01" etc.
     * It is denominated in the source currency if that is a fiat currency, or in the fiat currency to which the source currency is pegged.
     */
    amount: z.ZodString;
    provider: z.ZodEnum<["bridge", "bridge-sandbox"]>;
    source: z.ZodObject<{
        payment_rail: z.ZodEnum<["sepa", "ach_push", "wire"]>;
        currency: z.ZodEnum<["usd", "eur"]>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        payment_rail: z.ZodEnum<["sepa", "ach_push", "wire"]>;
        currency: z.ZodEnum<["usd", "eur"]>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        payment_rail: z.ZodEnum<["sepa", "ach_push", "wire"]>;
        currency: z.ZodEnum<["usd", "eur"]>;
    }, z.ZodTypeAny, "passthrough">>;
    destination: z.ZodObject<{
        chain: z.ZodEnum<["ethereum", "base", "arbitrum", "polygon", "optimism"]>;
        currency: z.ZodEnum<["usdc"]>;
        to_address: z.ZodEffects<z.ZodString, string, string>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        chain: z.ZodEnum<["ethereum", "base", "arbitrum", "polygon", "optimism"]>;
        currency: z.ZodEnum<["usdc"]>;
        to_address: z.ZodEffects<z.ZodString, string, string>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        chain: z.ZodEnum<["ethereum", "base", "arbitrum", "polygon", "optimism"]>;
        currency: z.ZodEnum<["usdc"]>;
        to_address: z.ZodEffects<z.ZodString, string, string>;
    }, z.ZodTypeAny, "passthrough">>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    /**
     * Amount of the transfer, expressed as a decimal string. Examples include "100.25", "0.1", "1.234567", "1.01" etc.
     * It is denominated in the source currency if that is a fiat currency, or in the fiat currency to which the source currency is pegged.
     */
    amount: z.ZodString;
    provider: z.ZodEnum<["bridge", "bridge-sandbox"]>;
    source: z.ZodObject<{
        payment_rail: z.ZodEnum<["sepa", "ach_push", "wire"]>;
        currency: z.ZodEnum<["usd", "eur"]>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        payment_rail: z.ZodEnum<["sepa", "ach_push", "wire"]>;
        currency: z.ZodEnum<["usd", "eur"]>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        payment_rail: z.ZodEnum<["sepa", "ach_push", "wire"]>;
        currency: z.ZodEnum<["usd", "eur"]>;
    }, z.ZodTypeAny, "passthrough">>;
    destination: z.ZodObject<{
        chain: z.ZodEnum<["ethereum", "base", "arbitrum", "polygon", "optimism"]>;
        currency: z.ZodEnum<["usdc"]>;
        to_address: z.ZodEffects<z.ZodString, string, string>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        chain: z.ZodEnum<["ethereum", "base", "arbitrum", "polygon", "optimism"]>;
        currency: z.ZodEnum<["usdc"]>;
        to_address: z.ZodEffects<z.ZodString, string, string>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        chain: z.ZodEnum<["ethereum", "base", "arbitrum", "polygon", "optimism"]>;
        currency: z.ZodEnum<["usdc"]>;
        to_address: z.ZodEffects<z.ZodString, string, string>;
    }, z.ZodTypeAny, "passthrough">>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    /**
     * Amount of the transfer, expressed as a decimal string. Examples include "100.25", "0.1", "1.234567", "1.01" etc.
     * It is denominated in the source currency if that is a fiat currency, or in the fiat currency to which the source currency is pegged.
     */
    amount: z.ZodString;
    provider: z.ZodEnum<["bridge", "bridge-sandbox"]>;
    source: z.ZodObject<{
        payment_rail: z.ZodEnum<["sepa", "ach_push", "wire"]>;
        currency: z.ZodEnum<["usd", "eur"]>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        payment_rail: z.ZodEnum<["sepa", "ach_push", "wire"]>;
        currency: z.ZodEnum<["usd", "eur"]>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        payment_rail: z.ZodEnum<["sepa", "ach_push", "wire"]>;
        currency: z.ZodEnum<["usd", "eur"]>;
    }, z.ZodTypeAny, "passthrough">>;
    destination: z.ZodObject<{
        chain: z.ZodEnum<["ethereum", "base", "arbitrum", "polygon", "optimism"]>;
        currency: z.ZodEnum<["usdc"]>;
        to_address: z.ZodEffects<z.ZodString, string, string>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        chain: z.ZodEnum<["ethereum", "base", "arbitrum", "polygon", "optimism"]>;
        currency: z.ZodEnum<["usdc"]>;
        to_address: z.ZodEffects<z.ZodString, string, string>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        chain: z.ZodEnum<["ethereum", "base", "arbitrum", "polygon", "optimism"]>;
        currency: z.ZodEnum<["usdc"]>;
        to_address: z.ZodEffects<z.ZodString, string, string>;
    }, z.ZodTypeAny, "passthrough">>;
}, z.ZodTypeAny, "passthrough">>;
type OnrampInput = z.infer<typeof OnrampInput>;
declare const OnrampResponse: z.ZodObject<{
    id: z.ZodString;
    status: z.ZodEnum<["awaiting_funds", "in_review", "funds_received", "payment_submitted", "payment_processed", "canceled", "error", "undeliverable", "returned", "refunded"]>;
    deposit_instructions: z.ZodObject<{
        amount: z.ZodString;
        currency: z.ZodEnum<["usd", "eur"]>;
        payment_rail: z.ZodEnum<["sepa", "ach_push", "wire"]>;
        deposit_message: z.ZodOptional<z.ZodString>;
        bank_name: z.ZodOptional<z.ZodString>;
        bank_account_number: z.ZodOptional<z.ZodString>;
        bank_routing_number: z.ZodOptional<z.ZodString>;
        bank_beneficiary_name: z.ZodOptional<z.ZodString>;
        bank_beneficiary_address: z.ZodOptional<z.ZodString>;
        bank_address: z.ZodOptional<z.ZodString>;
        iban: z.ZodOptional<z.ZodString>;
        bic: z.ZodOptional<z.ZodString>;
        account_holder_name: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        amount: string;
        currency: "usd" | "eur";
        payment_rail: "sepa" | "ach_push" | "wire";
        bank_name?: string | undefined;
        bic?: string | undefined;
        iban?: string | undefined;
        deposit_message?: string | undefined;
        bank_account_number?: string | undefined;
        bank_routing_number?: string | undefined;
        bank_beneficiary_name?: string | undefined;
        bank_beneficiary_address?: string | undefined;
        bank_address?: string | undefined;
        account_holder_name?: string | undefined;
    }, {
        amount: string;
        currency: "usd" | "eur";
        payment_rail: "sepa" | "ach_push" | "wire";
        bank_name?: string | undefined;
        bic?: string | undefined;
        iban?: string | undefined;
        deposit_message?: string | undefined;
        bank_account_number?: string | undefined;
        bank_routing_number?: string | undefined;
        bank_beneficiary_name?: string | undefined;
        bank_beneficiary_address?: string | undefined;
        bank_address?: string | undefined;
        account_holder_name?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    status: "error" | "awaiting_funds" | "in_review" | "funds_received" | "payment_submitted" | "payment_processed" | "canceled" | "undeliverable" | "returned" | "refunded";
    id: string;
    deposit_instructions: {
        amount: string;
        currency: "usd" | "eur";
        payment_rail: "sepa" | "ach_push" | "wire";
        bank_name?: string | undefined;
        bic?: string | undefined;
        iban?: string | undefined;
        deposit_message?: string | undefined;
        bank_account_number?: string | undefined;
        bank_routing_number?: string | undefined;
        bank_beneficiary_name?: string | undefined;
        bank_beneficiary_address?: string | undefined;
        bank_address?: string | undefined;
        account_holder_name?: string | undefined;
    };
}, {
    status: "error" | "awaiting_funds" | "in_review" | "funds_received" | "payment_submitted" | "payment_processed" | "canceled" | "undeliverable" | "returned" | "refunded";
    id: string;
    deposit_instructions: {
        amount: string;
        currency: "usd" | "eur";
        payment_rail: "sepa" | "ach_push" | "wire";
        bank_name?: string | undefined;
        bic?: string | undefined;
        iban?: string | undefined;
        deposit_message?: string | undefined;
        bank_account_number?: string | undefined;
        bank_routing_number?: string | undefined;
        bank_beneficiary_name?: string | undefined;
        bank_beneficiary_address?: string | undefined;
        bank_address?: string | undefined;
        account_holder_name?: string | undefined;
    };
}>;
type OnrampResponse = z.infer<typeof OnrampResponse>;
declare const OfframpInput: z.ZodObject<{
    /**
     * Amount of the transfer, expressed as a decimal string. Examples include "100.25", "0.1", "1.234567", "1.01" etc.
     * It is denominated in the source currency if that is a fiat currency, or in the fiat currency to which the source currency is pegged.
     */
    amount: z.ZodString;
    provider: z.ZodEnum<["bridge", "bridge-sandbox"]>;
    source: z.ZodObject<{
        currency: z.ZodEnum<["usdc"]>;
        chain: z.ZodEnum<["ethereum", "base", "arbitrum", "polygon", "optimism"]>;
        from_address: z.ZodEffects<z.ZodString, string, string>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        currency: z.ZodEnum<["usdc"]>;
        chain: z.ZodEnum<["ethereum", "base", "arbitrum", "polygon", "optimism"]>;
        from_address: z.ZodEffects<z.ZodString, string, string>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        currency: z.ZodEnum<["usdc"]>;
        chain: z.ZodEnum<["ethereum", "base", "arbitrum", "polygon", "optimism"]>;
        from_address: z.ZodEffects<z.ZodString, string, string>;
    }, z.ZodTypeAny, "passthrough">>;
    destination: z.ZodObject<{
        currency: z.ZodEnum<["usd", "eur"]>;
        payment_rail: z.ZodEnum<["sepa", "ach_push", "wire"]>;
        external_account_id: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        currency: z.ZodEnum<["usd", "eur"]>;
        payment_rail: z.ZodEnum<["sepa", "ach_push", "wire"]>;
        external_account_id: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        currency: z.ZodEnum<["usd", "eur"]>;
        payment_rail: z.ZodEnum<["sepa", "ach_push", "wire"]>;
        external_account_id: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    /**
     * Amount of the transfer, expressed as a decimal string. Examples include "100.25", "0.1", "1.234567", "1.01" etc.
     * It is denominated in the source currency if that is a fiat currency, or in the fiat currency to which the source currency is pegged.
     */
    amount: z.ZodString;
    provider: z.ZodEnum<["bridge", "bridge-sandbox"]>;
    source: z.ZodObject<{
        currency: z.ZodEnum<["usdc"]>;
        chain: z.ZodEnum<["ethereum", "base", "arbitrum", "polygon", "optimism"]>;
        from_address: z.ZodEffects<z.ZodString, string, string>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        currency: z.ZodEnum<["usdc"]>;
        chain: z.ZodEnum<["ethereum", "base", "arbitrum", "polygon", "optimism"]>;
        from_address: z.ZodEffects<z.ZodString, string, string>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        currency: z.ZodEnum<["usdc"]>;
        chain: z.ZodEnum<["ethereum", "base", "arbitrum", "polygon", "optimism"]>;
        from_address: z.ZodEffects<z.ZodString, string, string>;
    }, z.ZodTypeAny, "passthrough">>;
    destination: z.ZodObject<{
        currency: z.ZodEnum<["usd", "eur"]>;
        payment_rail: z.ZodEnum<["sepa", "ach_push", "wire"]>;
        external_account_id: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        currency: z.ZodEnum<["usd", "eur"]>;
        payment_rail: z.ZodEnum<["sepa", "ach_push", "wire"]>;
        external_account_id: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        currency: z.ZodEnum<["usd", "eur"]>;
        payment_rail: z.ZodEnum<["sepa", "ach_push", "wire"]>;
        external_account_id: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    /**
     * Amount of the transfer, expressed as a decimal string. Examples include "100.25", "0.1", "1.234567", "1.01" etc.
     * It is denominated in the source currency if that is a fiat currency, or in the fiat currency to which the source currency is pegged.
     */
    amount: z.ZodString;
    provider: z.ZodEnum<["bridge", "bridge-sandbox"]>;
    source: z.ZodObject<{
        currency: z.ZodEnum<["usdc"]>;
        chain: z.ZodEnum<["ethereum", "base", "arbitrum", "polygon", "optimism"]>;
        from_address: z.ZodEffects<z.ZodString, string, string>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        currency: z.ZodEnum<["usdc"]>;
        chain: z.ZodEnum<["ethereum", "base", "arbitrum", "polygon", "optimism"]>;
        from_address: z.ZodEffects<z.ZodString, string, string>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        currency: z.ZodEnum<["usdc"]>;
        chain: z.ZodEnum<["ethereum", "base", "arbitrum", "polygon", "optimism"]>;
        from_address: z.ZodEffects<z.ZodString, string, string>;
    }, z.ZodTypeAny, "passthrough">>;
    destination: z.ZodObject<{
        currency: z.ZodEnum<["usd", "eur"]>;
        payment_rail: z.ZodEnum<["sepa", "ach_push", "wire"]>;
        external_account_id: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        currency: z.ZodEnum<["usd", "eur"]>;
        payment_rail: z.ZodEnum<["sepa", "ach_push", "wire"]>;
        external_account_id: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        currency: z.ZodEnum<["usd", "eur"]>;
        payment_rail: z.ZodEnum<["sepa", "ach_push", "wire"]>;
        external_account_id: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>;
}, z.ZodTypeAny, "passthrough">>;
type OfframpInput = z.infer<typeof OfframpInput>;
declare const OfframpResponse: z.ZodObject<{
    id: z.ZodString;
    status: z.ZodEnum<["awaiting_funds", "in_review", "funds_received", "payment_submitted", "payment_processed", "canceled", "error", "undeliverable", "returned", "refunded"]>;
    deposit_instructions: z.ZodObject<{
        amount: z.ZodString;
        currency: z.ZodEnum<["usdc"]>;
        chain: z.ZodEnum<["ethereum", "base", "arbitrum", "polygon", "optimism"]>;
        to_address: z.ZodString;
        from_address: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        chain: "ethereum" | "base" | "optimism" | "polygon" | "arbitrum";
        amount: string;
        currency: "usdc";
        to_address: string;
        from_address: string;
    }, {
        chain: "ethereum" | "base" | "optimism" | "polygon" | "arbitrum";
        amount: string;
        currency: "usdc";
        to_address: string;
        from_address: string;
    }>;
}, "strip", z.ZodTypeAny, {
    status: "error" | "awaiting_funds" | "in_review" | "funds_received" | "payment_submitted" | "payment_processed" | "canceled" | "undeliverable" | "returned" | "refunded";
    id: string;
    deposit_instructions: {
        chain: "ethereum" | "base" | "optimism" | "polygon" | "arbitrum";
        amount: string;
        currency: "usdc";
        to_address: string;
        from_address: string;
    };
}, {
    status: "error" | "awaiting_funds" | "in_review" | "funds_received" | "payment_submitted" | "payment_processed" | "canceled" | "undeliverable" | "returned" | "refunded";
    id: string;
    deposit_instructions: {
        chain: "ethereum" | "base" | "optimism" | "polygon" | "arbitrum";
        amount: string;
        currency: "usdc";
        to_address: string;
        from_address: string;
    };
}>;
type OfframpResponse = z.infer<typeof OfframpResponse>;
declare const ListFiatTransactionsInput: z.ZodObject<{
    provider: z.ZodEnum<["bridge", "bridge-sandbox"]>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    provider: z.ZodEnum<["bridge", "bridge-sandbox"]>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    provider: z.ZodEnum<["bridge", "bridge-sandbox"]>;
}, z.ZodTypeAny, "passthrough">>;
type ListFiatTransactionsInput = z.infer<typeof ListFiatTransactionsInput>;
declare const ListFiatTransactionsResponse: z.ZodObject<{
    transactions: z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"onramp">;
        created_at: z.ZodString;
        destination: z.ZodObject<{
            chain: z.ZodString;
            currency: z.ZodString;
            address: z.ZodString;
            privy_user_id: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            chain: string;
            address: string;
            currency: string;
            privy_user_id?: string | undefined;
        }, {
            chain: string;
            address: string;
            currency: string;
            privy_user_id?: string | undefined;
        }>;
        receipt: z.ZodOptional<z.ZodObject<{
            final_amount: z.ZodString;
            transaction_hash: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            final_amount: string;
            transaction_hash?: string | undefined;
        }, {
            final_amount: string;
            transaction_hash?: string | undefined;
        }>>;
        is_sandbox: z.ZodBoolean;
    } & {
        id: z.ZodString;
        status: z.ZodEnum<["awaiting_funds", "in_review", "funds_received", "payment_submitted", "payment_processed", "canceled", "error", "undeliverable", "returned", "refunded"]>;
        deposit_instructions: z.ZodObject<{
            amount: z.ZodString;
            currency: z.ZodEnum<["usd", "eur"]>;
            payment_rail: z.ZodEnum<["sepa", "ach_push", "wire"]>;
            deposit_message: z.ZodOptional<z.ZodString>;
            bank_name: z.ZodOptional<z.ZodString>;
            bank_account_number: z.ZodOptional<z.ZodString>;
            bank_routing_number: z.ZodOptional<z.ZodString>;
            bank_beneficiary_name: z.ZodOptional<z.ZodString>;
            bank_beneficiary_address: z.ZodOptional<z.ZodString>;
            bank_address: z.ZodOptional<z.ZodString>;
            iban: z.ZodOptional<z.ZodString>;
            bic: z.ZodOptional<z.ZodString>;
            account_holder_name: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            amount: string;
            currency: "usd" | "eur";
            payment_rail: "sepa" | "ach_push" | "wire";
            bank_name?: string | undefined;
            bic?: string | undefined;
            iban?: string | undefined;
            deposit_message?: string | undefined;
            bank_account_number?: string | undefined;
            bank_routing_number?: string | undefined;
            bank_beneficiary_name?: string | undefined;
            bank_beneficiary_address?: string | undefined;
            bank_address?: string | undefined;
            account_holder_name?: string | undefined;
        }, {
            amount: string;
            currency: "usd" | "eur";
            payment_rail: "sepa" | "ach_push" | "wire";
            bank_name?: string | undefined;
            bic?: string | undefined;
            iban?: string | undefined;
            deposit_message?: string | undefined;
            bank_account_number?: string | undefined;
            bank_routing_number?: string | undefined;
            bank_beneficiary_name?: string | undefined;
            bank_beneficiary_address?: string | undefined;
            bank_address?: string | undefined;
            account_holder_name?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "onramp";
        status: "error" | "awaiting_funds" | "in_review" | "funds_received" | "payment_submitted" | "payment_processed" | "canceled" | "undeliverable" | "returned" | "refunded";
        id: string;
        created_at: string;
        destination: {
            chain: string;
            address: string;
            currency: string;
            privy_user_id?: string | undefined;
        };
        deposit_instructions: {
            amount: string;
            currency: "usd" | "eur";
            payment_rail: "sepa" | "ach_push" | "wire";
            bank_name?: string | undefined;
            bic?: string | undefined;
            iban?: string | undefined;
            deposit_message?: string | undefined;
            bank_account_number?: string | undefined;
            bank_routing_number?: string | undefined;
            bank_beneficiary_name?: string | undefined;
            bank_beneficiary_address?: string | undefined;
            bank_address?: string | undefined;
            account_holder_name?: string | undefined;
        };
        is_sandbox: boolean;
        receipt?: {
            final_amount: string;
            transaction_hash?: string | undefined;
        } | undefined;
    }, {
        type: "onramp";
        status: "error" | "awaiting_funds" | "in_review" | "funds_received" | "payment_submitted" | "payment_processed" | "canceled" | "undeliverable" | "returned" | "refunded";
        id: string;
        created_at: string;
        destination: {
            chain: string;
            address: string;
            currency: string;
            privy_user_id?: string | undefined;
        };
        deposit_instructions: {
            amount: string;
            currency: "usd" | "eur";
            payment_rail: "sepa" | "ach_push" | "wire";
            bank_name?: string | undefined;
            bic?: string | undefined;
            iban?: string | undefined;
            deposit_message?: string | undefined;
            bank_account_number?: string | undefined;
            bank_routing_number?: string | undefined;
            bank_beneficiary_name?: string | undefined;
            bank_beneficiary_address?: string | undefined;
            bank_address?: string | undefined;
            account_holder_name?: string | undefined;
        };
        is_sandbox: boolean;
        receipt?: {
            final_amount: string;
            transaction_hash?: string | undefined;
        } | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"offramp">;
        created_at: z.ZodString;
        destination: z.ZodObject<{
            payment_rail: z.ZodString;
            currency: z.ZodString;
            external_account_id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            currency: string;
            payment_rail: string;
            external_account_id: string;
        }, {
            currency: string;
            payment_rail: string;
            external_account_id: string;
        }>;
        receipt: z.ZodOptional<z.ZodObject<{
            final_amount: z.ZodString;
            transaction_hash: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            final_amount: string;
            transaction_hash?: string | undefined;
        }, {
            final_amount: string;
            transaction_hash?: string | undefined;
        }>>;
        is_sandbox: z.ZodBoolean;
    } & {
        id: z.ZodString;
        status: z.ZodEnum<["awaiting_funds", "in_review", "funds_received", "payment_submitted", "payment_processed", "canceled", "error", "undeliverable", "returned", "refunded"]>;
        deposit_instructions: z.ZodObject<{
            amount: z.ZodString;
            currency: z.ZodEnum<["usdc"]>;
            chain: z.ZodEnum<["ethereum", "base", "arbitrum", "polygon", "optimism"]>;
            to_address: z.ZodString;
            from_address: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            chain: "ethereum" | "base" | "optimism" | "polygon" | "arbitrum";
            amount: string;
            currency: "usdc";
            to_address: string;
            from_address: string;
        }, {
            chain: "ethereum" | "base" | "optimism" | "polygon" | "arbitrum";
            amount: string;
            currency: "usdc";
            to_address: string;
            from_address: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "offramp";
        status: "error" | "awaiting_funds" | "in_review" | "funds_received" | "payment_submitted" | "payment_processed" | "canceled" | "undeliverable" | "returned" | "refunded";
        id: string;
        created_at: string;
        destination: {
            currency: string;
            payment_rail: string;
            external_account_id: string;
        };
        deposit_instructions: {
            chain: "ethereum" | "base" | "optimism" | "polygon" | "arbitrum";
            amount: string;
            currency: "usdc";
            to_address: string;
            from_address: string;
        };
        is_sandbox: boolean;
        receipt?: {
            final_amount: string;
            transaction_hash?: string | undefined;
        } | undefined;
    }, {
        type: "offramp";
        status: "error" | "awaiting_funds" | "in_review" | "funds_received" | "payment_submitted" | "payment_processed" | "canceled" | "undeliverable" | "returned" | "refunded";
        id: string;
        created_at: string;
        destination: {
            currency: string;
            payment_rail: string;
            external_account_id: string;
        };
        deposit_instructions: {
            chain: "ethereum" | "base" | "optimism" | "polygon" | "arbitrum";
            amount: string;
            currency: "usdc";
            to_address: string;
            from_address: string;
        };
        is_sandbox: boolean;
        receipt?: {
            final_amount: string;
            transaction_hash?: string | undefined;
        } | undefined;
    }>]>, "many">;
}, "strip", z.ZodTypeAny, {
    transactions: ({
        type: "onramp";
        status: "error" | "awaiting_funds" | "in_review" | "funds_received" | "payment_submitted" | "payment_processed" | "canceled" | "undeliverable" | "returned" | "refunded";
        id: string;
        created_at: string;
        destination: {
            chain: string;
            address: string;
            currency: string;
            privy_user_id?: string | undefined;
        };
        deposit_instructions: {
            amount: string;
            currency: "usd" | "eur";
            payment_rail: "sepa" | "ach_push" | "wire";
            bank_name?: string | undefined;
            bic?: string | undefined;
            iban?: string | undefined;
            deposit_message?: string | undefined;
            bank_account_number?: string | undefined;
            bank_routing_number?: string | undefined;
            bank_beneficiary_name?: string | undefined;
            bank_beneficiary_address?: string | undefined;
            bank_address?: string | undefined;
            account_holder_name?: string | undefined;
        };
        is_sandbox: boolean;
        receipt?: {
            final_amount: string;
            transaction_hash?: string | undefined;
        } | undefined;
    } | {
        type: "offramp";
        status: "error" | "awaiting_funds" | "in_review" | "funds_received" | "payment_submitted" | "payment_processed" | "canceled" | "undeliverable" | "returned" | "refunded";
        id: string;
        created_at: string;
        destination: {
            currency: string;
            payment_rail: string;
            external_account_id: string;
        };
        deposit_instructions: {
            chain: "ethereum" | "base" | "optimism" | "polygon" | "arbitrum";
            amount: string;
            currency: "usdc";
            to_address: string;
            from_address: string;
        };
        is_sandbox: boolean;
        receipt?: {
            final_amount: string;
            transaction_hash?: string | undefined;
        } | undefined;
    })[];
}, {
    transactions: ({
        type: "onramp";
        status: "error" | "awaiting_funds" | "in_review" | "funds_received" | "payment_submitted" | "payment_processed" | "canceled" | "undeliverable" | "returned" | "refunded";
        id: string;
        created_at: string;
        destination: {
            chain: string;
            address: string;
            currency: string;
            privy_user_id?: string | undefined;
        };
        deposit_instructions: {
            amount: string;
            currency: "usd" | "eur";
            payment_rail: "sepa" | "ach_push" | "wire";
            bank_name?: string | undefined;
            bic?: string | undefined;
            iban?: string | undefined;
            deposit_message?: string | undefined;
            bank_account_number?: string | undefined;
            bank_routing_number?: string | undefined;
            bank_beneficiary_name?: string | undefined;
            bank_beneficiary_address?: string | undefined;
            bank_address?: string | undefined;
            account_holder_name?: string | undefined;
        };
        is_sandbox: boolean;
        receipt?: {
            final_amount: string;
            transaction_hash?: string | undefined;
        } | undefined;
    } | {
        type: "offramp";
        status: "error" | "awaiting_funds" | "in_review" | "funds_received" | "payment_submitted" | "payment_processed" | "canceled" | "undeliverable" | "returned" | "refunded";
        id: string;
        created_at: string;
        destination: {
            currency: string;
            payment_rail: string;
            external_account_id: string;
        };
        deposit_instructions: {
            chain: "ethereum" | "base" | "optimism" | "polygon" | "arbitrum";
            amount: string;
            currency: "usdc";
            to_address: string;
            from_address: string;
        };
        is_sandbox: boolean;
        receipt?: {
            final_amount: string;
            transaction_hash?: string | undefined;
        } | undefined;
    })[];
}>;
type ListFiatTransactionsResponse = z.infer<typeof ListFiatTransactionsResponse>;

/**
 * Parses a JSON object for a valid wallet linked account import object.
 */
declare const ImportWalletAccountInput: z.ZodObject<{
    type: z.ZodLiteral<"wallet">;
    address: z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodString, string, string>]>;
    chain_type: z.ZodEnum<["ethereum", "solana"]>;
}, "strip", z.ZodTypeAny, {
    type: "wallet";
    address: string;
    chain_type: "solana" | "ethereum";
}, {
    type: "wallet";
    address: string;
    chain_type: "solana" | "ethereum";
}>;
type ImportWalletAccountInputType = z.infer<typeof ImportWalletAccountInput>;
/**
 * Parses a JSON object for a valid email linked account import object.
 */
declare const ImportEmailAccountInput: z.ZodObject<{
    type: z.ZodLiteral<"email">;
    address: z.ZodEffects<z.ZodString, string, string>;
}, "strip", z.ZodTypeAny, {
    type: "email";
    address: string;
}, {
    type: "email";
    address: string;
}>;
type ImportEmailAccountInputType = z.infer<typeof ImportEmailAccountInput>;
/**
 * Parses a JSON object for a valid phone number linked account import object.
 */
declare const ImportPhoneAccountInput: z.ZodObject<{
    type: z.ZodLiteral<"phone">;
    number: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>;
}, "strip", z.ZodTypeAny, {
    number: string;
    type: "phone";
}, {
    number: string;
    type: "phone";
}>;
type ImportPhoneAccountInputType = z.infer<typeof ImportPhoneAccountInput>;
/**
 * Parses a JSON object for a valid Google linked account import object.
 *
 * Subject Reference: https://openid.net/specs/openid-connect-core-1_0.html#IDToken
 */
declare const ImportGoogleAccountInput: z.ZodObject<{
    type: z.ZodLiteral<"google_oauth">;
    subject: z.ZodString;
    email: z.ZodEffects<z.ZodString, string, string>;
    name: z.ZodString;
}, "strict", z.ZodTypeAny, {
    type: "google_oauth";
    name: string;
    email: string;
    subject: string;
}, {
    type: "google_oauth";
    name: string;
    email: string;
    subject: string;
}>;
type ImportGoogleAccountInputType = z.infer<typeof ImportGoogleAccountInput>;
/**
 * Parses a JSON object for a valid Twitter linked account import object.
 *
 * Subject Reference: https://openid.net/specs/openid-connect-core-1_0.html#IDToken
 * Username/Name Reference: https://help.twitter.com/en/managing-your-account/change-twitter-handle
 * ^ Note that we are allowing for usernames that have length < 5 as many legacy usernames have < 5 characters
 * Field Requirements Reference: https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-me#tab0
 */
declare const ImportTwitterAccountInput: z.ZodObject<{
    type: z.ZodLiteral<"twitter_oauth">;
    subject: z.ZodString;
    name: z.ZodString;
    username: z.ZodString;
    profile_picture_url: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
}, "strict", z.ZodTypeAny, {
    type: "twitter_oauth";
    name: string;
    username: string;
    subject: string;
    profile_picture_url?: string | undefined;
}, {
    type: "twitter_oauth";
    name: string;
    username: string;
    subject: string;
    profile_picture_url?: string | undefined;
}>;
type ImportTwitterAccountInputType = z.infer<typeof ImportTwitterAccountInput>;
/**
 * Parses a JSON object for a valid Discord linked account import object.
 *
 * Subject Reference: https://openid.net/specs/openid-connect-core-1_0.html#IDToken
 * Username Reference: https://discord.com/developers/docs/resources/user
 */
declare const ImportDiscordAccountInput: z.ZodObject<{
    type: z.ZodLiteral<"discord_oauth">;
    subject: z.ZodString;
    username: z.ZodEffects<z.ZodString, string, string>;
    email: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
}, "strict", z.ZodTypeAny, {
    type: "discord_oauth";
    username: string;
    subject: string;
    email?: string | undefined;
}, {
    type: "discord_oauth";
    username: string;
    subject: string;
    email?: string | undefined;
}>;
type ImportDiscordAccountInputType = z.infer<typeof ImportDiscordAccountInput>;
/**
 * Parses a JSON object for a valid Spotify linked account import object.
 *
 * Subject Reference: https://openid.net/specs/openid-connect-core-1_0.html#IDToken
 * Name Reference: https://developer.spotify.com/documentation/web-api/reference/get-current-users-profile
 */
declare const ImportSpotifyAccountInput: z.ZodObject<{
    type: z.ZodLiteral<"spotify_oauth">;
    subject: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    email: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
}, "strict", z.ZodTypeAny, {
    type: "spotify_oauth";
    subject: string;
    name?: string | undefined;
    email?: string | undefined;
}, {
    type: "spotify_oauth";
    subject: string;
    name?: string | undefined;
    email?: string | undefined;
}>;
type ImportSpotifyAccountInputType = z.infer<typeof ImportSpotifyAccountInput>;
/**
 * Parses a JSON object for a valid GitHub linked account import object.
 *
 * Subject Reference: https://openid.net/specs/openid-connect-core-1_0.html#IDToken
 * Username Reference: https://github.com/join (error modal)
 *
 * Maximum is 39 characters. Username may only contain alphanumeric characters or single hyphens, and cannot begin or end with a hyphen.
 */
declare const ImportGithubAccountInput: z.ZodObject<{
    type: z.ZodLiteral<"github_oauth">;
    subject: z.ZodString;
    username: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    email: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
}, "strict", z.ZodTypeAny, {
    type: "github_oauth";
    username: string;
    subject: string;
    name?: string | undefined;
    email?: string | undefined;
}, {
    type: "github_oauth";
    username: string;
    subject: string;
    name?: string | undefined;
    email?: string | undefined;
}>;
type ImportGithubAccountInputType = z.infer<typeof ImportGithubAccountInput>;
/**
 * Parses a JSON object for a valid Instagram linked account import object.
 *
 * Subject Reference: https://openid.net/specs/openid-connect-core-1_0.html#IDToken
 * Username Reference: Usernames can only use letters, numbers, underscores and periods
 */
declare const ImportInstagramAccountInput: z.ZodObject<{
    type: z.ZodLiteral<"instagram_oauth">;
    subject: z.ZodString;
    username: z.ZodString;
}, "strict", z.ZodTypeAny, {
    type: "instagram_oauth";
    username: string;
    subject: string;
}, {
    type: "instagram_oauth";
    username: string;
    subject: string;
}>;
type ImportInstagramAccountInputType = z.infer<typeof ImportInstagramAccountInput>;
/**
 * Parses a JSON object for a valid Tiktok linked account import object.
 *
 * Subject Reference: https://openid.net/specs/openid-connect-core-1_0.html#IDToken
 * Username Reference:
 */
declare const ImportTiktokAccountInput: z.ZodObject<{
    type: z.ZodLiteral<"tiktok_oauth">;
    subject: z.ZodString;
    username: z.ZodString;
    name: z.ZodNullable<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    type: "tiktok_oauth";
    name: string | null;
    username: string;
    subject: string;
}, {
    type: "tiktok_oauth";
    name: string | null;
    username: string;
    subject: string;
}>;
type ImportTiktokAccountInputType = z.infer<typeof ImportTiktokAccountInput>;
/**
 * Parses a JSON object for a valid GitHub linked account import object.
 *
 * Subject Reference: https://openid.net/specs/openid-connect-core-1_0.html#IDToken
 * Username Reference: https://github.com/join (error modal)
 *
 * Maximum is 39 characters. Username may only contain alphanumeric characters or single hyphens, and cannot begin or end with a hyphen.
 */
declare const ImportLinkedInAccountInput: z.ZodObject<{
    type: z.ZodLiteral<"linkedin_oauth">;
    subject: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    email: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    vanityName: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    type: "linkedin_oauth";
    subject: string;
    name?: string | undefined;
    email?: string | undefined;
    vanityName?: string | undefined;
}, {
    type: "linkedin_oauth";
    subject: string;
    name?: string | undefined;
    email?: string | undefined;
    vanityName?: string | undefined;
}>;
type ImportLinkedInAccountInputType = z.infer<typeof ImportLinkedInAccountInput>;
/**
 * Parses a JSON object for a valid Apple linked account import object.
 *
 * Subject Reference: https://openid.net/specs/openid-connect-core-1_0.html#IDToken
 */
declare const ImportAppleAccountInput: z.ZodObject<{
    type: z.ZodLiteral<"apple_oauth">;
    subject: z.ZodString;
    email: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
}, "strict", z.ZodTypeAny, {
    type: "apple_oauth";
    subject: string;
    email?: string | undefined;
}, {
    type: "apple_oauth";
    subject: string;
    email?: string | undefined;
}>;
type ImportAppleAccountInputType = z.infer<typeof ImportAppleAccountInput>;
/**
 * Parses a JSON object for a valid Farcaster linked account import object.
 *
 * References:
 *  - Farcaster ID: https://github.com/farcasterxyz/contracts?tab=readme-ov-file#contracts
 *  - Owner address and user data: https://github.com/farcasterxyz/protocol/blob/main/docs/SPECIFICATION.md
 */
declare const ImportFarcasterAccountInput: z.ZodObject<{
    type: z.ZodLiteral<"farcaster">;
    fid: z.ZodNumber;
    owner_address: z.ZodEffects<z.ZodString, string, string>;
    username: z.ZodOptional<z.ZodString>;
    display_name: z.ZodOptional<z.ZodString>;
    bio: z.ZodOptional<z.ZodString>;
    profile_picture_url: z.ZodOptional<z.ZodString>;
    homepage_url: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    type: "farcaster";
    fid: number;
    owner_address: string;
    username?: string | undefined;
    display_name?: string | undefined;
    bio?: string | undefined;
    profile_picture_url?: string | undefined;
    homepage_url?: string | undefined;
}, {
    type: "farcaster";
    fid: number;
    owner_address: string;
    username?: string | undefined;
    display_name?: string | undefined;
    bio?: string | undefined;
    profile_picture_url?: string | undefined;
    homepage_url?: string | undefined;
}>;
type ImportFarcasterAccountInputType = z.infer<typeof ImportFarcasterAccountInput>;
/**
 * Parses a JSON object for a valid Telegram linked account import object.
 */
declare const ImportTelegramAccountInput: z.ZodObject<{
    type: z.ZodLiteral<"telegram">;
    telegram_user_id: z.ZodString;
    first_name: z.ZodOptional<z.ZodString>;
    last_name: z.ZodOptional<z.ZodString>;
    username: z.ZodOptional<z.ZodString>;
    photo_url: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    type: "telegram";
    telegram_user_id: string;
    username?: string | undefined;
    first_name?: string | undefined;
    last_name?: string | undefined;
    photo_url?: string | undefined;
}, {
    type: "telegram";
    telegram_user_id: string;
    username?: string | undefined;
    first_name?: string | undefined;
    last_name?: string | undefined;
    photo_url?: string | undefined;
}>;
type ImportTelegramAccountInputType = z.infer<typeof ImportTelegramAccountInput>;
/**
 * Parses a JSON object for a valid Custom JWT Account import object.
 */
declare const ImportCustomJwtAccountInput: z.ZodObject<{
    type: z.ZodLiteral<"custom_auth">;
    custom_user_id: z.ZodString;
}, "strict", z.ZodTypeAny, {
    type: "custom_auth";
    custom_user_id: string;
}, {
    type: "custom_auth";
    custom_user_id: string;
}>;
type ImportCustomJwtAccountInputType = z.infer<typeof ImportCustomJwtAccountInput>;
declare const LinkedAccountInput: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<"wallet">;
    address: z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodString, string, string>]>;
    chain_type: z.ZodEnum<["ethereum", "solana"]>;
}, "strip", z.ZodTypeAny, {
    type: "wallet";
    address: string;
    chain_type: "solana" | "ethereum";
}, {
    type: "wallet";
    address: string;
    chain_type: "solana" | "ethereum";
}>, z.ZodObject<{
    type: z.ZodLiteral<"email">;
    address: z.ZodEffects<z.ZodString, string, string>;
}, "strip", z.ZodTypeAny, {
    type: "email";
    address: string;
}, {
    type: "email";
    address: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"phone">;
    number: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>;
}, "strip", z.ZodTypeAny, {
    number: string;
    type: "phone";
}, {
    number: string;
    type: "phone";
}>, z.ZodObject<{
    type: z.ZodLiteral<"google_oauth">;
    subject: z.ZodString;
    email: z.ZodEffects<z.ZodString, string, string>;
    name: z.ZodString;
}, "strict", z.ZodTypeAny, {
    type: "google_oauth";
    name: string;
    email: string;
    subject: string;
}, {
    type: "google_oauth";
    name: string;
    email: string;
    subject: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"twitter_oauth">;
    subject: z.ZodString;
    name: z.ZodString;
    username: z.ZodString;
    profile_picture_url: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
}, "strict", z.ZodTypeAny, {
    type: "twitter_oauth";
    name: string;
    username: string;
    subject: string;
    profile_picture_url?: string | undefined;
}, {
    type: "twitter_oauth";
    name: string;
    username: string;
    subject: string;
    profile_picture_url?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"discord_oauth">;
    subject: z.ZodString;
    username: z.ZodEffects<z.ZodString, string, string>;
    email: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
}, "strict", z.ZodTypeAny, {
    type: "discord_oauth";
    username: string;
    subject: string;
    email?: string | undefined;
}, {
    type: "discord_oauth";
    username: string;
    subject: string;
    email?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"github_oauth">;
    subject: z.ZodString;
    username: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    email: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
}, "strict", z.ZodTypeAny, {
    type: "github_oauth";
    username: string;
    subject: string;
    name?: string | undefined;
    email?: string | undefined;
}, {
    type: "github_oauth";
    username: string;
    subject: string;
    name?: string | undefined;
    email?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"spotify_oauth">;
    subject: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    email: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
}, "strict", z.ZodTypeAny, {
    type: "spotify_oauth";
    subject: string;
    name?: string | undefined;
    email?: string | undefined;
}, {
    type: "spotify_oauth";
    subject: string;
    name?: string | undefined;
    email?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"instagram_oauth">;
    subject: z.ZodString;
    username: z.ZodString;
}, "strict", z.ZodTypeAny, {
    type: "instagram_oauth";
    username: string;
    subject: string;
}, {
    type: "instagram_oauth";
    username: string;
    subject: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"tiktok_oauth">;
    subject: z.ZodString;
    username: z.ZodString;
    name: z.ZodNullable<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    type: "tiktok_oauth";
    name: string | null;
    username: string;
    subject: string;
}, {
    type: "tiktok_oauth";
    name: string | null;
    username: string;
    subject: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"apple_oauth">;
    subject: z.ZodString;
    email: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
}, "strict", z.ZodTypeAny, {
    type: "apple_oauth";
    subject: string;
    email?: string | undefined;
}, {
    type: "apple_oauth";
    subject: string;
    email?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"linkedin_oauth">;
    subject: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    email: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    vanityName: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    type: "linkedin_oauth";
    subject: string;
    name?: string | undefined;
    email?: string | undefined;
    vanityName?: string | undefined;
}, {
    type: "linkedin_oauth";
    subject: string;
    name?: string | undefined;
    email?: string | undefined;
    vanityName?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"farcaster">;
    fid: z.ZodNumber;
    owner_address: z.ZodEffects<z.ZodString, string, string>;
    username: z.ZodOptional<z.ZodString>;
    display_name: z.ZodOptional<z.ZodString>;
    bio: z.ZodOptional<z.ZodString>;
    profile_picture_url: z.ZodOptional<z.ZodString>;
    homepage_url: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    type: "farcaster";
    fid: number;
    owner_address: string;
    username?: string | undefined;
    display_name?: string | undefined;
    bio?: string | undefined;
    profile_picture_url?: string | undefined;
    homepage_url?: string | undefined;
}, {
    type: "farcaster";
    fid: number;
    owner_address: string;
    username?: string | undefined;
    display_name?: string | undefined;
    bio?: string | undefined;
    profile_picture_url?: string | undefined;
    homepage_url?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"telegram">;
    telegram_user_id: z.ZodString;
    first_name: z.ZodOptional<z.ZodString>;
    last_name: z.ZodOptional<z.ZodString>;
    username: z.ZodOptional<z.ZodString>;
    photo_url: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    type: "telegram";
    telegram_user_id: string;
    username?: string | undefined;
    first_name?: string | undefined;
    last_name?: string | undefined;
    photo_url?: string | undefined;
}, {
    type: "telegram";
    telegram_user_id: string;
    username?: string | undefined;
    first_name?: string | undefined;
    last_name?: string | undefined;
    photo_url?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"custom_auth">;
    custom_user_id: z.ZodString;
}, "strict", z.ZodTypeAny, {
    type: "custom_auth";
    custom_user_id: string;
}, {
    type: "custom_auth";
    custom_user_id: string;
}>]>;
type LinkedAccountInputType = z.infer<typeof LinkedAccountInput>;
/**
 * Parses a  valid array of LinkedAccount import objects.
 */
declare const LinkedAccountsInput: z.ZodEffects<z.ZodEffects<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<"wallet">;
    address: z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodString, string, string>]>;
    chain_type: z.ZodEnum<["ethereum", "solana"]>;
}, "strip", z.ZodTypeAny, {
    type: "wallet";
    address: string;
    chain_type: "solana" | "ethereum";
}, {
    type: "wallet";
    address: string;
    chain_type: "solana" | "ethereum";
}>, z.ZodObject<{
    type: z.ZodLiteral<"email">;
    address: z.ZodEffects<z.ZodString, string, string>;
}, "strip", z.ZodTypeAny, {
    type: "email";
    address: string;
}, {
    type: "email";
    address: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"phone">;
    number: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>;
}, "strip", z.ZodTypeAny, {
    number: string;
    type: "phone";
}, {
    number: string;
    type: "phone";
}>, z.ZodObject<{
    type: z.ZodLiteral<"google_oauth">;
    subject: z.ZodString;
    email: z.ZodEffects<z.ZodString, string, string>;
    name: z.ZodString;
}, "strict", z.ZodTypeAny, {
    type: "google_oauth";
    name: string;
    email: string;
    subject: string;
}, {
    type: "google_oauth";
    name: string;
    email: string;
    subject: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"twitter_oauth">;
    subject: z.ZodString;
    name: z.ZodString;
    username: z.ZodString;
    profile_picture_url: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
}, "strict", z.ZodTypeAny, {
    type: "twitter_oauth";
    name: string;
    username: string;
    subject: string;
    profile_picture_url?: string | undefined;
}, {
    type: "twitter_oauth";
    name: string;
    username: string;
    subject: string;
    profile_picture_url?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"discord_oauth">;
    subject: z.ZodString;
    username: z.ZodEffects<z.ZodString, string, string>;
    email: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
}, "strict", z.ZodTypeAny, {
    type: "discord_oauth";
    username: string;
    subject: string;
    email?: string | undefined;
}, {
    type: "discord_oauth";
    username: string;
    subject: string;
    email?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"github_oauth">;
    subject: z.ZodString;
    username: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    email: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
}, "strict", z.ZodTypeAny, {
    type: "github_oauth";
    username: string;
    subject: string;
    name?: string | undefined;
    email?: string | undefined;
}, {
    type: "github_oauth";
    username: string;
    subject: string;
    name?: string | undefined;
    email?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"spotify_oauth">;
    subject: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    email: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
}, "strict", z.ZodTypeAny, {
    type: "spotify_oauth";
    subject: string;
    name?: string | undefined;
    email?: string | undefined;
}, {
    type: "spotify_oauth";
    subject: string;
    name?: string | undefined;
    email?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"instagram_oauth">;
    subject: z.ZodString;
    username: z.ZodString;
}, "strict", z.ZodTypeAny, {
    type: "instagram_oauth";
    username: string;
    subject: string;
}, {
    type: "instagram_oauth";
    username: string;
    subject: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"tiktok_oauth">;
    subject: z.ZodString;
    username: z.ZodString;
    name: z.ZodNullable<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    type: "tiktok_oauth";
    name: string | null;
    username: string;
    subject: string;
}, {
    type: "tiktok_oauth";
    name: string | null;
    username: string;
    subject: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"apple_oauth">;
    subject: z.ZodString;
    email: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
}, "strict", z.ZodTypeAny, {
    type: "apple_oauth";
    subject: string;
    email?: string | undefined;
}, {
    type: "apple_oauth";
    subject: string;
    email?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"linkedin_oauth">;
    subject: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    email: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    vanityName: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    type: "linkedin_oauth";
    subject: string;
    name?: string | undefined;
    email?: string | undefined;
    vanityName?: string | undefined;
}, {
    type: "linkedin_oauth";
    subject: string;
    name?: string | undefined;
    email?: string | undefined;
    vanityName?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"farcaster">;
    fid: z.ZodNumber;
    owner_address: z.ZodEffects<z.ZodString, string, string>;
    username: z.ZodOptional<z.ZodString>;
    display_name: z.ZodOptional<z.ZodString>;
    bio: z.ZodOptional<z.ZodString>;
    profile_picture_url: z.ZodOptional<z.ZodString>;
    homepage_url: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    type: "farcaster";
    fid: number;
    owner_address: string;
    username?: string | undefined;
    display_name?: string | undefined;
    bio?: string | undefined;
    profile_picture_url?: string | undefined;
    homepage_url?: string | undefined;
}, {
    type: "farcaster";
    fid: number;
    owner_address: string;
    username?: string | undefined;
    display_name?: string | undefined;
    bio?: string | undefined;
    profile_picture_url?: string | undefined;
    homepage_url?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"telegram">;
    telegram_user_id: z.ZodString;
    first_name: z.ZodOptional<z.ZodString>;
    last_name: z.ZodOptional<z.ZodString>;
    username: z.ZodOptional<z.ZodString>;
    photo_url: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    type: "telegram";
    telegram_user_id: string;
    username?: string | undefined;
    first_name?: string | undefined;
    last_name?: string | undefined;
    photo_url?: string | undefined;
}, {
    type: "telegram";
    telegram_user_id: string;
    username?: string | undefined;
    first_name?: string | undefined;
    last_name?: string | undefined;
    photo_url?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"custom_auth">;
    custom_user_id: z.ZodString;
}, "strict", z.ZodTypeAny, {
    type: "custom_auth";
    custom_user_id: string;
}, {
    type: "custom_auth";
    custom_user_id: string;
}>]>, "many">, {
    emailAccounts: ImportEmailAccountInputType[];
    phoneAccounts: ImportPhoneAccountInputType[];
    ethereumAccounts: ImportWalletAccountInputType[];
    solanaAccounts: ImportWalletAccountInputType[];
    googleAccounts: ImportGoogleAccountInputType[];
    twitterAccounts: ImportTwitterAccountInputType[];
    discordAccounts: ImportDiscordAccountInputType[];
    githubAccounts: ImportGithubAccountInputType[];
    spotifyAccounts: ImportSpotifyAccountInputType[];
    instagramAccounts: ImportInstagramAccountInputType[];
    tiktokAccounts: ImportTiktokAccountInputType[];
    linkedinAccounts: ImportLinkedInAccountInputType[];
    appleAccounts: ImportAppleAccountInputType[];
    farcasterAccounts: ImportFarcasterAccountInputType[];
    telegramAccounts: ImportTelegramAccountInputType[];
    customJwtAccounts: ImportCustomJwtAccountInputType[];
}, ({
    type: "wallet";
    address: string;
    chain_type: "solana" | "ethereum";
} | {
    type: "email";
    address: string;
} | {
    number: string;
    type: "phone";
} | {
    type: "google_oauth";
    name: string;
    email: string;
    subject: string;
} | {
    type: "twitter_oauth";
    name: string;
    username: string;
    subject: string;
    profile_picture_url?: string | undefined;
} | {
    type: "discord_oauth";
    username: string;
    subject: string;
    email?: string | undefined;
} | {
    type: "spotify_oauth";
    subject: string;
    name?: string | undefined;
    email?: string | undefined;
} | {
    type: "github_oauth";
    username: string;
    subject: string;
    name?: string | undefined;
    email?: string | undefined;
} | {
    type: "instagram_oauth";
    username: string;
    subject: string;
} | {
    type: "tiktok_oauth";
    name: string | null;
    username: string;
    subject: string;
} | {
    type: "linkedin_oauth";
    subject: string;
    name?: string | undefined;
    email?: string | undefined;
    vanityName?: string | undefined;
} | {
    type: "apple_oauth";
    subject: string;
    email?: string | undefined;
} | {
    type: "farcaster";
    fid: number;
    owner_address: string;
    username?: string | undefined;
    display_name?: string | undefined;
    bio?: string | undefined;
    profile_picture_url?: string | undefined;
    homepage_url?: string | undefined;
} | {
    type: "telegram";
    telegram_user_id: string;
    username?: string | undefined;
    first_name?: string | undefined;
    last_name?: string | undefined;
    photo_url?: string | undefined;
} | {
    type: "custom_auth";
    custom_user_id: string;
})[]>, {
    emailAccounts: ImportEmailAccountInputType[];
    phoneAccounts: ImportPhoneAccountInputType[];
    ethereumAccounts: ImportWalletAccountInputType[];
    solanaAccounts: ImportWalletAccountInputType[];
    googleAccounts: ImportGoogleAccountInputType[];
    twitterAccounts: ImportTwitterAccountInputType[];
    discordAccounts: ImportDiscordAccountInputType[];
    githubAccounts: ImportGithubAccountInputType[];
    spotifyAccounts: ImportSpotifyAccountInputType[];
    instagramAccounts: ImportInstagramAccountInputType[];
    tiktokAccounts: ImportTiktokAccountInputType[];
    linkedinAccounts: ImportLinkedInAccountInputType[];
    appleAccounts: ImportAppleAccountInputType[];
    farcasterAccounts: ImportFarcasterAccountInputType[];
    telegramAccounts: ImportTelegramAccountInputType[];
    customJwtAccounts: ImportCustomJwtAccountInputType[];
}, ({
    type: "wallet";
    address: string;
    chain_type: "solana" | "ethereum";
} | {
    type: "email";
    address: string;
} | {
    number: string;
    type: "phone";
} | {
    type: "google_oauth";
    name: string;
    email: string;
    subject: string;
} | {
    type: "twitter_oauth";
    name: string;
    username: string;
    subject: string;
    profile_picture_url?: string | undefined;
} | {
    type: "discord_oauth";
    username: string;
    subject: string;
    email?: string | undefined;
} | {
    type: "spotify_oauth";
    subject: string;
    name?: string | undefined;
    email?: string | undefined;
} | {
    type: "github_oauth";
    username: string;
    subject: string;
    name?: string | undefined;
    email?: string | undefined;
} | {
    type: "instagram_oauth";
    username: string;
    subject: string;
} | {
    type: "tiktok_oauth";
    name: string | null;
    username: string;
    subject: string;
} | {
    type: "linkedin_oauth";
    subject: string;
    name?: string | undefined;
    email?: string | undefined;
    vanityName?: string | undefined;
} | {
    type: "apple_oauth";
    subject: string;
    email?: string | undefined;
} | {
    type: "farcaster";
    fid: number;
    owner_address: string;
    username?: string | undefined;
    display_name?: string | undefined;
    bio?: string | undefined;
    profile_picture_url?: string | undefined;
    homepage_url?: string | undefined;
} | {
    type: "telegram";
    telegram_user_id: string;
    username?: string | undefined;
    first_name?: string | undefined;
    last_name?: string | undefined;
    photo_url?: string | undefined;
} | {
    type: "custom_auth";
    custom_user_id: string;
})[]>;
type LinkedAccountsInputType = z.infer<typeof LinkedAccountsInput>;
/**
 * Parse and validate create embedded wallet input for user import.
 * This is a base schema without refines to be used for type inference and later extended with refines.
 * This also provides support for the deprecated methods.
 */
declare const CreateEmbeddedWalletUserImportInput: z.ZodObject<{
    /**
     * @deprecated Create an Ethereum embedded wallet.
     */
    create_embedded_wallet: z.ZodOptional<z.ZodBoolean>;
    /**
     * @deprecated Create the specified number of Ethereum wallets.
     */
    create_n_embedded_wallets: z.ZodOptional<z.ZodNumber>;
    create_n_ethereum_wallets: z.ZodOptional<z.ZodNumber>;
    create_ethereum_wallet: z.ZodOptional<z.ZodBoolean>;
    create_solana_wallet: z.ZodOptional<z.ZodBoolean>;
    create_ethereum_smart_wallet: z.ZodOptional<z.ZodBoolean>;
}, "strict", z.ZodTypeAny, {
    create_embedded_wallet?: boolean | undefined;
    create_n_embedded_wallets?: number | undefined;
    create_n_ethereum_wallets?: number | undefined;
    create_ethereum_wallet?: boolean | undefined;
    create_solana_wallet?: boolean | undefined;
    create_ethereum_smart_wallet?: boolean | undefined;
}, {
    create_embedded_wallet?: boolean | undefined;
    create_n_embedded_wallets?: number | undefined;
    create_n_ethereum_wallets?: number | undefined;
    create_ethereum_wallet?: boolean | undefined;
    create_solana_wallet?: boolean | undefined;
    create_ethereum_smart_wallet?: boolean | undefined;
}>;
type CreateEmbeddedWalletUserImportInputType = z.infer<typeof CreateEmbeddedWalletUserImportInput>;
/**
 * Merges the legacy wallet creation input schema with the new unified embedded wallets input schema
 */
declare const EmbeddedWalletCreationInputUnion: z.ZodObject<{
    wallets: z.ZodOptional<z.ZodArray<z.ZodObject<{
        additional_signers: z.ZodOptional<z.ZodArray<z.ZodObject<{
            signer_id: z.ZodString;
            override_policy_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strict", z.ZodTypeAny, {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }, {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }>, "many">>;
        policy_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        chain_type: z.ZodUnion<[z.ZodLiteral<"solana">, z.ZodLiteral<"ethereum">]>;
        create_smart_wallet: z.ZodOptional<z.ZodBoolean>;
    }, "strict", z.ZodTypeAny, {
        chain_type: "solana" | "ethereum";
        policy_ids?: string[] | undefined;
        additional_signers?: {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }[] | undefined;
        create_smart_wallet?: boolean | undefined;
    }, {
        chain_type: "solana" | "ethereum";
        policy_ids?: string[] | undefined;
        additional_signers?: {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }[] | undefined;
        create_smart_wallet?: boolean | undefined;
    }>, "many">>;
    create_direct_signer: z.ZodOptional<z.ZodBoolean>;
} & {
    /**
     * @deprecated Create an Ethereum embedded wallet.
     */
    create_embedded_wallet: z.ZodOptional<z.ZodBoolean>;
    /**
     * @deprecated Create the specified number of Ethereum wallets.
     */
    create_n_embedded_wallets: z.ZodOptional<z.ZodNumber>;
    create_n_ethereum_wallets: z.ZodOptional<z.ZodNumber>;
    create_ethereum_wallet: z.ZodOptional<z.ZodBoolean>;
    create_solana_wallet: z.ZodOptional<z.ZodBoolean>;
    create_ethereum_smart_wallet: z.ZodOptional<z.ZodBoolean>;
}, "strict", z.ZodTypeAny, {
    wallets?: {
        chain_type: "solana" | "ethereum";
        policy_ids?: string[] | undefined;
        additional_signers?: {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }[] | undefined;
        create_smart_wallet?: boolean | undefined;
    }[] | undefined;
    create_direct_signer?: boolean | undefined;
    create_embedded_wallet?: boolean | undefined;
    create_n_embedded_wallets?: number | undefined;
    create_n_ethereum_wallets?: number | undefined;
    create_ethereum_wallet?: boolean | undefined;
    create_solana_wallet?: boolean | undefined;
    create_ethereum_smart_wallet?: boolean | undefined;
}, {
    wallets?: {
        chain_type: "solana" | "ethereum";
        policy_ids?: string[] | undefined;
        additional_signers?: {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }[] | undefined;
        create_smart_wallet?: boolean | undefined;
    }[] | undefined;
    create_direct_signer?: boolean | undefined;
    create_embedded_wallet?: boolean | undefined;
    create_n_embedded_wallets?: number | undefined;
    create_n_ethereum_wallets?: number | undefined;
    create_ethereum_wallet?: boolean | undefined;
    create_solana_wallet?: boolean | undefined;
    create_ethereum_smart_wallet?: boolean | undefined;
}>;
type EmbeddedWalletCreationInputUnionType = z.infer<typeof EmbeddedWalletCreationInputUnion>;
/**
 * Parse and validate user creation inputs. Parsed object
 * is then transformed to match User model foreign relations and validated
 * once more for aggregate constraints (i.e. no more than 1 Twitter account).
 *
 * Used for request body of POST /api/users/import and /api/users
 */
declare const ImportUserInput: z.ZodEffects<z.ZodObject<{
    wallets: z.ZodOptional<z.ZodArray<z.ZodObject<{
        additional_signers: z.ZodOptional<z.ZodArray<z.ZodObject<{
            signer_id: z.ZodString;
            override_policy_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strict", z.ZodTypeAny, {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }, {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }>, "many">>;
        policy_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        chain_type: z.ZodUnion<[z.ZodLiteral<"solana">, z.ZodLiteral<"ethereum">]>;
        create_smart_wallet: z.ZodOptional<z.ZodBoolean>;
    }, "strict", z.ZodTypeAny, {
        chain_type: "solana" | "ethereum";
        policy_ids?: string[] | undefined;
        additional_signers?: {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }[] | undefined;
        create_smart_wallet?: boolean | undefined;
    }, {
        chain_type: "solana" | "ethereum";
        policy_ids?: string[] | undefined;
        additional_signers?: {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }[] | undefined;
        create_smart_wallet?: boolean | undefined;
    }>, "many">>;
    create_direct_signer: z.ZodOptional<z.ZodBoolean>;
} & {
    /**
     * @deprecated Create an Ethereum embedded wallet.
     */
    create_embedded_wallet: z.ZodOptional<z.ZodBoolean>;
    /**
     * @deprecated Create the specified number of Ethereum wallets.
     */
    create_n_embedded_wallets: z.ZodOptional<z.ZodNumber>;
    create_n_ethereum_wallets: z.ZodOptional<z.ZodNumber>;
    create_ethereum_wallet: z.ZodOptional<z.ZodBoolean>;
    create_solana_wallet: z.ZodOptional<z.ZodBoolean>;
    create_ethereum_smart_wallet: z.ZodOptional<z.ZodBoolean>;
} & {
    linked_accounts: z.ZodEffects<z.ZodEffects<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"wallet">;
        address: z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodString, string, string>]>;
        chain_type: z.ZodEnum<["ethereum", "solana"]>;
    }, "strip", z.ZodTypeAny, {
        type: "wallet";
        address: string;
        chain_type: "solana" | "ethereum";
    }, {
        type: "wallet";
        address: string;
        chain_type: "solana" | "ethereum";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"email">;
        address: z.ZodEffects<z.ZodString, string, string>;
    }, "strip", z.ZodTypeAny, {
        type: "email";
        address: string;
    }, {
        type: "email";
        address: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"phone">;
        number: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>;
    }, "strip", z.ZodTypeAny, {
        number: string;
        type: "phone";
    }, {
        number: string;
        type: "phone";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"google_oauth">;
        subject: z.ZodString;
        email: z.ZodEffects<z.ZodString, string, string>;
        name: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        type: "google_oauth";
        name: string;
        email: string;
        subject: string;
    }, {
        type: "google_oauth";
        name: string;
        email: string;
        subject: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"twitter_oauth">;
        subject: z.ZodString;
        name: z.ZodString;
        username: z.ZodString;
        profile_picture_url: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    }, "strict", z.ZodTypeAny, {
        type: "twitter_oauth";
        name: string;
        username: string;
        subject: string;
        profile_picture_url?: string | undefined;
    }, {
        type: "twitter_oauth";
        name: string;
        username: string;
        subject: string;
        profile_picture_url?: string | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"discord_oauth">;
        subject: z.ZodString;
        username: z.ZodEffects<z.ZodString, string, string>;
        email: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    }, "strict", z.ZodTypeAny, {
        type: "discord_oauth";
        username: string;
        subject: string;
        email?: string | undefined;
    }, {
        type: "discord_oauth";
        username: string;
        subject: string;
        email?: string | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"github_oauth">;
        subject: z.ZodString;
        username: z.ZodString;
        name: z.ZodOptional<z.ZodString>;
        email: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    }, "strict", z.ZodTypeAny, {
        type: "github_oauth";
        username: string;
        subject: string;
        name?: string | undefined;
        email?: string | undefined;
    }, {
        type: "github_oauth";
        username: string;
        subject: string;
        name?: string | undefined;
        email?: string | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"spotify_oauth">;
        subject: z.ZodString;
        name: z.ZodOptional<z.ZodString>;
        email: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    }, "strict", z.ZodTypeAny, {
        type: "spotify_oauth";
        subject: string;
        name?: string | undefined;
        email?: string | undefined;
    }, {
        type: "spotify_oauth";
        subject: string;
        name?: string | undefined;
        email?: string | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"instagram_oauth">;
        subject: z.ZodString;
        username: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        type: "instagram_oauth";
        username: string;
        subject: string;
    }, {
        type: "instagram_oauth";
        username: string;
        subject: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"tiktok_oauth">;
        subject: z.ZodString;
        username: z.ZodString;
        name: z.ZodNullable<z.ZodString>;
    }, "strict", z.ZodTypeAny, {
        type: "tiktok_oauth";
        name: string | null;
        username: string;
        subject: string;
    }, {
        type: "tiktok_oauth";
        name: string | null;
        username: string;
        subject: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"apple_oauth">;
        subject: z.ZodString;
        email: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    }, "strict", z.ZodTypeAny, {
        type: "apple_oauth";
        subject: string;
        email?: string | undefined;
    }, {
        type: "apple_oauth";
        subject: string;
        email?: string | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"linkedin_oauth">;
        subject: z.ZodString;
        name: z.ZodOptional<z.ZodString>;
        email: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
        vanityName: z.ZodOptional<z.ZodString>;
    }, "strict", z.ZodTypeAny, {
        type: "linkedin_oauth";
        subject: string;
        name?: string | undefined;
        email?: string | undefined;
        vanityName?: string | undefined;
    }, {
        type: "linkedin_oauth";
        subject: string;
        name?: string | undefined;
        email?: string | undefined;
        vanityName?: string | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"farcaster">;
        fid: z.ZodNumber;
        owner_address: z.ZodEffects<z.ZodString, string, string>;
        username: z.ZodOptional<z.ZodString>;
        display_name: z.ZodOptional<z.ZodString>;
        bio: z.ZodOptional<z.ZodString>;
        profile_picture_url: z.ZodOptional<z.ZodString>;
        homepage_url: z.ZodOptional<z.ZodString>;
    }, "strict", z.ZodTypeAny, {
        type: "farcaster";
        fid: number;
        owner_address: string;
        username?: string | undefined;
        display_name?: string | undefined;
        bio?: string | undefined;
        profile_picture_url?: string | undefined;
        homepage_url?: string | undefined;
    }, {
        type: "farcaster";
        fid: number;
        owner_address: string;
        username?: string | undefined;
        display_name?: string | undefined;
        bio?: string | undefined;
        profile_picture_url?: string | undefined;
        homepage_url?: string | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"telegram">;
        telegram_user_id: z.ZodString;
        first_name: z.ZodOptional<z.ZodString>;
        last_name: z.ZodOptional<z.ZodString>;
        username: z.ZodOptional<z.ZodString>;
        photo_url: z.ZodOptional<z.ZodString>;
    }, "strict", z.ZodTypeAny, {
        type: "telegram";
        telegram_user_id: string;
        username?: string | undefined;
        first_name?: string | undefined;
        last_name?: string | undefined;
        photo_url?: string | undefined;
    }, {
        type: "telegram";
        telegram_user_id: string;
        username?: string | undefined;
        first_name?: string | undefined;
        last_name?: string | undefined;
        photo_url?: string | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"custom_auth">;
        custom_user_id: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        type: "custom_auth";
        custom_user_id: string;
    }, {
        type: "custom_auth";
        custom_user_id: string;
    }>]>, "many">, {
        emailAccounts: ImportEmailAccountInputType[];
        phoneAccounts: ImportPhoneAccountInputType[];
        ethereumAccounts: ImportWalletAccountInputType[];
        solanaAccounts: ImportWalletAccountInputType[];
        googleAccounts: ImportGoogleAccountInputType[];
        twitterAccounts: ImportTwitterAccountInputType[];
        discordAccounts: ImportDiscordAccountInputType[];
        githubAccounts: ImportGithubAccountInputType[];
        spotifyAccounts: ImportSpotifyAccountInputType[];
        instagramAccounts: ImportInstagramAccountInputType[];
        tiktokAccounts: ImportTiktokAccountInputType[];
        linkedinAccounts: ImportLinkedInAccountInputType[];
        appleAccounts: ImportAppleAccountInputType[];
        farcasterAccounts: ImportFarcasterAccountInputType[];
        telegramAccounts: ImportTelegramAccountInputType[];
        customJwtAccounts: ImportCustomJwtAccountInputType[];
    }, ({
        type: "wallet";
        address: string;
        chain_type: "solana" | "ethereum";
    } | {
        type: "email";
        address: string;
    } | {
        number: string;
        type: "phone";
    } | {
        type: "google_oauth";
        name: string;
        email: string;
        subject: string;
    } | {
        type: "twitter_oauth";
        name: string;
        username: string;
        subject: string;
        profile_picture_url?: string | undefined;
    } | {
        type: "discord_oauth";
        username: string;
        subject: string;
        email?: string | undefined;
    } | {
        type: "spotify_oauth";
        subject: string;
        name?: string | undefined;
        email?: string | undefined;
    } | {
        type: "github_oauth";
        username: string;
        subject: string;
        name?: string | undefined;
        email?: string | undefined;
    } | {
        type: "instagram_oauth";
        username: string;
        subject: string;
    } | {
        type: "tiktok_oauth";
        name: string | null;
        username: string;
        subject: string;
    } | {
        type: "linkedin_oauth";
        subject: string;
        name?: string | undefined;
        email?: string | undefined;
        vanityName?: string | undefined;
    } | {
        type: "apple_oauth";
        subject: string;
        email?: string | undefined;
    } | {
        type: "farcaster";
        fid: number;
        owner_address: string;
        username?: string | undefined;
        display_name?: string | undefined;
        bio?: string | undefined;
        profile_picture_url?: string | undefined;
        homepage_url?: string | undefined;
    } | {
        type: "telegram";
        telegram_user_id: string;
        username?: string | undefined;
        first_name?: string | undefined;
        last_name?: string | undefined;
        photo_url?: string | undefined;
    } | {
        type: "custom_auth";
        custom_user_id: string;
    })[]>, {
        emailAccounts: ImportEmailAccountInputType[];
        phoneAccounts: ImportPhoneAccountInputType[];
        ethereumAccounts: ImportWalletAccountInputType[];
        solanaAccounts: ImportWalletAccountInputType[];
        googleAccounts: ImportGoogleAccountInputType[];
        twitterAccounts: ImportTwitterAccountInputType[];
        discordAccounts: ImportDiscordAccountInputType[];
        githubAccounts: ImportGithubAccountInputType[];
        spotifyAccounts: ImportSpotifyAccountInputType[];
        instagramAccounts: ImportInstagramAccountInputType[];
        tiktokAccounts: ImportTiktokAccountInputType[];
        linkedinAccounts: ImportLinkedInAccountInputType[];
        appleAccounts: ImportAppleAccountInputType[];
        farcasterAccounts: ImportFarcasterAccountInputType[];
        telegramAccounts: ImportTelegramAccountInputType[];
        customJwtAccounts: ImportCustomJwtAccountInputType[];
    }, ({
        type: "wallet";
        address: string;
        chain_type: "solana" | "ethereum";
    } | {
        type: "email";
        address: string;
    } | {
        number: string;
        type: "phone";
    } | {
        type: "google_oauth";
        name: string;
        email: string;
        subject: string;
    } | {
        type: "twitter_oauth";
        name: string;
        username: string;
        subject: string;
        profile_picture_url?: string | undefined;
    } | {
        type: "discord_oauth";
        username: string;
        subject: string;
        email?: string | undefined;
    } | {
        type: "spotify_oauth";
        subject: string;
        name?: string | undefined;
        email?: string | undefined;
    } | {
        type: "github_oauth";
        username: string;
        subject: string;
        name?: string | undefined;
        email?: string | undefined;
    } | {
        type: "instagram_oauth";
        username: string;
        subject: string;
    } | {
        type: "tiktok_oauth";
        name: string | null;
        username: string;
        subject: string;
    } | {
        type: "linkedin_oauth";
        subject: string;
        name?: string | undefined;
        email?: string | undefined;
        vanityName?: string | undefined;
    } | {
        type: "apple_oauth";
        subject: string;
        email?: string | undefined;
    } | {
        type: "farcaster";
        fid: number;
        owner_address: string;
        username?: string | undefined;
        display_name?: string | undefined;
        bio?: string | undefined;
        profile_picture_url?: string | undefined;
        homepage_url?: string | undefined;
    } | {
        type: "telegram";
        telegram_user_id: string;
        username?: string | undefined;
        first_name?: string | undefined;
        last_name?: string | undefined;
        photo_url?: string | undefined;
    } | {
        type: "custom_auth";
        custom_user_id: string;
    })[]>;
    custom_metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>>;
}, "strict", z.ZodTypeAny, {
    linked_accounts: {
        emailAccounts: ImportEmailAccountInputType[];
        phoneAccounts: ImportPhoneAccountInputType[];
        ethereumAccounts: ImportWalletAccountInputType[];
        solanaAccounts: ImportWalletAccountInputType[];
        googleAccounts: ImportGoogleAccountInputType[];
        twitterAccounts: ImportTwitterAccountInputType[];
        discordAccounts: ImportDiscordAccountInputType[];
        githubAccounts: ImportGithubAccountInputType[];
        spotifyAccounts: ImportSpotifyAccountInputType[];
        instagramAccounts: ImportInstagramAccountInputType[];
        tiktokAccounts: ImportTiktokAccountInputType[];
        linkedinAccounts: ImportLinkedInAccountInputType[];
        appleAccounts: ImportAppleAccountInputType[];
        farcasterAccounts: ImportFarcasterAccountInputType[];
        telegramAccounts: ImportTelegramAccountInputType[];
        customJwtAccounts: ImportCustomJwtAccountInputType[];
    };
    custom_metadata?: Record<string, string | number | boolean> | undefined;
    wallets?: {
        chain_type: "solana" | "ethereum";
        policy_ids?: string[] | undefined;
        additional_signers?: {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }[] | undefined;
        create_smart_wallet?: boolean | undefined;
    }[] | undefined;
    create_direct_signer?: boolean | undefined;
    create_embedded_wallet?: boolean | undefined;
    create_n_embedded_wallets?: number | undefined;
    create_n_ethereum_wallets?: number | undefined;
    create_ethereum_wallet?: boolean | undefined;
    create_solana_wallet?: boolean | undefined;
    create_ethereum_smart_wallet?: boolean | undefined;
}, {
    linked_accounts: ({
        type: "wallet";
        address: string;
        chain_type: "solana" | "ethereum";
    } | {
        type: "email";
        address: string;
    } | {
        number: string;
        type: "phone";
    } | {
        type: "google_oauth";
        name: string;
        email: string;
        subject: string;
    } | {
        type: "twitter_oauth";
        name: string;
        username: string;
        subject: string;
        profile_picture_url?: string | undefined;
    } | {
        type: "discord_oauth";
        username: string;
        subject: string;
        email?: string | undefined;
    } | {
        type: "spotify_oauth";
        subject: string;
        name?: string | undefined;
        email?: string | undefined;
    } | {
        type: "github_oauth";
        username: string;
        subject: string;
        name?: string | undefined;
        email?: string | undefined;
    } | {
        type: "instagram_oauth";
        username: string;
        subject: string;
    } | {
        type: "tiktok_oauth";
        name: string | null;
        username: string;
        subject: string;
    } | {
        type: "linkedin_oauth";
        subject: string;
        name?: string | undefined;
        email?: string | undefined;
        vanityName?: string | undefined;
    } | {
        type: "apple_oauth";
        subject: string;
        email?: string | undefined;
    } | {
        type: "farcaster";
        fid: number;
        owner_address: string;
        username?: string | undefined;
        display_name?: string | undefined;
        bio?: string | undefined;
        profile_picture_url?: string | undefined;
        homepage_url?: string | undefined;
    } | {
        type: "telegram";
        telegram_user_id: string;
        username?: string | undefined;
        first_name?: string | undefined;
        last_name?: string | undefined;
        photo_url?: string | undefined;
    } | {
        type: "custom_auth";
        custom_user_id: string;
    })[];
    custom_metadata?: Record<string, string | number | boolean> | undefined;
    wallets?: {
        chain_type: "solana" | "ethereum";
        policy_ids?: string[] | undefined;
        additional_signers?: {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }[] | undefined;
        create_smart_wallet?: boolean | undefined;
    }[] | undefined;
    create_direct_signer?: boolean | undefined;
    create_embedded_wallet?: boolean | undefined;
    create_n_embedded_wallets?: number | undefined;
    create_n_ethereum_wallets?: number | undefined;
    create_ethereum_wallet?: boolean | undefined;
    create_solana_wallet?: boolean | undefined;
    create_ethereum_smart_wallet?: boolean | undefined;
}>, {
    linked_accounts: {
        emailAccounts: ImportEmailAccountInputType[];
        phoneAccounts: ImportPhoneAccountInputType[];
        ethereumAccounts: ImportWalletAccountInputType[];
        solanaAccounts: ImportWalletAccountInputType[];
        googleAccounts: ImportGoogleAccountInputType[];
        twitterAccounts: ImportTwitterAccountInputType[];
        discordAccounts: ImportDiscordAccountInputType[];
        githubAccounts: ImportGithubAccountInputType[];
        spotifyAccounts: ImportSpotifyAccountInputType[];
        instagramAccounts: ImportInstagramAccountInputType[];
        tiktokAccounts: ImportTiktokAccountInputType[];
        linkedinAccounts: ImportLinkedInAccountInputType[];
        appleAccounts: ImportAppleAccountInputType[];
        farcasterAccounts: ImportFarcasterAccountInputType[];
        telegramAccounts: ImportTelegramAccountInputType[];
        customJwtAccounts: ImportCustomJwtAccountInputType[];
    };
    custom_metadata?: Record<string, string | number | boolean> | undefined;
    wallets?: {
        chain_type: "solana" | "ethereum";
        policy_ids?: string[] | undefined;
        additional_signers?: {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }[] | undefined;
        create_smart_wallet?: boolean | undefined;
    }[] | undefined;
    create_direct_signer?: boolean | undefined;
    create_embedded_wallet?: boolean | undefined;
    create_n_embedded_wallets?: number | undefined;
    create_n_ethereum_wallets?: number | undefined;
    create_ethereum_wallet?: boolean | undefined;
    create_solana_wallet?: boolean | undefined;
    create_ethereum_smart_wallet?: boolean | undefined;
}, {
    linked_accounts: ({
        type: "wallet";
        address: string;
        chain_type: "solana" | "ethereum";
    } | {
        type: "email";
        address: string;
    } | {
        number: string;
        type: "phone";
    } | {
        type: "google_oauth";
        name: string;
        email: string;
        subject: string;
    } | {
        type: "twitter_oauth";
        name: string;
        username: string;
        subject: string;
        profile_picture_url?: string | undefined;
    } | {
        type: "discord_oauth";
        username: string;
        subject: string;
        email?: string | undefined;
    } | {
        type: "spotify_oauth";
        subject: string;
        name?: string | undefined;
        email?: string | undefined;
    } | {
        type: "github_oauth";
        username: string;
        subject: string;
        name?: string | undefined;
        email?: string | undefined;
    } | {
        type: "instagram_oauth";
        username: string;
        subject: string;
    } | {
        type: "tiktok_oauth";
        name: string | null;
        username: string;
        subject: string;
    } | {
        type: "linkedin_oauth";
        subject: string;
        name?: string | undefined;
        email?: string | undefined;
        vanityName?: string | undefined;
    } | {
        type: "apple_oauth";
        subject: string;
        email?: string | undefined;
    } | {
        type: "farcaster";
        fid: number;
        owner_address: string;
        username?: string | undefined;
        display_name?: string | undefined;
        bio?: string | undefined;
        profile_picture_url?: string | undefined;
        homepage_url?: string | undefined;
    } | {
        type: "telegram";
        telegram_user_id: string;
        username?: string | undefined;
        first_name?: string | undefined;
        last_name?: string | undefined;
        photo_url?: string | undefined;
    } | {
        type: "custom_auth";
        custom_user_id: string;
    })[];
    custom_metadata?: Record<string, string | number | boolean> | undefined;
    wallets?: {
        chain_type: "solana" | "ethereum";
        policy_ids?: string[] | undefined;
        additional_signers?: {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }[] | undefined;
        create_smart_wallet?: boolean | undefined;
    }[] | undefined;
    create_direct_signer?: boolean | undefined;
    create_embedded_wallet?: boolean | undefined;
    create_n_embedded_wallets?: number | undefined;
    create_n_ethereum_wallets?: number | undefined;
    create_ethereum_wallet?: boolean | undefined;
    create_solana_wallet?: boolean | undefined;
    create_ethereum_smart_wallet?: boolean | undefined;
}>;
type ImportUserInputType = z.infer<typeof ImportUserInput>;
declare const ImportManyUsersInput: z.ZodObject<{
    users: z.ZodArray<z.ZodEffects<z.ZodObject<{
        wallets: z.ZodOptional<z.ZodArray<z.ZodObject<{
            additional_signers: z.ZodOptional<z.ZodArray<z.ZodObject<{
                signer_id: z.ZodString;
                override_policy_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strict", z.ZodTypeAny, {
                signer_id: string;
                override_policy_ids?: string[] | undefined;
            }, {
                signer_id: string;
                override_policy_ids?: string[] | undefined;
            }>, "many">>;
            policy_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            chain_type: z.ZodUnion<[z.ZodLiteral<"solana">, z.ZodLiteral<"ethereum">]>;
            create_smart_wallet: z.ZodOptional<z.ZodBoolean>;
        }, "strict", z.ZodTypeAny, {
            chain_type: "solana" | "ethereum";
            policy_ids?: string[] | undefined;
            additional_signers?: {
                signer_id: string;
                override_policy_ids?: string[] | undefined;
            }[] | undefined;
            create_smart_wallet?: boolean | undefined;
        }, {
            chain_type: "solana" | "ethereum";
            policy_ids?: string[] | undefined;
            additional_signers?: {
                signer_id: string;
                override_policy_ids?: string[] | undefined;
            }[] | undefined;
            create_smart_wallet?: boolean | undefined;
        }>, "many">>;
        create_direct_signer: z.ZodOptional<z.ZodBoolean>;
    } & {
        /**
         * @deprecated Create an Ethereum embedded wallet.
         */
        create_embedded_wallet: z.ZodOptional<z.ZodBoolean>;
        /**
         * @deprecated Create the specified number of Ethereum wallets.
         */
        create_n_embedded_wallets: z.ZodOptional<z.ZodNumber>;
        create_n_ethereum_wallets: z.ZodOptional<z.ZodNumber>;
        create_ethereum_wallet: z.ZodOptional<z.ZodBoolean>;
        create_solana_wallet: z.ZodOptional<z.ZodBoolean>;
        create_ethereum_smart_wallet: z.ZodOptional<z.ZodBoolean>;
    } & {
        linked_accounts: z.ZodEffects<z.ZodEffects<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"wallet">;
            address: z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodString, string, string>]>;
            chain_type: z.ZodEnum<["ethereum", "solana"]>;
        }, "strip", z.ZodTypeAny, {
            type: "wallet";
            address: string;
            chain_type: "solana" | "ethereum";
        }, {
            type: "wallet";
            address: string;
            chain_type: "solana" | "ethereum";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"email">;
            address: z.ZodEffects<z.ZodString, string, string>;
        }, "strip", z.ZodTypeAny, {
            type: "email";
            address: string;
        }, {
            type: "email";
            address: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"phone">;
            number: z.ZodEffects<z.ZodEffects<z.ZodString, string, string>, string, string>;
        }, "strip", z.ZodTypeAny, {
            number: string;
            type: "phone";
        }, {
            number: string;
            type: "phone";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"google_oauth">;
            subject: z.ZodString;
            email: z.ZodEffects<z.ZodString, string, string>;
            name: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            type: "google_oauth";
            name: string;
            email: string;
            subject: string;
        }, {
            type: "google_oauth";
            name: string;
            email: string;
            subject: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"twitter_oauth">;
            subject: z.ZodString;
            name: z.ZodString;
            username: z.ZodString;
            profile_picture_url: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
        }, "strict", z.ZodTypeAny, {
            type: "twitter_oauth";
            name: string;
            username: string;
            subject: string;
            profile_picture_url?: string | undefined;
        }, {
            type: "twitter_oauth";
            name: string;
            username: string;
            subject: string;
            profile_picture_url?: string | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"discord_oauth">;
            subject: z.ZodString;
            username: z.ZodEffects<z.ZodString, string, string>;
            email: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
        }, "strict", z.ZodTypeAny, {
            type: "discord_oauth";
            username: string;
            subject: string;
            email?: string | undefined;
        }, {
            type: "discord_oauth";
            username: string;
            subject: string;
            email?: string | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"github_oauth">;
            subject: z.ZodString;
            username: z.ZodString;
            name: z.ZodOptional<z.ZodString>;
            email: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
        }, "strict", z.ZodTypeAny, {
            type: "github_oauth";
            username: string;
            subject: string;
            name?: string | undefined;
            email?: string | undefined;
        }, {
            type: "github_oauth";
            username: string;
            subject: string;
            name?: string | undefined;
            email?: string | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"spotify_oauth">;
            subject: z.ZodString;
            name: z.ZodOptional<z.ZodString>;
            email: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
        }, "strict", z.ZodTypeAny, {
            type: "spotify_oauth";
            subject: string;
            name?: string | undefined;
            email?: string | undefined;
        }, {
            type: "spotify_oauth";
            subject: string;
            name?: string | undefined;
            email?: string | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"instagram_oauth">;
            subject: z.ZodString;
            username: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            type: "instagram_oauth";
            username: string;
            subject: string;
        }, {
            type: "instagram_oauth";
            username: string;
            subject: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"tiktok_oauth">;
            subject: z.ZodString;
            username: z.ZodString;
            name: z.ZodNullable<z.ZodString>;
        }, "strict", z.ZodTypeAny, {
            type: "tiktok_oauth";
            name: string | null;
            username: string;
            subject: string;
        }, {
            type: "tiktok_oauth";
            name: string | null;
            username: string;
            subject: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"apple_oauth">;
            subject: z.ZodString;
            email: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
        }, "strict", z.ZodTypeAny, {
            type: "apple_oauth";
            subject: string;
            email?: string | undefined;
        }, {
            type: "apple_oauth";
            subject: string;
            email?: string | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"linkedin_oauth">;
            subject: z.ZodString;
            name: z.ZodOptional<z.ZodString>;
            email: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
            vanityName: z.ZodOptional<z.ZodString>;
        }, "strict", z.ZodTypeAny, {
            type: "linkedin_oauth";
            subject: string;
            name?: string | undefined;
            email?: string | undefined;
            vanityName?: string | undefined;
        }, {
            type: "linkedin_oauth";
            subject: string;
            name?: string | undefined;
            email?: string | undefined;
            vanityName?: string | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"farcaster">;
            fid: z.ZodNumber;
            owner_address: z.ZodEffects<z.ZodString, string, string>;
            username: z.ZodOptional<z.ZodString>;
            display_name: z.ZodOptional<z.ZodString>;
            bio: z.ZodOptional<z.ZodString>;
            profile_picture_url: z.ZodOptional<z.ZodString>;
            homepage_url: z.ZodOptional<z.ZodString>;
        }, "strict", z.ZodTypeAny, {
            type: "farcaster";
            fid: number;
            owner_address: string;
            username?: string | undefined;
            display_name?: string | undefined;
            bio?: string | undefined;
            profile_picture_url?: string | undefined;
            homepage_url?: string | undefined;
        }, {
            type: "farcaster";
            fid: number;
            owner_address: string;
            username?: string | undefined;
            display_name?: string | undefined;
            bio?: string | undefined;
            profile_picture_url?: string | undefined;
            homepage_url?: string | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"telegram">;
            telegram_user_id: z.ZodString;
            first_name: z.ZodOptional<z.ZodString>;
            last_name: z.ZodOptional<z.ZodString>;
            username: z.ZodOptional<z.ZodString>;
            photo_url: z.ZodOptional<z.ZodString>;
        }, "strict", z.ZodTypeAny, {
            type: "telegram";
            telegram_user_id: string;
            username?: string | undefined;
            first_name?: string | undefined;
            last_name?: string | undefined;
            photo_url?: string | undefined;
        }, {
            type: "telegram";
            telegram_user_id: string;
            username?: string | undefined;
            first_name?: string | undefined;
            last_name?: string | undefined;
            photo_url?: string | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"custom_auth">;
            custom_user_id: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            type: "custom_auth";
            custom_user_id: string;
        }, {
            type: "custom_auth";
            custom_user_id: string;
        }>]>, "many">, {
            emailAccounts: ImportEmailAccountInputType[];
            phoneAccounts: ImportPhoneAccountInputType[];
            ethereumAccounts: ImportWalletAccountInputType[];
            solanaAccounts: ImportWalletAccountInputType[];
            googleAccounts: ImportGoogleAccountInputType[];
            twitterAccounts: ImportTwitterAccountInputType[];
            discordAccounts: ImportDiscordAccountInputType[];
            githubAccounts: ImportGithubAccountInputType[];
            spotifyAccounts: ImportSpotifyAccountInputType[];
            instagramAccounts: ImportInstagramAccountInputType[];
            tiktokAccounts: ImportTiktokAccountInputType[];
            linkedinAccounts: ImportLinkedInAccountInputType[];
            appleAccounts: ImportAppleAccountInputType[];
            farcasterAccounts: ImportFarcasterAccountInputType[];
            telegramAccounts: ImportTelegramAccountInputType[];
            customJwtAccounts: ImportCustomJwtAccountInputType[];
        }, ({
            type: "wallet";
            address: string;
            chain_type: "solana" | "ethereum";
        } | {
            type: "email";
            address: string;
        } | {
            number: string;
            type: "phone";
        } | {
            type: "google_oauth";
            name: string;
            email: string;
            subject: string;
        } | {
            type: "twitter_oauth";
            name: string;
            username: string;
            subject: string;
            profile_picture_url?: string | undefined;
        } | {
            type: "discord_oauth";
            username: string;
            subject: string;
            email?: string | undefined;
        } | {
            type: "spotify_oauth";
            subject: string;
            name?: string | undefined;
            email?: string | undefined;
        } | {
            type: "github_oauth";
            username: string;
            subject: string;
            name?: string | undefined;
            email?: string | undefined;
        } | {
            type: "instagram_oauth";
            username: string;
            subject: string;
        } | {
            type: "tiktok_oauth";
            name: string | null;
            username: string;
            subject: string;
        } | {
            type: "linkedin_oauth";
            subject: string;
            name?: string | undefined;
            email?: string | undefined;
            vanityName?: string | undefined;
        } | {
            type: "apple_oauth";
            subject: string;
            email?: string | undefined;
        } | {
            type: "farcaster";
            fid: number;
            owner_address: string;
            username?: string | undefined;
            display_name?: string | undefined;
            bio?: string | undefined;
            profile_picture_url?: string | undefined;
            homepage_url?: string | undefined;
        } | {
            type: "telegram";
            telegram_user_id: string;
            username?: string | undefined;
            first_name?: string | undefined;
            last_name?: string | undefined;
            photo_url?: string | undefined;
        } | {
            type: "custom_auth";
            custom_user_id: string;
        })[]>, {
            emailAccounts: ImportEmailAccountInputType[];
            phoneAccounts: ImportPhoneAccountInputType[];
            ethereumAccounts: ImportWalletAccountInputType[];
            solanaAccounts: ImportWalletAccountInputType[];
            googleAccounts: ImportGoogleAccountInputType[];
            twitterAccounts: ImportTwitterAccountInputType[];
            discordAccounts: ImportDiscordAccountInputType[];
            githubAccounts: ImportGithubAccountInputType[];
            spotifyAccounts: ImportSpotifyAccountInputType[];
            instagramAccounts: ImportInstagramAccountInputType[];
            tiktokAccounts: ImportTiktokAccountInputType[];
            linkedinAccounts: ImportLinkedInAccountInputType[];
            appleAccounts: ImportAppleAccountInputType[];
            farcasterAccounts: ImportFarcasterAccountInputType[];
            telegramAccounts: ImportTelegramAccountInputType[];
            customJwtAccounts: ImportCustomJwtAccountInputType[];
        }, ({
            type: "wallet";
            address: string;
            chain_type: "solana" | "ethereum";
        } | {
            type: "email";
            address: string;
        } | {
            number: string;
            type: "phone";
        } | {
            type: "google_oauth";
            name: string;
            email: string;
            subject: string;
        } | {
            type: "twitter_oauth";
            name: string;
            username: string;
            subject: string;
            profile_picture_url?: string | undefined;
        } | {
            type: "discord_oauth";
            username: string;
            subject: string;
            email?: string | undefined;
        } | {
            type: "spotify_oauth";
            subject: string;
            name?: string | undefined;
            email?: string | undefined;
        } | {
            type: "github_oauth";
            username: string;
            subject: string;
            name?: string | undefined;
            email?: string | undefined;
        } | {
            type: "instagram_oauth";
            username: string;
            subject: string;
        } | {
            type: "tiktok_oauth";
            name: string | null;
            username: string;
            subject: string;
        } | {
            type: "linkedin_oauth";
            subject: string;
            name?: string | undefined;
            email?: string | undefined;
            vanityName?: string | undefined;
        } | {
            type: "apple_oauth";
            subject: string;
            email?: string | undefined;
        } | {
            type: "farcaster";
            fid: number;
            owner_address: string;
            username?: string | undefined;
            display_name?: string | undefined;
            bio?: string | undefined;
            profile_picture_url?: string | undefined;
            homepage_url?: string | undefined;
        } | {
            type: "telegram";
            telegram_user_id: string;
            username?: string | undefined;
            first_name?: string | undefined;
            last_name?: string | undefined;
            photo_url?: string | undefined;
        } | {
            type: "custom_auth";
            custom_user_id: string;
        })[]>;
        custom_metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>>;
    }, "strict", z.ZodTypeAny, {
        linked_accounts: {
            emailAccounts: ImportEmailAccountInputType[];
            phoneAccounts: ImportPhoneAccountInputType[];
            ethereumAccounts: ImportWalletAccountInputType[];
            solanaAccounts: ImportWalletAccountInputType[];
            googleAccounts: ImportGoogleAccountInputType[];
            twitterAccounts: ImportTwitterAccountInputType[];
            discordAccounts: ImportDiscordAccountInputType[];
            githubAccounts: ImportGithubAccountInputType[];
            spotifyAccounts: ImportSpotifyAccountInputType[];
            instagramAccounts: ImportInstagramAccountInputType[];
            tiktokAccounts: ImportTiktokAccountInputType[];
            linkedinAccounts: ImportLinkedInAccountInputType[];
            appleAccounts: ImportAppleAccountInputType[];
            farcasterAccounts: ImportFarcasterAccountInputType[];
            telegramAccounts: ImportTelegramAccountInputType[];
            customJwtAccounts: ImportCustomJwtAccountInputType[];
        };
        custom_metadata?: Record<string, string | number | boolean> | undefined;
        wallets?: {
            chain_type: "solana" | "ethereum";
            policy_ids?: string[] | undefined;
            additional_signers?: {
                signer_id: string;
                override_policy_ids?: string[] | undefined;
            }[] | undefined;
            create_smart_wallet?: boolean | undefined;
        }[] | undefined;
        create_direct_signer?: boolean | undefined;
        create_embedded_wallet?: boolean | undefined;
        create_n_embedded_wallets?: number | undefined;
        create_n_ethereum_wallets?: number | undefined;
        create_ethereum_wallet?: boolean | undefined;
        create_solana_wallet?: boolean | undefined;
        create_ethereum_smart_wallet?: boolean | undefined;
    }, {
        linked_accounts: ({
            type: "wallet";
            address: string;
            chain_type: "solana" | "ethereum";
        } | {
            type: "email";
            address: string;
        } | {
            number: string;
            type: "phone";
        } | {
            type: "google_oauth";
            name: string;
            email: string;
            subject: string;
        } | {
            type: "twitter_oauth";
            name: string;
            username: string;
            subject: string;
            profile_picture_url?: string | undefined;
        } | {
            type: "discord_oauth";
            username: string;
            subject: string;
            email?: string | undefined;
        } | {
            type: "spotify_oauth";
            subject: string;
            name?: string | undefined;
            email?: string | undefined;
        } | {
            type: "github_oauth";
            username: string;
            subject: string;
            name?: string | undefined;
            email?: string | undefined;
        } | {
            type: "instagram_oauth";
            username: string;
            subject: string;
        } | {
            type: "tiktok_oauth";
            name: string | null;
            username: string;
            subject: string;
        } | {
            type: "linkedin_oauth";
            subject: string;
            name?: string | undefined;
            email?: string | undefined;
            vanityName?: string | undefined;
        } | {
            type: "apple_oauth";
            subject: string;
            email?: string | undefined;
        } | {
            type: "farcaster";
            fid: number;
            owner_address: string;
            username?: string | undefined;
            display_name?: string | undefined;
            bio?: string | undefined;
            profile_picture_url?: string | undefined;
            homepage_url?: string | undefined;
        } | {
            type: "telegram";
            telegram_user_id: string;
            username?: string | undefined;
            first_name?: string | undefined;
            last_name?: string | undefined;
            photo_url?: string | undefined;
        } | {
            type: "custom_auth";
            custom_user_id: string;
        })[];
        custom_metadata?: Record<string, string | number | boolean> | undefined;
        wallets?: {
            chain_type: "solana" | "ethereum";
            policy_ids?: string[] | undefined;
            additional_signers?: {
                signer_id: string;
                override_policy_ids?: string[] | undefined;
            }[] | undefined;
            create_smart_wallet?: boolean | undefined;
        }[] | undefined;
        create_direct_signer?: boolean | undefined;
        create_embedded_wallet?: boolean | undefined;
        create_n_embedded_wallets?: number | undefined;
        create_n_ethereum_wallets?: number | undefined;
        create_ethereum_wallet?: boolean | undefined;
        create_solana_wallet?: boolean | undefined;
        create_ethereum_smart_wallet?: boolean | undefined;
    }>, {
        linked_accounts: {
            emailAccounts: ImportEmailAccountInputType[];
            phoneAccounts: ImportPhoneAccountInputType[];
            ethereumAccounts: ImportWalletAccountInputType[];
            solanaAccounts: ImportWalletAccountInputType[];
            googleAccounts: ImportGoogleAccountInputType[];
            twitterAccounts: ImportTwitterAccountInputType[];
            discordAccounts: ImportDiscordAccountInputType[];
            githubAccounts: ImportGithubAccountInputType[];
            spotifyAccounts: ImportSpotifyAccountInputType[];
            instagramAccounts: ImportInstagramAccountInputType[];
            tiktokAccounts: ImportTiktokAccountInputType[];
            linkedinAccounts: ImportLinkedInAccountInputType[];
            appleAccounts: ImportAppleAccountInputType[];
            farcasterAccounts: ImportFarcasterAccountInputType[];
            telegramAccounts: ImportTelegramAccountInputType[];
            customJwtAccounts: ImportCustomJwtAccountInputType[];
        };
        custom_metadata?: Record<string, string | number | boolean> | undefined;
        wallets?: {
            chain_type: "solana" | "ethereum";
            policy_ids?: string[] | undefined;
            additional_signers?: {
                signer_id: string;
                override_policy_ids?: string[] | undefined;
            }[] | undefined;
            create_smart_wallet?: boolean | undefined;
        }[] | undefined;
        create_direct_signer?: boolean | undefined;
        create_embedded_wallet?: boolean | undefined;
        create_n_embedded_wallets?: number | undefined;
        create_n_ethereum_wallets?: number | undefined;
        create_ethereum_wallet?: boolean | undefined;
        create_solana_wallet?: boolean | undefined;
        create_ethereum_smart_wallet?: boolean | undefined;
    }, {
        linked_accounts: ({
            type: "wallet";
            address: string;
            chain_type: "solana" | "ethereum";
        } | {
            type: "email";
            address: string;
        } | {
            number: string;
            type: "phone";
        } | {
            type: "google_oauth";
            name: string;
            email: string;
            subject: string;
        } | {
            type: "twitter_oauth";
            name: string;
            username: string;
            subject: string;
            profile_picture_url?: string | undefined;
        } | {
            type: "discord_oauth";
            username: string;
            subject: string;
            email?: string | undefined;
        } | {
            type: "spotify_oauth";
            subject: string;
            name?: string | undefined;
            email?: string | undefined;
        } | {
            type: "github_oauth";
            username: string;
            subject: string;
            name?: string | undefined;
            email?: string | undefined;
        } | {
            type: "instagram_oauth";
            username: string;
            subject: string;
        } | {
            type: "tiktok_oauth";
            name: string | null;
            username: string;
            subject: string;
        } | {
            type: "linkedin_oauth";
            subject: string;
            name?: string | undefined;
            email?: string | undefined;
            vanityName?: string | undefined;
        } | {
            type: "apple_oauth";
            subject: string;
            email?: string | undefined;
        } | {
            type: "farcaster";
            fid: number;
            owner_address: string;
            username?: string | undefined;
            display_name?: string | undefined;
            bio?: string | undefined;
            profile_picture_url?: string | undefined;
            homepage_url?: string | undefined;
        } | {
            type: "telegram";
            telegram_user_id: string;
            username?: string | undefined;
            first_name?: string | undefined;
            last_name?: string | undefined;
            photo_url?: string | undefined;
        } | {
            type: "custom_auth";
            custom_user_id: string;
        })[];
        custom_metadata?: Record<string, string | number | boolean> | undefined;
        wallets?: {
            chain_type: "solana" | "ethereum";
            policy_ids?: string[] | undefined;
            additional_signers?: {
                signer_id: string;
                override_policy_ids?: string[] | undefined;
            }[] | undefined;
            create_smart_wallet?: boolean | undefined;
        }[] | undefined;
        create_direct_signer?: boolean | undefined;
        create_embedded_wallet?: boolean | undefined;
        create_n_embedded_wallets?: number | undefined;
        create_n_ethereum_wallets?: number | undefined;
        create_ethereum_wallet?: boolean | undefined;
        create_solana_wallet?: boolean | undefined;
        create_ethereum_smart_wallet?: boolean | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    users: {
        linked_accounts: {
            emailAccounts: ImportEmailAccountInputType[];
            phoneAccounts: ImportPhoneAccountInputType[];
            ethereumAccounts: ImportWalletAccountInputType[];
            solanaAccounts: ImportWalletAccountInputType[];
            googleAccounts: ImportGoogleAccountInputType[];
            twitterAccounts: ImportTwitterAccountInputType[];
            discordAccounts: ImportDiscordAccountInputType[];
            githubAccounts: ImportGithubAccountInputType[];
            spotifyAccounts: ImportSpotifyAccountInputType[];
            instagramAccounts: ImportInstagramAccountInputType[];
            tiktokAccounts: ImportTiktokAccountInputType[];
            linkedinAccounts: ImportLinkedInAccountInputType[];
            appleAccounts: ImportAppleAccountInputType[];
            farcasterAccounts: ImportFarcasterAccountInputType[];
            telegramAccounts: ImportTelegramAccountInputType[];
            customJwtAccounts: ImportCustomJwtAccountInputType[];
        };
        custom_metadata?: Record<string, string | number | boolean> | undefined;
        wallets?: {
            chain_type: "solana" | "ethereum";
            policy_ids?: string[] | undefined;
            additional_signers?: {
                signer_id: string;
                override_policy_ids?: string[] | undefined;
            }[] | undefined;
            create_smart_wallet?: boolean | undefined;
        }[] | undefined;
        create_direct_signer?: boolean | undefined;
        create_embedded_wallet?: boolean | undefined;
        create_n_embedded_wallets?: number | undefined;
        create_n_ethereum_wallets?: number | undefined;
        create_ethereum_wallet?: boolean | undefined;
        create_solana_wallet?: boolean | undefined;
        create_ethereum_smart_wallet?: boolean | undefined;
    }[];
}, {
    users: {
        linked_accounts: ({
            type: "wallet";
            address: string;
            chain_type: "solana" | "ethereum";
        } | {
            type: "email";
            address: string;
        } | {
            number: string;
            type: "phone";
        } | {
            type: "google_oauth";
            name: string;
            email: string;
            subject: string;
        } | {
            type: "twitter_oauth";
            name: string;
            username: string;
            subject: string;
            profile_picture_url?: string | undefined;
        } | {
            type: "discord_oauth";
            username: string;
            subject: string;
            email?: string | undefined;
        } | {
            type: "spotify_oauth";
            subject: string;
            name?: string | undefined;
            email?: string | undefined;
        } | {
            type: "github_oauth";
            username: string;
            subject: string;
            name?: string | undefined;
            email?: string | undefined;
        } | {
            type: "instagram_oauth";
            username: string;
            subject: string;
        } | {
            type: "tiktok_oauth";
            name: string | null;
            username: string;
            subject: string;
        } | {
            type: "linkedin_oauth";
            subject: string;
            name?: string | undefined;
            email?: string | undefined;
            vanityName?: string | undefined;
        } | {
            type: "apple_oauth";
            subject: string;
            email?: string | undefined;
        } | {
            type: "farcaster";
            fid: number;
            owner_address: string;
            username?: string | undefined;
            display_name?: string | undefined;
            bio?: string | undefined;
            profile_picture_url?: string | undefined;
            homepage_url?: string | undefined;
        } | {
            type: "telegram";
            telegram_user_id: string;
            username?: string | undefined;
            first_name?: string | undefined;
            last_name?: string | undefined;
            photo_url?: string | undefined;
        } | {
            type: "custom_auth";
            custom_user_id: string;
        })[];
        custom_metadata?: Record<string, string | number | boolean> | undefined;
        wallets?: {
            chain_type: "solana" | "ethereum";
            policy_ids?: string[] | undefined;
            additional_signers?: {
                signer_id: string;
                override_policy_ids?: string[] | undefined;
            }[] | undefined;
            create_smart_wallet?: boolean | undefined;
        }[] | undefined;
        create_direct_signer?: boolean | undefined;
        create_embedded_wallet?: boolean | undefined;
        create_n_embedded_wallets?: number | undefined;
        create_n_ethereum_wallets?: number | undefined;
        create_ethereum_wallet?: boolean | undefined;
        create_solana_wallet?: boolean | undefined;
        create_ethereum_smart_wallet?: boolean | undefined;
    }[];
}>;
declare const CreateWalletInput: z.ZodObject<{
    create_ethereum_wallet: z.ZodOptional<z.ZodBoolean>;
    number_of_ethereum_wallets_to_create: z.ZodOptional<z.ZodNumber>;
    create_ethereum_smart_wallet: z.ZodOptional<z.ZodBoolean>;
    create_solana_wallet: z.ZodOptional<z.ZodBoolean>;
}, "strict", z.ZodTypeAny, {
    create_ethereum_wallet?: boolean | undefined;
    create_solana_wallet?: boolean | undefined;
    create_ethereum_smart_wallet?: boolean | undefined;
    number_of_ethereum_wallets_to_create?: number | undefined;
}, {
    create_ethereum_wallet?: boolean | undefined;
    create_solana_wallet?: boolean | undefined;
    create_ethereum_smart_wallet?: boolean | undefined;
    number_of_ethereum_wallets_to_create?: number | undefined;
}>;
type CreateWalletInputType = z.infer<typeof CreateWalletInput>;
type CreateWalletInputWithRefinesType = z.infer<typeof CreateWalletInput>;
declare const WalletCreateUserInput: z.ZodEffects<z.ZodObject<{
    wallets: z.ZodOptional<z.ZodArray<z.ZodObject<{
        additional_signers: z.ZodOptional<z.ZodArray<z.ZodObject<{
            signer_id: z.ZodString;
            override_policy_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strict", z.ZodTypeAny, {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }, {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }>, "many">>;
        policy_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        chain_type: z.ZodUnion<[z.ZodLiteral<"solana">, z.ZodLiteral<"ethereum">]>;
        create_smart_wallet: z.ZodOptional<z.ZodBoolean>;
    }, "strict", z.ZodTypeAny, {
        chain_type: "solana" | "ethereum";
        policy_ids?: string[] | undefined;
        additional_signers?: {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }[] | undefined;
        create_smart_wallet?: boolean | undefined;
    }, {
        chain_type: "solana" | "ethereum";
        policy_ids?: string[] | undefined;
        additional_signers?: {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }[] | undefined;
        create_smart_wallet?: boolean | undefined;
    }>, "many">>;
    create_direct_signer: z.ZodOptional<z.ZodBoolean>;
} & {
    create_ethereum_wallet: z.ZodOptional<z.ZodBoolean>;
    number_of_ethereum_wallets_to_create: z.ZodOptional<z.ZodNumber>;
    create_ethereum_smart_wallet: z.ZodOptional<z.ZodBoolean>;
    create_solana_wallet: z.ZodOptional<z.ZodBoolean>;
} & {
    user_id: z.ZodEffects<z.ZodString, string, string>;
}, "strict", z.ZodTypeAny, {
    user_id: string;
    wallets?: {
        chain_type: "solana" | "ethereum";
        policy_ids?: string[] | undefined;
        additional_signers?: {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }[] | undefined;
        create_smart_wallet?: boolean | undefined;
    }[] | undefined;
    create_direct_signer?: boolean | undefined;
    create_ethereum_wallet?: boolean | undefined;
    create_solana_wallet?: boolean | undefined;
    create_ethereum_smart_wallet?: boolean | undefined;
    number_of_ethereum_wallets_to_create?: number | undefined;
}, {
    user_id: string;
    wallets?: {
        chain_type: "solana" | "ethereum";
        policy_ids?: string[] | undefined;
        additional_signers?: {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }[] | undefined;
        create_smart_wallet?: boolean | undefined;
    }[] | undefined;
    create_direct_signer?: boolean | undefined;
    create_ethereum_wallet?: boolean | undefined;
    create_solana_wallet?: boolean | undefined;
    create_ethereum_smart_wallet?: boolean | undefined;
    number_of_ethereum_wallets_to_create?: number | undefined;
}>, {
    user_id: string;
    wallets?: {
        chain_type: "solana" | "ethereum";
        policy_ids?: string[] | undefined;
        additional_signers?: {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }[] | undefined;
        create_smart_wallet?: boolean | undefined;
    }[] | undefined;
    create_direct_signer?: boolean | undefined;
    create_ethereum_wallet?: boolean | undefined;
    create_solana_wallet?: boolean | undefined;
    create_ethereum_smart_wallet?: boolean | undefined;
    number_of_ethereum_wallets_to_create?: number | undefined;
}, {
    user_id: string;
    wallets?: {
        chain_type: "solana" | "ethereum";
        policy_ids?: string[] | undefined;
        additional_signers?: {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }[] | undefined;
        create_smart_wallet?: boolean | undefined;
    }[] | undefined;
    create_direct_signer?: boolean | undefined;
    create_ethereum_wallet?: boolean | undefined;
    create_solana_wallet?: boolean | undefined;
    create_ethereum_smart_wallet?: boolean | undefined;
    number_of_ethereum_wallets_to_create?: number | undefined;
}>;
type WalletCreateUserInputType = z.infer<typeof WalletCreateUserInput>;

/**
 * The fields on wallet creation that can be specified when creating a user controlled embedded server wallet.
 * Legacy and owner fields are excluded.
 */
declare const WalletCreationInput: z.ZodObject<{
    additional_signers: z.ZodOptional<z.ZodArray<z.ZodObject<{
        signer_id: z.ZodString;
        override_policy_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strict", z.ZodTypeAny, {
        signer_id: string;
        override_policy_ids?: string[] | undefined;
    }, {
        signer_id: string;
        override_policy_ids?: string[] | undefined;
    }>, "many">>;
    policy_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    chain_type: z.ZodUnion<[z.ZodLiteral<"solana">, z.ZodLiteral<"ethereum">]>;
    create_smart_wallet: z.ZodOptional<z.ZodBoolean>;
}, "strict", z.ZodTypeAny, {
    chain_type: "solana" | "ethereum";
    policy_ids?: string[] | undefined;
    additional_signers?: {
        signer_id: string;
        override_policy_ids?: string[] | undefined;
    }[] | undefined;
    create_smart_wallet?: boolean | undefined;
}, {
    chain_type: "solana" | "ethereum";
    policy_ids?: string[] | undefined;
    additional_signers?: {
        signer_id: string;
        override_policy_ids?: string[] | undefined;
    }[] | undefined;
    create_smart_wallet?: boolean | undefined;
}>;
type WalletCreationInputType = z.infer<typeof WalletCreationInput>;
/**
 * The fields describing embedded wallet creation, used for user import and embedded wallet generation
 */
declare const EmbeddedWalletCreationInput: z.ZodObject<{
    wallets: z.ZodOptional<z.ZodArray<z.ZodObject<{
        additional_signers: z.ZodOptional<z.ZodArray<z.ZodObject<{
            signer_id: z.ZodString;
            override_policy_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strict", z.ZodTypeAny, {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }, {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }>, "many">>;
        policy_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        chain_type: z.ZodUnion<[z.ZodLiteral<"solana">, z.ZodLiteral<"ethereum">]>;
        create_smart_wallet: z.ZodOptional<z.ZodBoolean>;
    }, "strict", z.ZodTypeAny, {
        chain_type: "solana" | "ethereum";
        policy_ids?: string[] | undefined;
        additional_signers?: {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }[] | undefined;
        create_smart_wallet?: boolean | undefined;
    }, {
        chain_type: "solana" | "ethereum";
        policy_ids?: string[] | undefined;
        additional_signers?: {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }[] | undefined;
        create_smart_wallet?: boolean | undefined;
    }>, "many">>;
    create_direct_signer: z.ZodOptional<z.ZodBoolean>;
}, "strict", z.ZodTypeAny, {
    wallets?: {
        chain_type: "solana" | "ethereum";
        policy_ids?: string[] | undefined;
        additional_signers?: {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }[] | undefined;
        create_smart_wallet?: boolean | undefined;
    }[] | undefined;
    create_direct_signer?: boolean | undefined;
}, {
    wallets?: {
        chain_type: "solana" | "ethereum";
        policy_ids?: string[] | undefined;
        additional_signers?: {
            signer_id: string;
            override_policy_ids?: string[] | undefined;
        }[] | undefined;
        create_smart_wallet?: boolean | undefined;
    }[] | undefined;
    create_direct_signer?: boolean | undefined;
}>;

interface Route<Body = Record<string, unknown>, Response = Record<string, unknown>> {
    path: string;
    method: string;
    body?: Body;
    response?: Response;
}
type RouteResponse<T extends Route<U, V>, U = any, V = any> = NonNullable<T['response']>;
type PathParam = string | number;
/**
 * PathParams is a recursive type that parses a path string and creates an object type
 * where each property is a path parameter and its value is a PathParam type.
 */
type PathParams<T extends string> = T extends `${infer _Start}:${infer Param}/${infer Rest}` ? {
    [K in Param | keyof PathParams<Rest>]: PathParam;
} : T extends `${infer _Start}:${infer Param}` ? {
    [K in Param]: PathParam;
} : Record<string, string>;
declare const getPathWithParams: (path: string, params?: Record<string, string | number>) => string;

declare const AnalyticsEvent: Route<PrivyAnalyticsEventInput, null>;

declare const AppConfig: Route<PrivyEmptyObject, PrivyAppResponse>;

declare const CoinbaseOnRampInit: Route<PrivyCoinbaseOnRampInitInput, PrivyCoinbaseOnRampInitResponse>;
declare const CoinbaseOnRampStatus: Route<Record<string, never>, PrivyCoinbaseOnRampStatusResponse>;

declare const GetCrossAppConnections: Route<PrivyEmptyObject, PrivyCrossAppConnectionsResponse>;

declare const CustomJWTAuthenticate: Route<PrivyAuthenticateJwtInput, PrivyAuthenticatedUser>;
declare const CustomJWTLink: Route<PrivyLinkJwtInput, PrivyUser>;

declare const FarcasterInit: Route<PrivyFarcasterInitInput, PrivyFarcasterConnectInitResponse>;
declare const FarcasterAuthenticate: Route<PrivyFarcasterAuthenticateInput, PrivyAuthenticatedUser>;
declare const FarcasterLink: Route<PrivyFarcasterLinkInput, PrivyUser>;
declare const FarcasterUnlink: Route<PrivyFarcasterUnlinkInput, PrivyUser>;
declare const FarcasterStatus: Route<Record<string, never>, PrivyFarcasterConnectStatusCompletedResponse | PrivyFarcasterConnectStatusPendingResponse>;
declare const FarcasterV2Init: Route<PrivyFarcasterV2InitInput, PrivyFarcasterV2InitResponse>;
declare const FarcasterV2Authenticate: Route<PrivyFarcasterV2AuthenticateInput, PrivyAuthenticatedUser>;

declare const FarcasterSignerInit: Route<PrivyFarcasterSignerInitInput, PrivyFarcasterSignerInitResponse>;
declare const FarcasterSignerStatus: Route<PrivyEmptyObject, PrivyFarcasterSignerStatusResponse>;

declare const GuestAuthenticate: Route<PrivyAuthenticateGuestInput, PrivyAuthenticatedUser>;

declare const MfaPasskeyInit: Route<MfaPasskeyInitInputType, ResponsePasskeyInitAuthenticateType>;
declare const MfaPasskeyVerify: Route<MfaPasskeyVerifyInputType, MfaVerifyResponseType>;
declare const MfaPasskeyEnrollment: Route<PrivyMfaEnrollmentPasskeyInputType, PrivyEmptyObject>;

declare const MfaPasswordlessSmsEnroll: Route<MfaSmsEnrollInputType, PrivyUser>;
declare const MfaPasswordlessSmsVerify: Route<MfaSmsVerifyInputType, MfaVerifyResponseType>;
declare const MfaPasswordlessSmsInit: Route<MfaSmsInitInputType, PrivySuccessObject>;
declare const MfaPasswordlessSmsUnenroll: Route<Record<string, never>, PrivySuccessObject>;

declare const MfaTotpEnroll: Route<MfaTotpInputType, PrivyUser>;
declare const MfaTotpVerify: Route<MfaTotpInputType, MfaVerifyResponseType>;
declare const MfaTotpInit: Route<Record<string, never>, ResponseTotpInitMfaType>;
declare const MfaTotpUnenroll: Route<Record<string, never>, PrivySuccessObject>;

declare const OAuthAuthenticate: Route<PrivyAuthenticateOauthInput, PrivyAuthenticatedUser>;
declare const OAuthInit: Route<PrivyOAuthInitInput, PrivyOAuthInitResponse>;
declare const OAuthLink: Route<PrivyLinkOAuthInput, PrivyOAuthLinkResponse>;
declare const OAuthUnlink: Route<PrivyOAuthUnlinkInput, PrivyUser>;

declare const OAuthProviderAuthorize: Route<z.infer<typeof AuthorizationCodeInput>>;
declare const OAuthProviderVerify: Route<{
    prat: string;
}, {
    verified: boolean;
}>;

declare const PasskeyLink: Route<PasskeyLinkInputType, PrivyUser>;
declare const PasskeyAuthenticate: Route<PasskeyAuthenticateInputType, PrivyAuthenticatedUser>;
declare const PasskeyRegister: Route<PasskeyRegisterInputType, PrivyAuthenticatedUser>;
declare const PasskeyAuthenticateInit: Route<PasskeyInitInputType, ResponsePasskeyInitAuthenticateType>;
declare const PasskeyRegisterInit: Route<PasskeyInitInputType, ResponsePasskeyInitRegisterType>;
declare const PasskeyLinkInit: Route<PasskeyInitInputType, ResponsePasskeyInitLinkType>;
declare const PasskeyUnlink: Route<PrivyUnlinkPasskeyInput, PrivyUser>;

declare const PasswordlessAuthenticate: Route<PrivyAuthenticateEmailInput, PrivyAuthenticatedUser>;
declare const PasswordlessInit: Route<PrivyInitEmailInput, PrivySuccessObject>;
declare const PasswordlessLink: Route<PrivyVerifyEmailInput, PrivyUser>;
declare const PasswordlessUnlink: Route<PrivyUnlinkEmailInput, PrivyUser>;
declare const PasswordlessUpdate: Route<PrivyUpdateEmailInput, PrivyUser>;

declare const PasswordlessSmsAuthenticate: Route<PrivyAuthenticatePhoneInput, PrivyAuthenticatedUser>;
declare const PasswordlessSmsInit: Route<PrivyLinkPhoneInput, PrivySuccessObject>;
declare const PasswordlessSmsLink: Route<PrivyVerifyPhoneInput, PrivyUser>;
declare const PasswordlessSmsUnlink: Route<PrivyUnlinkPhoneInput, PrivyUser>;
declare const PasswordlessSmsUpdate: Route<PrivyUpdatePhoneInput, PrivyUser>;

declare const RecoveryKeyMaterial: Route<PrivyRecoveryKeyMaterialInput, PrivyRecoveryKeyMaterialResponse>;
declare const RecoveryOAuthInit: Route<PrivyOAuthInitRecoveryInput, PrivyOAuthInitResponse>;
declare const RecoveryOAuthAuthenticate: Route<PrivyAuthenticateOauthInput, PrivyOAuthAuthenticateRecoveryResponse>;
declare const RecoveryOAuthInitICloud: Route<PrivyOAuthInitICloudRecoveryInput, PrivyOAuthInitResponse>;
declare const RecoveryOAuthCallbackICloudExpo: Route<PrivyOAuthCallbackICloudExpoInput, PrivyOAuthCallbackICloudExpoResponse>;
declare const RecoveryConfigurationICloud: Route<PrivyRecoveryConfigurationICloudInput, PrivyRecoveryConfigurationICloudResponse>;

declare const RefreshSession: Route<PrivyOptionalRefreshTokenInput, PrivyAuthenticatedUser>;
declare const Logout: Route<PrivyOptionalRefreshTokenInput, PrivyEmptyObject>;

declare const GetSmartWalletConfig: Route<PrivyEmptyObject, PrivySmartWalletConfigurationResponse>;
declare const PostSmartWalletConfig: Route<PrivySmartWalletConfigurationInput, PrivySmartWalletConfigurationResponse>;

declare const SiweInit: Route<PrivySiweAddressInput, PrivySiweNonce>;
declare const SiweAuthenticate: Route<PrivyAuthenticateSiweInput, PrivyAuthenticatedUser>;
declare const SiweLink: Route<PrivySiweInput, PrivyUser>;
declare const SiweLinkSmartWallet: Route<PrivySmartWalletSiweInput, PrivyUser>;
declare const SiweUnlink: Route<PrivySiweAddressInput, PrivyUser>;

declare const SiwsInit: Route<PrivySiwsAddressInput, PrivySiwsNonce>;
declare const SiwsAuthenticate: Route<PrivyAuthenticateSiwsInput, PrivyAuthenticatedUser>;
declare const SiwsLink: Route<PrivySiwsInput, PrivyUser>;
declare const SiwsUnlink: Route<PrivySiwsAddressInput, PrivyUser>;

declare const AcceptTermsOnUser: Route<Record<string, never>, PrivyUser>;

declare const TelegramAuthenticate: Route<PrivyTelegramAuthenticateInput, PrivyAuthenticatedUser>;
declare const TelegramLink: Route<PrivyTelegramLinkInput, PrivyUser>;
declare const TelegramUnlink: Route<PrivyTelegramUnlinkInput, PrivyUser>;

declare const MoonpayOnRampSign: Route<PrivyMoonpayOnRampSignInput, PrivyMoonpayOnRampSignResponse>;

declare const RefreshUser: Route<PrivyUserWithIdentityToken>;

declare const WalletsGet: Route<WalletsSearchInputType, WalletsResponseType>;
declare const WalletCreate: Route<WalletApiCreateInputType, WalletResponseType>;
declare const WalletGet: Route<PrivyEmptyObject, WalletResponseType>;
declare const WalletGetBalance: Route<PrivyEmptyObject, WalletGetBalanceResponseType>;
declare const WalletRpc: Route<WalletApiRpcInputType, WalletApiRpcResponseType>;
declare const WalletRawSign: Route<WalletApiRawSignInputType, WalletApiRawSignResponseType>;
declare const WalletUpdate: Route<WalletUpdateInputType, WalletResponseType>;
declare const WalletExport: Route<PrivateKeyExportInputType, PrivateKeyExportResponseType>;
declare const WalletDelegate: Route<DelegatedActionsConsentInputType, {
    message: string;
}>;
declare const WalletsRevoke: Route<PrivyEmptyObject, WalletApiRevokeResponseType>;
declare const WalletGetTransactions: Route<WalletGetTransactionsInputType, WalletGetTransactionsResponseType>;

export { AcceptTermsOnUser, AccountIdFromPath, AdditionalSignerInput, type AdditionalSignerInputType, type AlchemyPaymasterContext, AlchemyPaymasterContextSchema, AnalyticsEvent, AnalyticsEventInput, AppConfig, AppIdFromPath, AppResponseSchema, AppleOauthAccount, AppleOauthIdTokenEntry, Asset, AssetAmountDetails, type AssetType, AuthenticateEmailInput, AuthenticateGuestInput, AuthenticateJwtInput, AuthenticateMode, AuthenticateOauthInput, AuthenticatePhoneInput, AuthenticateSiweInput, AuthenticateSiwsInput, AuthenticatedUser, AuthenticationEvent, AuthorizationCodeInput, AuthorizationKeyAccount, AuthorizationKeyDashboardResponse, type AuthorizationKeyDashboardResponseType, AuthorizationKeyResponse, type AuthorizationKeyResponseType, AuthorizationKeyRole, BICONOMY, BalanceFiatCurrency, BaseCondition, BaseTransactionResponse, BaseWalletAccount, BaseWalletApiCreateInput, BitcoinSegwitEmbeddedWalletAccount, BitcoinTaprootEmbeddedWalletAccount, BridgeBusinessAssociatedPerson, BridgeKycAddress, BridgeKycData, BridgeKycDocument, BridgeKycIdentifyingInformation, BridgeKycInput, BridgeKycLinkResponse, BridgeRegulatedActivity, BridgeTradedListings, CAIP2, COINBASE_SMART_WALLET, ChainNameInput, type ChainNameInputType, ChainType, CoinbaseOnRampInit, CoinbaseOnRampInitInput, CoinbaseOnRampInitResponse, CoinbaseOnRampStatus, CoinbaseOnRampStatusResponse, Condition, ConditionOperator, type ConditionType, Cosmos, CreateEmbeddedWalletUserImportInput, type CreateEmbeddedWalletUserImportInputType, CreateKeyQuorumInput, type CreateKeyQuorumInputType, CreateWalletInput, type CreateWalletInputType, type CreateWalletInputWithRefinesType, CrossAppAccount, CrossAppConnectionsResponse, CrossAppEmbeddedWallet, CrossAppIdTokenEntry, CrossAppSmartWallet, Currency, type CurveSigningChainType, CurveSigningChainTypes, CurveType, CustomJWTAuthenticate, CustomJWTLink, CustomJwtAccount, CustomJwtIdTokenEntry, CustomMetadata, type CustomMetadataType, DelegatedActionsConsentInput, type DelegatedActionsConsentInputType, DiscordOauthAccount, DiscordOauthIdTokenEntry, ECDSA, EMBEDDED_WALLET_RECOVERY_TYPES, EdDSA, Email, EmailAccount, EmailIdTokenEntry, type EmbeddedWalletConfig, EmbeddedWalletConfigSchema, EmbeddedWalletCreationInput, EmbeddedWalletCreationInputUnion, type EmbeddedWalletCreationInputUnionType, EmbeddedWalletInputSchema, type EmbeddedWalletRecoveryType, EmptyObject, EthereumAccount, EthereumCalldataCondition, type EthereumCalldataConditionType, EthereumEmbeddedWalletAccount, EthereumTransactionCondition, type EthereumTransactionConditionType, EthereumTypedDataDomainCondition, type EthereumTypedDataDomainConditionType, EthereumTypedDataMessageCondition, type EthereumTypedDataMessageConditionType, EventType, EventTypes, ExternalOAuthProvider, type ExternalOAuthProviderType, FarcasterAccount, FarcasterAuthenticate, FarcasterAuthenticateInput, FarcasterConnectInitResponse, FarcasterConnectStatusCompletedResponse, FarcasterConnectStatusPendingResponse, FarcasterIdTokenEntry, FarcasterInit, FarcasterInitInput, FarcasterLink, FarcasterLinkInput, FarcasterSignerInit, FarcasterSignerInitInput, FarcasterSignerInitResponse, FarcasterSignerStatus, FarcasterSignerStatusResponse, FarcasterStatus, FarcasterUnlink, FarcasterUnlinkInput, FarcasterV2Authenticate, FarcasterV2AuthenticateInput, FarcasterV2Init, FarcasterV2InitInput, FarcasterV2InitResponse, FiatAccountAddress, FiatAccountIbanData, FiatAccountSwiftData, FiatAccountUsAccountData, FiatCurrency, FiatPaymentRail, type FirstClassChainType, FirstClassChainTypes, type FundingConfig, FundingConfigResponseSchema, type FundingMethod, FundingMethodArraySchema, FundingMethodEnum, FundsTransferEvent, GetCrossAppConnections, GetOnrampFiatAccountStatusInput, GetOnrampFiatAccountsResponse, GetOnrampKycStatusInput, GetOnrampKycStatusResponse, GetOnrampTermsOfServiceStatusInput, GetSmartWalletConfig, GithubOauthAccount, GithubOauthIdTokenEntry, GoogleOauthAccount, GoogleOauthIdTokenEntry, GuestAuthenticate, HDPath, Hash, Hex, ImportAppleAccountInput, ImportCustomJwtAccountInput, ImportDiscordAccountInput, ImportEmailAccountInput, ImportFarcasterAccountInput, ImportGithubAccountInput, ImportGoogleAccountInput, type ImportGoogleAccountInputType, ImportInstagramAccountInput, ImportLinkedInAccountInput, ImportManyUsersInput, ImportPhoneAccountInput, ImportSpotifyAccountInput, ImportTelegramAccountInput, ImportTiktokAccountInput, ImportTwitterAccountInput, type ImportTwitterAccountInputType, ImportUserInput, type ImportUserInputType, ImportWalletAccountInput, type ImportWalletAccountInputType, InitEmailInput, InstagramOauthAccount, InstagramOauthIdTokenEntry, JsonWebKey, JsonWebKeySet, KERNEL, KeyQuorumId, KeyQuorumIdFromPath, type KeyQuorumIdType, type KeyQuorumResponseType, LIGHT_ACCOUNT, type LegacyMethodRulesType, LegacyRule, type LegacyRuleType, LinkJwtInput, LinkOAuthInput, LinkedAccount, LinkedAccountInput, type LinkedAccountInputType, type LinkedAccountsIdTokenEntry, type LinkedAccountsInputType, LinkedInOauthAccount, LinkedInOauthIdTokenEntry, LinkedMfaMethod, ListFiatTransactionsInput, ListFiatTransactionsResponse, LoggedOutUser, Logout, MaybeUser, type MfaDisabledEvent, type MfaDisabledEventPayload, type MfaEnabledEvent, type MfaEnabledEventPayload, MfaEnrollmentPasskeyInput, MfaEvent, MfaPasskeyEnrollment, MfaPasskeyInit, MfaPasskeyInitInput, type MfaPasskeyInitInputType, MfaPasskeyVerify, MfaPasskeyVerifyInput, type MfaPasskeyVerifyInputType, MfaPasswordlessSmsEnroll, MfaPasswordlessSmsInit, MfaPasswordlessSmsUnenroll, MfaPasswordlessSmsVerify, MfaSmsAuthenticateEnrollInput, type MfaSmsAuthenticateEnrollInputType, MfaSmsEnrollInput, type MfaSmsEnrollInputType, MfaSmsInitInput, type MfaSmsInitInputType, MfaSmsVerifyInput, type MfaSmsVerifyInputType, MfaTotpEnroll, MfaTotpInit, MfaTotpInput, type MfaTotpInputType, MfaTotpUnenroll, MfaTotpVerify, MfaVerifyResponse, type MfaVerifyResponseType, MoonpayOnRampSign, MoonpayOnRampSignInput, MoonpayOnRampSignResponse, OAuthAuthenticate, OAuthAuthenticateRecoveryResponse, OAuthCallbackICloudExpoInput, OAuthCallbackICloudExpoResponse, OAuthInit, OAuthInitICloudRecoveryInput, OAuthInitInput, OAuthInitRecoveryInput, OAuthInitResponse, OAuthLink, OAuthLinkResponse, OAuthProvider, OAuthProviderAuthorize, type OAuthProviderType, OAuthProviderVerify, OAuthTokens, OAuthUnlink, OAuthUnlinkInput, OfframpInput, OfframpResponse, OnrampAsset, OnrampChain, OnrampFiatAccountInput, OnrampFiatAccountResponse, OnrampInput, OnrampKycInput, OnrampKycResponse, OnrampKycStatus, OnrampProvider, OnrampResponse, OnrampTermsOfServiceStatusResponse, OnrampTransferStatus, OptionalRefreshTokenInput, OwnerInput, OwnerInputFields, type OwnerInputType, P256PublicKey, Pagination, PasskeyAccount, PasskeyAuthenticate, PasskeyAuthenticateInit, PasskeyAuthenticateInput, type PasskeyAuthenticateInputType, PasskeyAuthenticatorEnrollmentOptions, type PasskeyAuthenticatorEnrollmentOptionsType, PasskeyAuthenticatorEnrollmentResponse, type PasskeyAuthenticatorEnrollmentResponseType, PasskeyAuthenticatorVerifyOptions, type PasskeyAuthenticatorVerifyOptionsType, PasskeyAuthenticatorVerifyResponse, type PasskeyAuthenticatorVerifyResponseType, PasskeyIdTokenEntry, PasskeyInitInput, type PasskeyInitInputType, PasskeyLink, PasskeyLinkInit, PasskeyLinkInput, type PasskeyLinkInputType, PasskeyMfaMethod, PasskeyRegister, PasskeyRegisterInit, PasskeyRegisterInput, type PasskeyRegisterInputType, PasskeyUnlink, PasswordlessAuthenticate, PasswordlessCode, PasswordlessInit, PasswordlessLink, PasswordlessSmsAuthenticate, PasswordlessSmsInit, PasswordlessSmsLink, PasswordlessSmsPhoneInput, PasswordlessSmsUnlink, PasswordlessSmsUpdate, PasswordlessUnlink, PasswordlessUpdate, type PathParams, PhoneAccount, PhoneIdTokenEntry, PhoneNumber, PolicyAction, type PolicyActionType, PolicyIdFromPath, PolicyInput, type PolicyMethodType, PolicyResponse, type PolicyResponseType, type PolicyType, PolicyWithoutValidation, PostSmartWalletConfig, type Prettify, type PrivateKeyExportEvent, type PrivateKeyExportEventPayload, PrivateKeyExportInput, type PrivateKeyExportInputType, PrivateKeyExportResponse, type PrivateKeyExportResponseType, PrivateKeyExportedEvent, type PrivyAnalyticsEventInput, type PrivyAppResponse, type PrivyAppleOauthAccount, type PrivyAppleOauthIdTokenEntry, type PrivyAuthenticateEmailInput, type PrivyAuthenticateGuestInput, type PrivyAuthenticateJwtInput, type PrivyAuthenticateOauthInput, type PrivyAuthenticatePhoneInput, type PrivyAuthenticateSiweInput, type PrivyAuthenticateSiwsInput, type PrivyAuthenticatedUser, type PrivyBaseWalletAccount, type PrivyBitcoinSegwitEmbeddedWalletAccount, type PrivyBitcoinTaprootEmbeddedWalletAccount, type PrivyCoinbaseOnRampInitInput, type PrivyCoinbaseOnRampInitResponse, type PrivyCoinbaseOnRampStatusResponse, type PrivyCrossAppConnectionsResponse, type PrivyCrossAppIdTokenEntry, type PrivyCrossAppWalletAccount, type PrivyCustomJwtAccount, type PrivyCustomJwtIdTokenEntry, type PrivyDiscordOauthAccount, type PrivyDiscordOauthIdTokenEntry, type PrivyEmailAccount, type PrivyEmailIdTokenEntry, type PrivyEmbeddedWalletAccount, type PrivyEmptyObject, type PrivyEthereumAccount, type PrivyEthereumEmbeddedWalletAccount, type PrivyFarcasterAccount, type PrivyFarcasterAuthenticateInput, type PrivyFarcasterConnectInitResponse, type PrivyFarcasterConnectStatusCompletedResponse, type PrivyFarcasterConnectStatusPendingResponse, type PrivyFarcasterIdTokenEntry, type PrivyFarcasterInitInput, type PrivyFarcasterLinkInput, type PrivyFarcasterReactToCastResponse, type PrivyFarcasterRemoveCastResponse, type PrivyFarcasterRemoveLinkResponse, type PrivyFarcasterSignerInitInput, type PrivyFarcasterSignerInitResponse, type PrivyFarcasterSignerStatusResponse, type PrivyFarcasterSubmitCastResponse, type PrivyFarcasterSubmitLinkResponse, type PrivyFarcasterUnlinkInput, type PrivyFarcasterV2AuthenticateInput, type PrivyFarcasterV2InitInput, type PrivyFarcasterV2InitResponse, type PrivyGithubOauthAccount, type PrivyGithubOauthIdTokenEntry, type PrivyGoogleOauthAccount, type PrivyGoogleOauthIdTokenEntry, type PrivyInitEmailInput, type PrivyInstagramOauthAccount, type PrivyInstagramOauthIdTokenEntry, type PrivyLinkJwtInput, type PrivyLinkOAuthInput, type PrivyLinkPhoneInput, type PrivyLinkedAccount, type PrivyLinkedInOauthAccount, type PrivyLinkedInOauthIdTokenEntry, type PrivyLoggedOutUser, type PrivyMfaEnrollmentPasskeyInputType, type PrivyMoonpayOnRampSignInput, type PrivyMoonpayOnRampSignResponse, type PrivyOAuthAuthenticateRecoveryResponse, type PrivyOAuthCallbackICloudExpoInput, type PrivyOAuthCallbackICloudExpoResponse, type PrivyOAuthInitICloudRecoveryInput, type PrivyOAuthInitInput, type PrivyOAuthInitRecoveryInput, type PrivyOAuthInitResponse, type PrivyOAuthLinkResponse, type PrivyOAuthProvider, type PrivyOAuthUnlinkInput, type PrivyOptionalRefreshTokenInput, type PrivyPasskeyAccount, type PrivyPasskeyIdTokenEntry, type PrivyPasskeyMfaMethod, type PrivyPhoneAccount, type PrivyPhoneIdTokenEntry, type PrivyRecoveryConfigurationICloudInput, type PrivyRecoveryConfigurationICloudResponse, type PrivyRecoveryKeyMaterialInput, type PrivyRecoveryKeyMaterialResponse, type PrivyRefreshTokenInput, type PrivySignerAccount, type PrivySiweAddressInput, type PrivySiweInitInput, type PrivySiweInput, type PrivySiweNonce, type PrivySiwsAddressInput, type PrivySiwsInitInput, type PrivySiwsInput, type PrivySiwsNonce, type PrivySmartWalletAccount, type PrivySmartWalletConfigurationInput, type PrivySmartWalletConfigurationResponse, type PrivySmartWalletIdTokenEntry, type PrivySmartWalletSiweInput, type PrivySmsMfaMethod, type PrivySolanaAccount, type PrivySolanaEmbeddedWalletAccount, type PrivySpotifyOauthAccount, type PrivySpotifyOauthIdTokenEntry, type PrivySuccessObject, type PrivyTelegramAccount, type PrivyTelegramAuthenticateInput, type PrivyTelegramIdTokenEntry, type PrivyTelegramLinkInput, type PrivyTelegramUnlinkInput, type PrivyTiktokOauthAccount, type PrivyTiktokOauthIdTokenEntry, type PrivyTotpMfaMethod, PrivyTransactionResponseWithDetails, type PrivyTransactionResponseWithDetailsType, type PrivyTransactionScanningInputType, type PrivyTransactionScanningResponseAssetDiffType, type PrivyTransactionScanningResponseAssetInfoType, type PrivyTransactionScanningResponseExposureType, type PrivyTransactionScanningResponseParamsType, type PrivyTransactionScanningResponseSimulationResult, type PrivyTransactionScanningResponseType, type PrivyTransactionScanningResponseValidationResult, type PrivyTransferEmailInput, type PrivyTransferFarcasterInput, type PrivyTransferPhoneInput, type PrivyTransferSiweInput, type PrivyTransferTelegramInput, type PrivyTwitterOauthAccount, type PrivyTwitterOauthIdTokenEntry, type PrivyUnifiedWalletAccount, type PrivyUnlinkEmailInput, type PrivyUnlinkPasskeyInput, type PrivyUnlinkPhoneInput, type PrivyUpdateEmailInput, type PrivyUpdatePhoneInput, type PrivyUser, type PrivyUserWithIdentityToken, type PrivyVerifyEmailInput, type PrivyVerifyPhoneInput, type PrivyWalletIdTokenEntry, Quantity, type QuantityType, RecoveryConfigurationICloud, RecoveryConfigurationICloudInput, RecoveryConfigurationICloudResponse, RecoveryKeyMaterial, RecoveryKeyMaterialInput, RecoveryKeyMaterialResponse, RecoveryOAuthAuthenticate, RecoveryOAuthCallbackICloudExpo, RecoveryOAuthInit, RecoveryOAuthInitICloud, RefreshSession, RefreshTokenInput, RefreshUser, ResponsePasskeyInitAuthenticate, type ResponsePasskeyInitAuthenticateType, ResponsePasskeyInitLink, type ResponsePasskeyInitLinkType, ResponsePasskeyInitMfa, type ResponsePasskeyInitMfaType, ResponsePasskeyInitRegister, type ResponsePasskeyInitRegisterType, ResponseTotpInitMfa, type ResponseTotpInitMfaType, type Route, type RouteResponse, Rule, type RuleType, SAFE, SUPPORTED_OAUTH_PROVIDERS, SUPPORTED_SMART_WALLET_TYPES, type SessionUpdateAction, SessionUpdateActionEnum, SigningAlgorithm, SiweAddressInput, SiweAuthenticate, SiweInit, SiweInitInput, SiweInput, SiweLink, SiweLinkSmartWallet, SiweNonce, SiweUnlink, SiwsAddressInput, SiwsAuthenticate, SiwsInit, SiwsInitInput, SiwsInput, SiwsLink, SiwsNonce, SiwsUnlink, SmartWalletAccount, SmartWalletConfigurationInputSchema, SmartWalletConfigurationResponseSchema, SmartWalletConfigurationSchema, SmartWalletIdTokenEntry, type SmartWalletNetworkConfigurationInput, SmartWalletNetworkConfigurationInputSchema, SmartWalletProvider, SmartWalletSiweInput, type SmartWalletType, SmsMfaMethod, SolanaAccount, SolanaEmbeddedWalletAccount, SolanaProgramInstruction, type SolanaProgramInstructionType, SolanaSystemProgramInstruction, type SolanaSystemProgramInstructionType, SolanaTokenProgramInstruction, type SolanaTokenProgramInstructionType, SolanaWalletAddress, SpotifyOauthAccount, SpotifyOauthIdTokenEntry, Stellar, SuccessObject, Sui, type SupportedChainType, THIRDWEB, TelegramAccount, TelegramAuthConfigSchema, TelegramAuthResult, type TelegramAuthResultType, type TelegramAuthWebDataType, TelegramAuthenticate, TelegramAuthenticateInput, TelegramIdTokenEntry, TelegramLink, TelegramLinkInput, TelegramUnlink, TelegramUnlinkInput, TelegramWebAppData, TestAccountIdFromPath, TiktokOauthAccount, TiktokOauthIdTokenEntry, TotpMfaMethod, type TransactionBroadcastedEvent, type TransactionConfirmedEvent, type TransactionDelayedEvent, TransactionDetail, type TransactionDetailType, TransactionEvent, type TransactionExecutionRevertedEvent, TransactionIdFromPath, TransactionResponse, type TransactionResponseType, TransactionResponseWithDetails, TransactionScanningInput, TransactionScanningResponse, type TransactionScanningResponseAssetValueType, TransactionStatus, TransferEmailInput, TransferFarcasterInput, TransferOAuthInput, TransferPhoneInput, TransferReceivedTransactionDetail, TransferSentTransactionDetail, TransferSiweInput, TransferTelegramInput, TwitterOauthAccount, TwitterOauthIdTokenEntry, TypedDataDomainInputParams, type TypedDataDomainInputParamsType, TypedDataTypesInputParams, type TypedDataTypesInputParamsType, UnifiedWalletAccount, UnlinkEmailInput, UnlinkPasskeyInput, UnlinkPhoneInput, UnsignedEthereumTransaction, type UnsignedEthereumTransactionType, UpdateEmailInput, UpdateKeyQuorumInput, type UpdateKeyQuorumInputType, UpdatePhoneInput, UpdatePolicyInput, type UpdatePolicyInputType, User, type UserAuthenticatedEvent, type UserCreatedEvent, UserId, type UserLinkedAccountEvent, UserSignersAuthenticateInput, type UserSignersAuthenticateInputType, UserSignersAuthenticateResponse, type UserSignersAuthenticateResponseType, type UserTransferredAccountEvent, type UserUnlinkedAccountEvent, type UserUpdatedAccountEvent, type UserWalletCreatedEvent, UserWithIdentityToken, VerifyEmailInput, VerifyPhoneInput, WalletAddress, WalletApiCreateInput, type WalletApiCreateInputType, WalletApiCreateResponse, type WalletApiCreateResponseType, WalletApiEthereumPersonalSignRpcInput, WalletApiEthereumPersonalSignRpcInputParams, type WalletApiEthereumPersonalSignRpcInputParamsType, WalletApiEthereumPersonalSignRpcResponse, type WalletApiEthereumPersonalSignRpcResponseType, WalletApiEthereumRpcInput, WalletApiEthereumSecp256k1SignRpcInput, WalletApiEthereumSecp256k1SignRpcResponse, type WalletApiEthereumSecp256k1SignRpcResponseType, WalletApiEthereumSendTransactionRpcInput, type WalletApiEthereumSendTransactionRpcInputType, WalletApiEthereumSendTransactionRpcResponse, type WalletApiEthereumSendTransactionRpcResponseType, WalletApiEthereumSignTransactionRpcInput, WalletApiEthereumSignTransactionRpcResponse, type WalletApiEthereumSignTransactionRpcResponseType, WalletApiEthereumSignTypedDataRpcInput, WalletApiEthereumSignTypedDataRpcResponse, type WalletApiEthereumSignTypedDataRpcResponseType, WalletApiExportPrivateKeyRpcInput, type WalletApiExportPrivateKeyRpcInputType, WalletApiExportPrivateKeyRpcResponse, type WalletApiExportPrivateKeyRpcResponseType, WalletApiRawSignInput, type WalletApiRawSignInputType, WalletApiRawSignResponse, type WalletApiRawSignResponseType, WalletApiRegisterAuthorizationKeyInput, type WalletApiRegisterAuthorizationKeyInputType, WalletApiRevokeAuthorizationKeyInput, WalletApiRevokeResponse, type WalletApiRevokeResponseType, WalletApiRpcInput, type WalletApiRpcInputType, WalletApiRpcResponse, type WalletApiRpcResponseType, WalletApiSolanaRpcInput, WalletApiSolanaSignAndSendTransactionRpcInput, type WalletApiSolanaSignAndSendTransactionRpcInputType, WalletApiSolanaSignAndSendTransactionRpcResponse, type WalletApiSolanaSignAndSendTransactionRpcResponseType, WalletApiSolanaSignMessageRpcInput, WalletApiSolanaSignMessageRpcResponse, type WalletApiSolanaSignMessageRpcResponseType, WalletApiSolanaSignTransactionRpcInput, WalletApiSolanaSignTransactionRpcResponse, type WalletApiSolanaSignTransactionRpcResponseType, WalletCreate, WalletCreateUserInput, type WalletCreateUserInputType, WalletCreationInput, type WalletCreationInputType, WalletDelegate, type WalletDepositEvent, type WalletDepositEventPayload, WalletExport, WalletGet, WalletGetBalance, WalletGetBalanceInput, WalletGetBalanceResponse, type WalletGetBalanceResponseType, WalletGetTransactions, WalletGetTransactionsInput, type WalletGetTransactionsInputType, WalletGetTransactionsResponse, type WalletGetTransactionsResponseType, WalletIdFromPath, type WalletIdFromPathType, WalletIdTokenEntry, WalletRawSign, type WalletRecoveredEvent, type WalletRecoveredEventPayload, type WalletRecoverySetupEvent, type WalletRecoverySetupEventPayload, WalletResponse, type WalletResponseType, WalletRpc, WalletUpdate, WalletUpdateInput, type WalletUpdateInputType, type WalletWithdrawalEvent, type WalletWithdrawalEventPayload, WalletsGet, type WalletsResponseType, WalletsRevoke, WalletsSearchInput, type WalletsSearchInputType, WalletsWithRecoveryRequest, type WalletsWithRecoveryRequestType, WalletsWithRecoveryResponse, type WalletsWithRecoveryResponseType, getPathWithParams, isValidAddress, normalizeEthereumAddress, normalizePhoneNumber };
