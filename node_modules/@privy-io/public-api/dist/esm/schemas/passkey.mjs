import t from"zod";const o=t.object({challenge:t.string(),timeout:t.number().optional(),rp_id:t.string().optional(),allow_credentials:t.array(t.object({id:t.string(),type:t.string(),transports:t.array(t.string()).optional()})).optional(),user_verification:t.string().optional(),extensions:t.object({app_id:t.string().optional(),cred_props:t.boolean().optional(),hmac_create_secret:t.boolean().optional()}).optional()}),n=t.object({rp:t.object({name:t.string(),id:t.string().optional()}),user:t.object({id:t.string(),name:t.string(),display_name:t.string()}),challenge:t.string(),pub_key_cred_params:t.array(t.object({alg:t.number(),type:t.literal("public-key")})),timeout:t.number().optional(),exclude_credentials:t.array(t.object({id:t.string(),type:t.string(),transports:t.array(t.string()).optional()})).optional(),authenticator_selection:t.object({authenticator_attachment:t.string().optional(),require_resident_key:t.boolean().optional(),resident_key:t.string().optional(),user_verification:t.string().optional()}).optional(),attestation:t.string().optional(),extensions:t.object({app_id:t.string().optional(),cred_props:t.object({rk:t.boolean().optional()}).optional(),hmac_create_secret:t.boolean().optional()}).optional()}),i=t.object({id:t.string(),raw_id:t.string(),response:t.object({client_data_json:t.string(),authenticator_data:t.string(),signature:t.string(),user_handle:t.string().optional()}),authenticator_attachment:t.string().optional(),client_extension_results:t.object({app_id:t.boolean().optional(),cred_props:t.object({rk:t.boolean().optional()}).optional(),hmac_create_secret:t.boolean().optional()}),type:t.literal("public-key")}),e=t.object({id:t.string(),raw_id:t.string(),response:t.object({client_data_json:t.string(),attestation_object:t.string(),authenticator_data:t.string().optional(),transports:t.array(t.any()).optional(),public_key_algorithm:t.number().optional(),public_key:t.string().optional()}),authenticator_attachment:t.string().optional(),client_extension_results:t.object({app_id:t.boolean().optional(),cred_props:t.object({rk:t.boolean().optional()}).optional(),hmac_create_secret:t.boolean().optional()}),type:t.literal("public-key")}),r=t.object({relying_party:t.string().url().optional(),token:t.string().optional()}).strict(),a=t.object({relying_party:t.string().url().optional(),options:o}).strict(),l=t.object({relying_party:t.string().url().optional(),options:n}).strict(),s=t.object({relying_party:t.string().url().optional(),options:n}).strict(),p=t.object({relying_party:t.string().url().optional(),authenticator_response:e}).strict(),c=t.object({relying_party:t.string().url().optional(),authenticator_response:e}).strict(),_=t.object({relying_party:t.string().url().optional(),challenge:t.string(),authenticator_response:i}).strict(),g=t.object({credential_id:t.string(),remove_as_mfa:t.boolean().default(!0)});export{_ as PasskeyAuthenticateInput,n as PasskeyAuthenticatorEnrollmentOptions,e as PasskeyAuthenticatorEnrollmentResponse,o as PasskeyAuthenticatorVerifyOptions,i as PasskeyAuthenticatorVerifyResponse,r as PasskeyInitInput,p as PasskeyLinkInput,c as PasskeyRegisterInput,a as ResponsePasskeyInitAuthenticate,l as ResponsePasskeyInitLink,s as ResponsePasskeyInitRegister,g as UnlinkPasskeyInput};
