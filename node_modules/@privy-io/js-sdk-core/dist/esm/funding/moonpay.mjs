import{mainnet as e,arbitrum as r,base as n,polygon as t,avalanche as i,celo as a,optimism as c}from"@privy-io/chains";const o={prod:{url:"https://api.moonpay.com/v1",key:"pk_live_hirbpu0cVcLHrjktC9l7fbc9ctjv0SL"},sandbox:{url:"https://api.moonpay.com/v1",key:"pk_test_fqWjXZMSFwloh7orvJsRfjiUHXJqFzI"}};let d=new Set([e.id,r.id,n.id,t.id,i.id,a.id]),s=new Set([e.id,r.id,c.id,n.id,t.id]);function u(e,r){switch(r){case"native-currency":return d.has(e);case"USDC":return s.has(e);default:return console.warn("Unknown asset passed to MoonPay Onramp"),!1}}function p(c,o){switch(c){case r.id:return"native-currency"===o?"ETH_ARBITRUM":"USDC_ARBITRUM";case i.id:return"AVAX_CCHAIN";case n.id:return"native-currency"===o?"ETH_BASE":"USDC_BASE";case a.id:return"CELO_CELO";case t.id:return"native-currency"===o?"MATIC_POLYGON":"USDC_POLYGON";case e.id:return"native-currency"===o?"ETH_ETHEREUM":"USDC_ETHEREUM";default:return console.warn(`Chain ${c} not supported by Moonpay, defaulting to Ethereum mainnet`),"ETH_ETHEREUM"}}function E(e){switch(e){case"card":case"payment-request":return"credit_debit_card";default:throw Error(`Unsupported Moonpay funding method ${e}`)}}export{o as MoonpayEnvironments,p as chainToMoonpayCurrency,E as fundingMethodToMoonpayPaymentMethod,u as isSupportedChainIdForMoonpay};
