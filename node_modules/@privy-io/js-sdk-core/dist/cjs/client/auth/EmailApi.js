"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("@privy-io/public-api"),t=require("./maybeCreateWalletOnLogin.js");require("../../utils/getUserEmbeddedEthereumWallet.js"),require("../../utils/getAllUserEmbeddedEthereumWallets.js"),require("../../utils/getUserEmbeddedSolanaWallet.js"),require("../../utils/getAllUserEmbeddedSolanaWallets.js"),require("../../utils/shouldCreateEmbeddedEthWallet.js"),require("../../utils/shouldCreateEmbeddedSolWallet.js");exports.default=class{async sendCode(t,s){return this._privyInternal.fetch(e.PasswordlessInit,{body:{email:t,token:s}})}async loginWithCode(s,r,i,a){let d=await this._privyInternal.fetch(e.PasswordlessAuthenticate,{body:{email:s,code:r,mode:i}});await this._privyInternal.session.updateWithTokensResponse(d);let l=await t.maybeCreateWalletOnLogin(this._embedded,d,a?.embedded);return this._privyInternal.callbacks?.setUser?.(l.user),l}async linkWithCode(t,s){await this._privyInternal.fetch(e.PasswordlessLink,{body:{email:t,code:s}});let r=await this._privyInternal.refreshSession();return{user:r.user,identity_token:r.identity_token}}async updateEmail({oldEmailAddress:t,newEmailAddress:s,code:r}){await this._privyInternal.fetch(e.PasswordlessUpdate,{body:{oldAddress:t,newAddress:s,code:r}});let i=await this._privyInternal.refreshSession();return{user:i.user,identity_token:i.identity_token}}async unlink(t){await this._privyInternal.fetch(e.PasswordlessUnlink,{body:{address:t}});let s=await this._privyInternal.refreshSession();return{user:s.user,identity_token:s.identity_token}}constructor(e,t){this._privyInternal=e,this._embedded=t}};
