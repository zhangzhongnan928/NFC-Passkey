import{z as e}from"zod";import{Currency as o}from"./crypto-asset.mjs";const r=e.object({create_on_login:e.enum(["users-without-wallets","all-users","off"]),ethereum:e.object({create_on_login:e.enum(["users-without-wallets","all-users","off"])}),solana:e.object({create_on_login:e.enum(["users-without-wallets","all-users","off"])}),user_owned_recovery_options:e.array(e.enum(["user-passcode","google-drive","icloud"])),require_user_owned_recovery_on_create:e.boolean().optional(),require_user_password_on_create:e.boolean().optional()}),n=r.merge(e.object({mode:e.enum(["legacy-embedded-wallets-only","user-controlled-server-wallets-only"])})),t=e.object({bot_id:e.string(),bot_name:e.string(),link_enabled:e.boolean(),seamless_auth_enabled:e.boolean()}),a=e.enum(["moonpay","coinbase-onramp","external"]),s=e.array(a),l=e.object({default_recommended_currency:o,default_recommended_amount:e.string(),methods:s,options:e.array(e.object({method:e.string(),provider:e.string()})),prompt_funding_on_wallet_creation:e.boolean(),cross_chain_bridging_enabled:e.boolean()});export{n as EmbeddedWalletConfigSchema,r as EmbeddedWalletInputSchema,l as FundingConfigResponseSchema,s as FundingMethodArraySchema,a as FundingMethodEnum,t as TelegramAuthConfigSchema};
